2021-12-29 16:03:50,441 - mmdet - INFO - Environment info:
------------------------------------------------------------
sys.platform: linux
Python: 3.8.10 (default, Jun  4 2021, 15:09:15) [GCC 7.5.0]
CUDA available: True
GPU 0,1,2,3: NVIDIA TITAN Xp
CUDA_HOME: /usr/local/cuda
NVCC: Cuda compilation tools, release 10.2, V10.2.89
GCC: gcc (Ubuntu 5.4.0-6ubuntu1~16.04.12) 5.4.0 20160609
PyTorch: 1.7.0
PyTorch compiling details: PyTorch built with:
  - GCC 7.3
  - C++ Version: 201402
  - Intel(R) Math Kernel Library Version 2020.0.0 Product Build 20191122 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v1.6.0 (Git Hash 5ef631a030a6f73131c77892041042805a06064f)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 10.2
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75
  - CuDNN 7.6.5
  - Magma 2.5.2
  - Build settings: BLAS=MKL, BUILD_TYPE=Release, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DUSE_VULKAN_WRAPPER -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, USE_CUDA=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, 

TorchVision: 0.8.1
OpenCV: 4.5.3
MMCV: 1.3.18
MMCV Compiler: GCC 7.3
MMCV CUDA Compiler: 10.2
MMDetection: 2.12.0+170db93
------------------------------------------------------------

2021-12-29 16:03:53,499 - mmdet - INFO - Distributed training: True
2021-12-29 16:03:56,507 - mmdet - INFO - Config:
dataset_type = 'AnatomyDataset'
data_root = '/mnt/home1/workspace2/QueryInst/data/usd514_jpeg_roi'
split = 'split_2'
img_norm_cfg = dict(
    mean=[123.675, 116.28, 103.53], std=[58.395, 57.12, 57.375], to_rgb=True)
albu_train_transforms = [
    dict(
        type='OneOf',
        transforms=[
            dict(
                type='Affine',
                translate_percent=0.0,
                rotate=90,
                fit_output=True,
                p=0.25),
            dict(
                type='Affine',
                translate_percent=0.0,
                rotate=180,
                fit_output=True,
                p=0.25),
            dict(
                type='Affine',
                translate_percent=0.0,
                rotate=270,
                fit_output=True,
                p=0.25)
        ],
        p=0.75)
]
train_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(type='LoadAnnotations', with_bbox=True, with_mask=True),
    dict(type='LoadAnatomy'),
    dict(type='RandomFlip', flip_ratio=0.5),
    dict(
        type='Albu',
        transforms=[
            dict(
                type='OneOf',
                transforms=[
                    dict(
                        type='Affine',
                        translate_percent=0.0,
                        rotate=90,
                        fit_output=True,
                        p=0.25),
                    dict(
                        type='Affine',
                        translate_percent=0.0,
                        rotate=180,
                        fit_output=True,
                        p=0.25),
                    dict(
                        type='Affine',
                        translate_percent=0.0,
                        rotate=270,
                        fit_output=True,
                        p=0.25)
                ],
                p=0.75)
        ],
        bbox_params=dict(
            type='BboxParams',
            format='pascal_voc',
            label_fields=['gt_labels'],
            min_visibility=0.0,
            filter_lost_elements=True),
        keymap=dict(img='image', gt_masks='masks', gt_bboxes='bboxes'),
        update_pad_shape=False,
        skip_img_without_anno=True),
    dict(
        type='Resize',
        img_scale=[(1333, 480), (1333, 512), (1333, 544), (1333, 576),
                   (1333, 608), (1333, 640), (1333, 672), (1333, 704),
                   (1333, 736), (1333, 768), (1333, 800)],
        multiscale_mode='value',
        keep_ratio=True),
    dict(
        type='Normalize',
        mean=[123.675, 116.28, 103.53],
        std=[58.395, 57.12, 57.375],
        to_rgb=True),
    dict(type='Pad', size_divisor=32),
    dict(type='DefaultFormatBundle'),
    dict(type='FormatAnatomyBundle'),
    dict(
        type='Collect',
        keys=['img', 'anatomy', 'gt_bboxes', 'gt_labels', 'gt_masks'])
]
test_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(type='LoadAnatomy'),
    dict(
        type='MultiScaleFlipAug',
        img_scale=(1333, 800),
        flip=False,
        transforms=[
            dict(type='Resize', keep_ratio=True),
            dict(type='RandomFlip'),
            dict(
                type='Normalize',
                mean=[123.675, 116.28, 103.53],
                std=[58.395, 57.12, 57.375],
                to_rgb=True),
            dict(type='Pad', size_divisor=32),
            dict(type='ImageToTensor', keys=['img']),
            dict(type='FormatAnatomyBundle'),
            dict(type='Collect', keys=['img', 'anatomy'])
        ])
]
data = dict(
    samples_per_gpu=2,
    workers_per_gpu=2,
    train=dict(
        type='AnatomyDataset',
        ann_file=
        '/mnt/home1/workspace2/QueryInst/data/usd514_jpeg_roi/annotations/train_anno_crop_split_2.json',
        img_prefix=
        '/mnt/home1/workspace2/QueryInst/data/usd514_jpeg_roi/images/',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(type='LoadAnnotations', with_bbox=True, with_mask=True),
            dict(type='LoadAnatomy'),
            dict(type='RandomFlip', flip_ratio=0.5),
            dict(
                type='Albu',
                transforms=[
                    dict(
                        type='OneOf',
                        transforms=[
                            dict(
                                type='Affine',
                                translate_percent=0.0,
                                rotate=90,
                                fit_output=True,
                                p=0.25),
                            dict(
                                type='Affine',
                                translate_percent=0.0,
                                rotate=180,
                                fit_output=True,
                                p=0.25),
                            dict(
                                type='Affine',
                                translate_percent=0.0,
                                rotate=270,
                                fit_output=True,
                                p=0.25)
                        ],
                        p=0.75)
                ],
                bbox_params=dict(
                    type='BboxParams',
                    format='pascal_voc',
                    label_fields=['gt_labels'],
                    min_visibility=0.0,
                    filter_lost_elements=True),
                keymap=dict(img='image', gt_masks='masks', gt_bboxes='bboxes'),
                update_pad_shape=False,
                skip_img_without_anno=True),
            dict(
                type='Resize',
                img_scale=[(1333, 480), (1333, 512), (1333, 544), (1333, 576),
                           (1333, 608), (1333, 640), (1333, 672), (1333, 704),
                           (1333, 736), (1333, 768), (1333, 800)],
                multiscale_mode='value',
                keep_ratio=True),
            dict(
                type='Normalize',
                mean=[123.675, 116.28, 103.53],
                std=[58.395, 57.12, 57.375],
                to_rgb=True),
            dict(type='Pad', size_divisor=32),
            dict(type='DefaultFormatBundle'),
            dict(type='FormatAnatomyBundle'),
            dict(
                type='Collect',
                keys=['img', 'anatomy', 'gt_bboxes', 'gt_labels', 'gt_masks'])
        ],
        classes=('lmym', 'GIST')),
    val=dict(
        type='AnatomyDataset',
        ann_file=
        '/mnt/home1/workspace2/QueryInst/data/usd514_jpeg_roi/annotations/val_anno_crop_split_2.json',
        img_prefix=
        '/mnt/home1/workspace2/QueryInst/data/usd514_jpeg_roi/images/',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(type='LoadAnatomy'),
            dict(
                type='MultiScaleFlipAug',
                img_scale=(1333, 800),
                flip=False,
                transforms=[
                    dict(type='Resize', keep_ratio=True),
                    dict(type='RandomFlip'),
                    dict(
                        type='Normalize',
                        mean=[123.675, 116.28, 103.53],
                        std=[58.395, 57.12, 57.375],
                        to_rgb=True),
                    dict(type='Pad', size_divisor=32),
                    dict(type='ImageToTensor', keys=['img']),
                    dict(type='FormatAnatomyBundle'),
                    dict(type='Collect', keys=['img', 'anatomy'])
                ])
        ],
        classes=('lmym', 'GIST')),
    test=dict(
        type='AnatomyDataset',
        ann_file=
        '/mnt/home1/workspace2/QueryInst/data/usd514_jpeg_roi/annotations/val_anno_crop_split_2.json',
        img_prefix=
        '/mnt/home1/workspace2/QueryInst/data/usd514_jpeg_roi/images/',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(type='LoadAnatomy'),
            dict(
                type='MultiScaleFlipAug',
                img_scale=(1333, 800),
                flip=False,
                transforms=[
                    dict(type='Resize', keep_ratio=True),
                    dict(type='RandomFlip'),
                    dict(
                        type='Normalize',
                        mean=[123.675, 116.28, 103.53],
                        std=[58.395, 57.12, 57.375],
                        to_rgb=True),
                    dict(type='Pad', size_divisor=32),
                    dict(type='ImageToTensor', keys=['img']),
                    dict(type='FormatAnatomyBundle'),
                    dict(type='Collect', keys=['img', 'anatomy'])
                ])
        ],
        classes=('lmym', 'GIST')))
evaluation = dict(metric=['bbox', 'segm', 'glob'])
optimizer = dict(type='AdamW', lr=2.5e-05, weight_decay=0.0001)
optimizer_config = dict(grad_clip=dict(max_norm=1, norm_type=2))
lr_config = dict(
    policy='step',
    warmup='linear',
    warmup_iters=1000,
    warmup_ratio=0.001,
    step=[27, 33])
runner = dict(type='EpochBasedRunner', max_epochs=36)
checkpoint_config = dict(interval=1)
log_config = dict(interval=50, hooks=[dict(type='TextLoggerHook')])
custom_hooks = [dict(type='NumClassCheckHook')]
dist_params = dict(backend='nccl')
log_level = 'INFO'
load_from = 'work_dirs/pretrained/queryInst/queryinst_r101_300_queries-860dc5d5.pth'
resume_from = None
workflow = [('train', 1)]
num_stages = 6
num_proposals = 300
model = dict(
    type='QueryGlob',
    pretrained='torchvision://resnet101',
    backbone=dict(
        type='ResNet',
        depth=101,
        num_stages=4,
        out_indices=(0, 1, 2, 3),
        frozen_stages=1,
        norm_cfg=dict(type='BN', requires_grad=True),
        norm_eval=True,
        style='pytorch'),
    neck=dict(
        type='FPN',
        in_channels=[256, 512, 1024, 2048],
        out_channels=256,
        start_level=0,
        add_extra_convs='on_input',
        num_outs=4),
    rpn_head=dict(
        type='GlobalEmbeddingRPNHead',
        num_proposals=300,
        dim_global=7,
        proposal_feature_channel=256),
    roi_head=dict(
        type='QueryGlobRoIHead',
        num_stages=6,
        stage_loss_weights=[1, 1, 1, 1, 1, 1],
        proposal_feature_channel=256,
        bbox_roi_extractor=dict(
            type='SingleRoIExtractor',
            roi_layer=dict(type='RoIAlign', output_size=7, sampling_ratio=2),
            out_channels=256,
            featmap_strides=[4, 8, 16, 32]),
        mask_roi_extractor=dict(
            type='SingleRoIExtractor',
            roi_layer=dict(type='RoIAlign', output_size=14, sampling_ratio=2),
            out_channels=256,
            featmap_strides=[4, 8, 16, 32]),
        bbox_head=[
            dict(
                type='GlobDIIHead',
                num_classes=2,
                num_ffn_fcs=2,
                num_heads=8,
                num_cls_fcs=2,
                num_glb_fcs=2,
                num_reg_fcs=3,
                feedforward_channels=2048,
                in_channels=256,
                dropout=0.0,
                ffn_act_cfg=dict(type='ReLU', inplace=True),
                dynamic_conv_cfg=dict(
                    type='DynamicConv',
                    in_channels=256,
                    feat_channels=64,
                    out_channels=256,
                    input_feat_shape=7,
                    with_proj=True,
                    act_cfg=dict(type='ReLU', inplace=True),
                    norm_cfg=dict(type='LN')),
                loss_bbox=dict(type='L1Loss', loss_weight=5.0),
                loss_iou=dict(type='GIoULoss', loss_weight=2.0),
                loss_cls=dict(
                    type='FocalLoss',
                    use_sigmoid=True,
                    gamma=2.0,
                    alpha=0.25,
                    loss_weight=2.0),
                loss_global=dict(type='CrossEntropyLoss', loss_weight=1.0),
                bbox_coder=dict(
                    type='DeltaXYWHBBoxCoder',
                    clip_border=False,
                    target_means=[0.0, 0.0, 0.0, 0.0],
                    target_stds=[0.5, 0.5, 1.0, 1.0])),
            dict(
                type='GlobDIIHead',
                num_classes=2,
                num_ffn_fcs=2,
                num_heads=8,
                num_cls_fcs=2,
                num_glb_fcs=2,
                num_reg_fcs=3,
                feedforward_channels=2048,
                in_channels=256,
                dropout=0.0,
                ffn_act_cfg=dict(type='ReLU', inplace=True),
                dynamic_conv_cfg=dict(
                    type='DynamicConv',
                    in_channels=256,
                    feat_channels=64,
                    out_channels=256,
                    input_feat_shape=7,
                    with_proj=True,
                    act_cfg=dict(type='ReLU', inplace=True),
                    norm_cfg=dict(type='LN')),
                loss_bbox=dict(type='L1Loss', loss_weight=5.0),
                loss_iou=dict(type='GIoULoss', loss_weight=2.0),
                loss_cls=dict(
                    type='FocalLoss',
                    use_sigmoid=True,
                    gamma=2.0,
                    alpha=0.25,
                    loss_weight=2.0),
                loss_global=dict(type='CrossEntropyLoss', loss_weight=1.0),
                bbox_coder=dict(
                    type='DeltaXYWHBBoxCoder',
                    clip_border=False,
                    target_means=[0.0, 0.0, 0.0, 0.0],
                    target_stds=[0.5, 0.5, 1.0, 1.0])),
            dict(
                type='GlobDIIHead',
                num_classes=2,
                num_ffn_fcs=2,
                num_heads=8,
                num_cls_fcs=2,
                num_glb_fcs=2,
                num_reg_fcs=3,
                feedforward_channels=2048,
                in_channels=256,
                dropout=0.0,
                ffn_act_cfg=dict(type='ReLU', inplace=True),
                dynamic_conv_cfg=dict(
                    type='DynamicConv',
                    in_channels=256,
                    feat_channels=64,
                    out_channels=256,
                    input_feat_shape=7,
                    with_proj=True,
                    act_cfg=dict(type='ReLU', inplace=True),
                    norm_cfg=dict(type='LN')),
                loss_bbox=dict(type='L1Loss', loss_weight=5.0),
                loss_iou=dict(type='GIoULoss', loss_weight=2.0),
                loss_cls=dict(
                    type='FocalLoss',
                    use_sigmoid=True,
                    gamma=2.0,
                    alpha=0.25,
                    loss_weight=2.0),
                loss_global=dict(type='CrossEntropyLoss', loss_weight=1.0),
                bbox_coder=dict(
                    type='DeltaXYWHBBoxCoder',
                    clip_border=False,
                    target_means=[0.0, 0.0, 0.0, 0.0],
                    target_stds=[0.5, 0.5, 1.0, 1.0])),
            dict(
                type='GlobDIIHead',
                num_classes=2,
                num_ffn_fcs=2,
                num_heads=8,
                num_cls_fcs=2,
                num_glb_fcs=2,
                num_reg_fcs=3,
                feedforward_channels=2048,
                in_channels=256,
                dropout=0.0,
                ffn_act_cfg=dict(type='ReLU', inplace=True),
                dynamic_conv_cfg=dict(
                    type='DynamicConv',
                    in_channels=256,
                    feat_channels=64,
                    out_channels=256,
                    input_feat_shape=7,
                    with_proj=True,
                    act_cfg=dict(type='ReLU', inplace=True),
                    norm_cfg=dict(type='LN')),
                loss_bbox=dict(type='L1Loss', loss_weight=5.0),
                loss_iou=dict(type='GIoULoss', loss_weight=2.0),
                loss_cls=dict(
                    type='FocalLoss',
                    use_sigmoid=True,
                    gamma=2.0,
                    alpha=0.25,
                    loss_weight=2.0),
                loss_global=dict(type='CrossEntropyLoss', loss_weight=1.0),
                bbox_coder=dict(
                    type='DeltaXYWHBBoxCoder',
                    clip_border=False,
                    target_means=[0.0, 0.0, 0.0, 0.0],
                    target_stds=[0.5, 0.5, 1.0, 1.0])),
            dict(
                type='GlobDIIHead',
                num_classes=2,
                num_ffn_fcs=2,
                num_heads=8,
                num_cls_fcs=2,
                num_glb_fcs=2,
                num_reg_fcs=3,
                feedforward_channels=2048,
                in_channels=256,
                dropout=0.0,
                ffn_act_cfg=dict(type='ReLU', inplace=True),
                dynamic_conv_cfg=dict(
                    type='DynamicConv',
                    in_channels=256,
                    feat_channels=64,
                    out_channels=256,
                    input_feat_shape=7,
                    with_proj=True,
                    act_cfg=dict(type='ReLU', inplace=True),
                    norm_cfg=dict(type='LN')),
                loss_bbox=dict(type='L1Loss', loss_weight=5.0),
                loss_iou=dict(type='GIoULoss', loss_weight=2.0),
                loss_cls=dict(
                    type='FocalLoss',
                    use_sigmoid=True,
                    gamma=2.0,
                    alpha=0.25,
                    loss_weight=2.0),
                loss_global=dict(type='CrossEntropyLoss', loss_weight=1.0),
                bbox_coder=dict(
                    type='DeltaXYWHBBoxCoder',
                    clip_border=False,
                    target_means=[0.0, 0.0, 0.0, 0.0],
                    target_stds=[0.5, 0.5, 1.0, 1.0])),
            dict(
                type='GlobDIIHead',
                num_classes=2,
                num_ffn_fcs=2,
                num_heads=8,
                num_cls_fcs=2,
                num_glb_fcs=2,
                num_reg_fcs=3,
                feedforward_channels=2048,
                in_channels=256,
                dropout=0.0,
                ffn_act_cfg=dict(type='ReLU', inplace=True),
                dynamic_conv_cfg=dict(
                    type='DynamicConv',
                    in_channels=256,
                    feat_channels=64,
                    out_channels=256,
                    input_feat_shape=7,
                    with_proj=True,
                    act_cfg=dict(type='ReLU', inplace=True),
                    norm_cfg=dict(type='LN')),
                loss_bbox=dict(type='L1Loss', loss_weight=5.0),
                loss_iou=dict(type='GIoULoss', loss_weight=2.0),
                loss_cls=dict(
                    type='FocalLoss',
                    use_sigmoid=True,
                    gamma=2.0,
                    alpha=0.25,
                    loss_weight=2.0),
                loss_global=dict(type='CrossEntropyLoss', loss_weight=1.0),
                bbox_coder=dict(
                    type='DeltaXYWHBBoxCoder',
                    clip_border=False,
                    target_means=[0.0, 0.0, 0.0, 0.0],
                    target_stds=[0.5, 0.5, 1.0, 1.0]))
        ],
        mask_head=[
            dict(
                type='DynamicMaskHead',
                num_classes=2,
                dynamic_conv_cfg=dict(
                    type='DynamicConv',
                    in_channels=256,
                    feat_channels=64,
                    out_channels=256,
                    input_feat_shape=14,
                    with_proj=False,
                    act_cfg=dict(type='ReLU', inplace=True),
                    norm_cfg=dict(type='LN')),
                dropout=0.0,
                num_convs=4,
                roi_feat_size=14,
                in_channels=256,
                conv_kernel_size=3,
                conv_out_channels=256,
                class_agnostic=False,
                norm_cfg=dict(type='BN'),
                upsample_cfg=dict(type='deconv', scale_factor=2),
                loss_dice=dict(type='DiceLoss', loss_weight=8.0)),
            dict(
                type='DynamicMaskHead',
                num_classes=2,
                dynamic_conv_cfg=dict(
                    type='DynamicConv',
                    in_channels=256,
                    feat_channels=64,
                    out_channels=256,
                    input_feat_shape=14,
                    with_proj=False,
                    act_cfg=dict(type='ReLU', inplace=True),
                    norm_cfg=dict(type='LN')),
                dropout=0.0,
                num_convs=4,
                roi_feat_size=14,
                in_channels=256,
                conv_kernel_size=3,
                conv_out_channels=256,
                class_agnostic=False,
                norm_cfg=dict(type='BN'),
                upsample_cfg=dict(type='deconv', scale_factor=2),
                loss_dice=dict(type='DiceLoss', loss_weight=8.0)),
            dict(
                type='DynamicMaskHead',
                num_classes=2,
                dynamic_conv_cfg=dict(
                    type='DynamicConv',
                    in_channels=256,
                    feat_channels=64,
                    out_channels=256,
                    input_feat_shape=14,
                    with_proj=False,
                    act_cfg=dict(type='ReLU', inplace=True),
                    norm_cfg=dict(type='LN')),
                dropout=0.0,
                num_convs=4,
                roi_feat_size=14,
                in_channels=256,
                conv_kernel_size=3,
                conv_out_channels=256,
                class_agnostic=False,
                norm_cfg=dict(type='BN'),
                upsample_cfg=dict(type='deconv', scale_factor=2),
                loss_dice=dict(type='DiceLoss', loss_weight=8.0)),
            dict(
                type='DynamicMaskHead',
                num_classes=2,
                dynamic_conv_cfg=dict(
                    type='DynamicConv',
                    in_channels=256,
                    feat_channels=64,
                    out_channels=256,
                    input_feat_shape=14,
                    with_proj=False,
                    act_cfg=dict(type='ReLU', inplace=True),
                    norm_cfg=dict(type='LN')),
                dropout=0.0,
                num_convs=4,
                roi_feat_size=14,
                in_channels=256,
                conv_kernel_size=3,
                conv_out_channels=256,
                class_agnostic=False,
                norm_cfg=dict(type='BN'),
                upsample_cfg=dict(type='deconv', scale_factor=2),
                loss_dice=dict(type='DiceLoss', loss_weight=8.0)),
            dict(
                type='DynamicMaskHead',
                num_classes=2,
                dynamic_conv_cfg=dict(
                    type='DynamicConv',
                    in_channels=256,
                    feat_channels=64,
                    out_channels=256,
                    input_feat_shape=14,
                    with_proj=False,
                    act_cfg=dict(type='ReLU', inplace=True),
                    norm_cfg=dict(type='LN')),
                dropout=0.0,
                num_convs=4,
                roi_feat_size=14,
                in_channels=256,
                conv_kernel_size=3,
                conv_out_channels=256,
                class_agnostic=False,
                norm_cfg=dict(type='BN'),
                upsample_cfg=dict(type='deconv', scale_factor=2),
                loss_dice=dict(type='DiceLoss', loss_weight=8.0)),
            dict(
                type='DynamicMaskHead',
                num_classes=2,
                dynamic_conv_cfg=dict(
                    type='DynamicConv',
                    in_channels=256,
                    feat_channels=64,
                    out_channels=256,
                    input_feat_shape=14,
                    with_proj=False,
                    act_cfg=dict(type='ReLU', inplace=True),
                    norm_cfg=dict(type='LN')),
                dropout=0.0,
                num_convs=4,
                roi_feat_size=14,
                in_channels=256,
                conv_kernel_size=3,
                conv_out_channels=256,
                class_agnostic=False,
                norm_cfg=dict(type='BN'),
                upsample_cfg=dict(type='deconv', scale_factor=2),
                loss_dice=dict(type='DiceLoss', loss_weight=8.0))
        ]),
    train_cfg=dict(
        rpn=None,
        rcnn=[
            dict(
                assigner=dict(
                    type='HungarianAssigner',
                    cls_cost=dict(type='FocalLossCost', weight=2.0),
                    reg_cost=dict(type='BBoxL1Cost', weight=5.0),
                    iou_cost=dict(type='IoUCost', iou_mode='giou',
                                  weight=2.0)),
                sampler=dict(type='PseudoSampler'),
                pos_weight=1,
                mask_size=28,
                debug=False),
            dict(
                assigner=dict(
                    type='HungarianAssigner',
                    cls_cost=dict(type='FocalLossCost', weight=2.0),
                    reg_cost=dict(type='BBoxL1Cost', weight=5.0),
                    iou_cost=dict(type='IoUCost', iou_mode='giou',
                                  weight=2.0)),
                sampler=dict(type='PseudoSampler'),
                pos_weight=1,
                mask_size=28,
                debug=False),
            dict(
                assigner=dict(
                    type='HungarianAssigner',
                    cls_cost=dict(type='FocalLossCost', weight=2.0),
                    reg_cost=dict(type='BBoxL1Cost', weight=5.0),
                    iou_cost=dict(type='IoUCost', iou_mode='giou',
                                  weight=2.0)),
                sampler=dict(type='PseudoSampler'),
                pos_weight=1,
                mask_size=28,
                debug=False),
            dict(
                assigner=dict(
                    type='HungarianAssigner',
                    cls_cost=dict(type='FocalLossCost', weight=2.0),
                    reg_cost=dict(type='BBoxL1Cost', weight=5.0),
                    iou_cost=dict(type='IoUCost', iou_mode='giou',
                                  weight=2.0)),
                sampler=dict(type='PseudoSampler'),
                pos_weight=1,
                mask_size=28,
                debug=False),
            dict(
                assigner=dict(
                    type='HungarianAssigner',
                    cls_cost=dict(type='FocalLossCost', weight=2.0),
                    reg_cost=dict(type='BBoxL1Cost', weight=5.0),
                    iou_cost=dict(type='IoUCost', iou_mode='giou',
                                  weight=2.0)),
                sampler=dict(type='PseudoSampler'),
                pos_weight=1,
                mask_size=28,
                debug=False),
            dict(
                assigner=dict(
                    type='HungarianAssigner',
                    cls_cost=dict(type='FocalLossCost', weight=2.0),
                    reg_cost=dict(type='BBoxL1Cost', weight=5.0),
                    iou_cost=dict(type='IoUCost', iou_mode='giou',
                                  weight=2.0)),
                sampler=dict(type='PseudoSampler'),
                pos_weight=1,
                mask_size=28,
                debug=False)
        ]),
    test_cfg=dict(
        rpn=None,
        rcnn=dict(
            max_per_img=300,
            mask_thr_binary=0.5,
            nms=dict(type='nms', iou_threshold=0.7))))
total_epochs = 36
min_values = (480, 512, 544, 576, 608, 640, 672, 704, 736, 768, 800)
classes = ('lmym', 'GIST')
gpu_ids = range(0, 4)
work_dir = './work_dirs/queryglob_usdanno514roi_B_2_7_split2'

2021-12-29 16:03:58,492 - mmdet - INFO - initialize ResNet with init_cfg {'type': 'Pretrained', 'checkpoint': 'torchvision://resnet101'}
2021-12-29 16:03:58,984 - mmdet - INFO - initialize FPN with init_cfg {'type': 'Xavier', 'layer': 'Conv2d', 'distribution': 'uniform'}
2021-12-29 16:03:59,017 - mmdet - INFO - initialize GlobDIIHead with init_cfg [{'type': 'Normal', 'std': 0.01, 'override': {'name': 'fc_cls'}}, {'type': 'Normal', 'std': 0.001, 'override': {'name': 'fc_reg'}}]
2021-12-29 16:03:59,153 - mmdet - INFO - initialize GlobDIIHead with init_cfg [{'type': 'Normal', 'std': 0.01, 'override': {'name': 'fc_cls'}}, {'type': 'Normal', 'std': 0.001, 'override': {'name': 'fc_reg'}}]
2021-12-29 16:03:59,290 - mmdet - INFO - initialize GlobDIIHead with init_cfg [{'type': 'Normal', 'std': 0.01, 'override': {'name': 'fc_cls'}}, {'type': 'Normal', 'std': 0.001, 'override': {'name': 'fc_reg'}}]
2021-12-29 16:03:59,427 - mmdet - INFO - initialize GlobDIIHead with init_cfg [{'type': 'Normal', 'std': 0.01, 'override': {'name': 'fc_cls'}}, {'type': 'Normal', 'std': 0.001, 'override': {'name': 'fc_reg'}}]
2021-12-29 16:03:59,562 - mmdet - INFO - initialize GlobDIIHead with init_cfg [{'type': 'Normal', 'std': 0.01, 'override': {'name': 'fc_cls'}}, {'type': 'Normal', 'std': 0.001, 'override': {'name': 'fc_reg'}}]
2021-12-29 16:03:59,701 - mmdet - INFO - initialize GlobDIIHead with init_cfg [{'type': 'Normal', 'std': 0.01, 'override': {'name': 'fc_cls'}}, {'type': 'Normal', 'std': 0.001, 'override': {'name': 'fc_reg'}}]
Name of parameter - Initialization information

backbone.conv1.weight - torch.Size([64, 3, 7, 7]): 
PretrainedInit: load from torchvision://resnet101 

backbone.bn1.weight - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet101 

backbone.bn1.bias - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer1.0.conv1.weight - torch.Size([64, 64, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer1.0.bn1.weight - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer1.0.bn1.bias - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer1.0.conv2.weight - torch.Size([64, 64, 3, 3]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer1.0.bn2.weight - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer1.0.bn2.bias - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer1.0.conv3.weight - torch.Size([256, 64, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer1.0.bn3.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer1.0.bn3.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer1.0.downsample.0.weight - torch.Size([256, 64, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer1.0.downsample.1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer1.0.downsample.1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer1.1.conv1.weight - torch.Size([64, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer1.1.bn1.weight - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer1.1.bn1.bias - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer1.1.conv2.weight - torch.Size([64, 64, 3, 3]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer1.1.bn2.weight - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer1.1.bn2.bias - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer1.1.conv3.weight - torch.Size([256, 64, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer1.1.bn3.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer1.1.bn3.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer1.2.conv1.weight - torch.Size([64, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer1.2.bn1.weight - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer1.2.bn1.bias - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer1.2.conv2.weight - torch.Size([64, 64, 3, 3]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer1.2.bn2.weight - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer1.2.bn2.bias - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer1.2.conv3.weight - torch.Size([256, 64, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer1.2.bn3.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer1.2.bn3.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer2.0.conv1.weight - torch.Size([128, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer2.0.bn1.weight - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer2.0.bn1.bias - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer2.0.conv2.weight - torch.Size([128, 128, 3, 3]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer2.0.bn2.weight - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer2.0.bn2.bias - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer2.0.conv3.weight - torch.Size([512, 128, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer2.0.bn3.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer2.0.bn3.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer2.0.downsample.0.weight - torch.Size([512, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer2.0.downsample.1.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer2.0.downsample.1.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer2.1.conv1.weight - torch.Size([128, 512, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer2.1.bn1.weight - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer2.1.bn1.bias - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer2.1.conv2.weight - torch.Size([128, 128, 3, 3]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer2.1.bn2.weight - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer2.1.bn2.bias - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer2.1.conv3.weight - torch.Size([512, 128, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer2.1.bn3.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer2.1.bn3.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer2.2.conv1.weight - torch.Size([128, 512, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer2.2.bn1.weight - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer2.2.bn1.bias - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer2.2.conv2.weight - torch.Size([128, 128, 3, 3]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer2.2.bn2.weight - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer2.2.bn2.bias - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer2.2.conv3.weight - torch.Size([512, 128, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer2.2.bn3.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer2.2.bn3.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer2.3.conv1.weight - torch.Size([128, 512, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer2.3.bn1.weight - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer2.3.bn1.bias - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer2.3.conv2.weight - torch.Size([128, 128, 3, 3]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer2.3.bn2.weight - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer2.3.bn2.bias - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer2.3.conv3.weight - torch.Size([512, 128, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer2.3.bn3.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer2.3.bn3.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.0.conv1.weight - torch.Size([256, 512, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.0.bn1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.0.bn1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.0.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.0.bn2.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.0.bn2.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.0.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.0.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.0.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.0.downsample.0.weight - torch.Size([1024, 512, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.0.downsample.1.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.0.downsample.1.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.1.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.1.bn1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.1.bn1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.1.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.1.bn2.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.1.bn2.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.1.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.1.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.1.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.2.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.2.bn1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.2.bn1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.2.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.2.bn2.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.2.bn2.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.2.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.2.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.2.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.3.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.3.bn1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.3.bn1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.3.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.3.bn2.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.3.bn2.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.3.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.3.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.3.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.4.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.4.bn1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.4.bn1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.4.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.4.bn2.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.4.bn2.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.4.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.4.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.4.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.5.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.5.bn1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.5.bn1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.5.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.5.bn2.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.5.bn2.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.5.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.5.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.5.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.6.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.6.bn1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.6.bn1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.6.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.6.bn2.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.6.bn2.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.6.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.6.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.6.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.7.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.7.bn1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.7.bn1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.7.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.7.bn2.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.7.bn2.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.7.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.7.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.7.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.8.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.8.bn1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.8.bn1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.8.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.8.bn2.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.8.bn2.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.8.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.8.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.8.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.9.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.9.bn1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.9.bn1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.9.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.9.bn2.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.9.bn2.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.9.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.9.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.9.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.10.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.10.bn1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.10.bn1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.10.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.10.bn2.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.10.bn2.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.10.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.10.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.10.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.11.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.11.bn1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.11.bn1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.11.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.11.bn2.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.11.bn2.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.11.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.11.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.11.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.12.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.12.bn1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.12.bn1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.12.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.12.bn2.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.12.bn2.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.12.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.12.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.12.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.13.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.13.bn1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.13.bn1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.13.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.13.bn2.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.13.bn2.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.13.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.13.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.13.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.14.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.14.bn1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.14.bn1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.14.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.14.bn2.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.14.bn2.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.14.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.14.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.14.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.15.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.15.bn1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.15.bn1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.15.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.15.bn2.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.15.bn2.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.15.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.15.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.15.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.16.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.16.bn1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.16.bn1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.16.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.16.bn2.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.16.bn2.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.16.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.16.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.16.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.17.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.17.bn1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.17.bn1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.17.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.17.bn2.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.17.bn2.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.17.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.17.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.17.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.18.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.18.bn1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.18.bn1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.18.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.18.bn2.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.18.bn2.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.18.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.18.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.18.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.19.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.19.bn1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.19.bn1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.19.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.19.bn2.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.19.bn2.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.19.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.19.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.19.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.20.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.20.bn1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.20.bn1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.20.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.20.bn2.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.20.bn2.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.20.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.20.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.20.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.21.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.21.bn1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.21.bn1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.21.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.21.bn2.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.21.bn2.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.21.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.21.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.21.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.22.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.22.bn1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.22.bn1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.22.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.22.bn2.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.22.bn2.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.22.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.22.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.22.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer4.0.conv1.weight - torch.Size([512, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer4.0.bn1.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer4.0.bn1.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer4.0.conv2.weight - torch.Size([512, 512, 3, 3]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer4.0.bn2.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer4.0.bn2.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer4.0.conv3.weight - torch.Size([2048, 512, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer4.0.bn3.weight - torch.Size([2048]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer4.0.bn3.bias - torch.Size([2048]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer4.0.downsample.0.weight - torch.Size([2048, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer4.0.downsample.1.weight - torch.Size([2048]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer4.0.downsample.1.bias - torch.Size([2048]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer4.1.conv1.weight - torch.Size([512, 2048, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer4.1.bn1.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer4.1.bn1.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer4.1.conv2.weight - torch.Size([512, 512, 3, 3]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer4.1.bn2.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer4.1.bn2.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer4.1.conv3.weight - torch.Size([2048, 512, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer4.1.bn3.weight - torch.Size([2048]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer4.1.bn3.bias - torch.Size([2048]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer4.2.conv1.weight - torch.Size([512, 2048, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer4.2.bn1.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer4.2.bn1.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer4.2.conv2.weight - torch.Size([512, 512, 3, 3]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer4.2.bn2.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer4.2.bn2.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer4.2.conv3.weight - torch.Size([2048, 512, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer4.2.bn3.weight - torch.Size([2048]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer4.2.bn3.bias - torch.Size([2048]): 
PretrainedInit: load from torchvision://resnet101 

neck.lateral_convs.0.conv.weight - torch.Size([256, 256, 1, 1]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.lateral_convs.0.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

neck.lateral_convs.1.conv.weight - torch.Size([256, 512, 1, 1]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.lateral_convs.1.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

neck.lateral_convs.2.conv.weight - torch.Size([256, 1024, 1, 1]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.lateral_convs.2.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

neck.lateral_convs.3.conv.weight - torch.Size([256, 2048, 1, 1]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.lateral_convs.3.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

neck.fpn_convs.0.conv.weight - torch.Size([256, 256, 3, 3]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.fpn_convs.0.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

neck.fpn_convs.1.conv.weight - torch.Size([256, 256, 3, 3]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.fpn_convs.1.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

neck.fpn_convs.2.conv.weight - torch.Size([256, 256, 3, 3]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.fpn_convs.2.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

neck.fpn_convs.3.conv.weight - torch.Size([256, 256, 3, 3]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.fpn_convs.3.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

rpn_head.init_proposal_bboxes.weight - torch.Size([300, 4]): 
Initialized by user-defined `init_weights` in GlobalEmbeddingRPNHead  

rpn_head.init_proposal_features.weight - torch.Size([300, 256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

rpn_head.global_features_embed.weight - torch.Size([7, 256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.0.fc_cls.weight - torch.Size([2, 256]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.0.fc_cls.bias - torch.Size([2]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.0.fc_reg.weight - torch.Size([4, 256]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.0.fc_reg.bias - torch.Size([4]): 
NormalInit: mean=0, std=0.001, bias=0 

roi_head.bbox_head.0.attention.attn.in_proj_weight - torch.Size([768, 256]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.0.attention.attn.in_proj_bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.0.attention.attn.out_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.0.attention.attn.out_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.0.attention_norm.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.0.attention_norm.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.0.global_attention.attn.in_proj_weight - torch.Size([768, 256]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.0.global_attention.attn.in_proj_bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.0.global_attention.attn.out_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.0.global_attention.attn.out_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.0.global_attention_norm.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.0.global_attention_norm.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.0.instance_interactive_conv.dynamic_layer.weight - torch.Size([32768, 256]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.0.instance_interactive_conv.dynamic_layer.bias - torch.Size([32768]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.0.instance_interactive_conv.norm_in.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.0.instance_interactive_conv.norm_in.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.0.instance_interactive_conv.norm_out.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.0.instance_interactive_conv.norm_out.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.0.instance_interactive_conv.fc_layer.weight - torch.Size([256, 12544]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.0.instance_interactive_conv.fc_layer.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.0.instance_interactive_conv.fc_norm.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.0.instance_interactive_conv.fc_norm.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.0.instance_interactive_conv_norm.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.0.instance_interactive_conv_norm.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.0.ffn.layers.0.0.weight - torch.Size([2048, 256]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.0.ffn.layers.0.0.bias - torch.Size([2048]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.0.ffn.layers.1.weight - torch.Size([256, 2048]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.0.ffn.layers.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.0.ffn_norm.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.0.ffn_norm.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.0.global_ffn.layers.0.0.weight - torch.Size([2048, 256]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.0.global_ffn.layers.0.0.bias - torch.Size([2048]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.0.global_ffn.layers.1.weight - torch.Size([256, 2048]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.0.global_ffn.layers.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.0.global_ffn_norm.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.0.global_ffn_norm.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.0.cls_fcs.0.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.0.cls_fcs.1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.0.cls_fcs.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.0.cls_fcs.3.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.0.cls_fcs.4.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.0.cls_fcs.4.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.0.reg_fcs.0.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.0.reg_fcs.1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.0.reg_fcs.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.0.reg_fcs.3.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.0.reg_fcs.4.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.0.reg_fcs.4.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.0.reg_fcs.6.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.0.reg_fcs.7.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.0.reg_fcs.7.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.0.glb_fcs.0.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.0.glb_fcs.1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.0.glb_fcs.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.0.glb_fcs.3.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.0.glb_fcs.4.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.0.glb_fcs.4.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.0.fc_glb.weight - torch.Size([2, 256]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.0.fc_glb.bias - torch.Size([2]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.1.fc_cls.weight - torch.Size([2, 256]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.1.fc_cls.bias - torch.Size([2]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.1.fc_reg.weight - torch.Size([4, 256]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.1.fc_reg.bias - torch.Size([4]): 
NormalInit: mean=0, std=0.001, bias=0 

roi_head.bbox_head.1.attention.attn.in_proj_weight - torch.Size([768, 256]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.1.attention.attn.in_proj_bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.1.attention.attn.out_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.1.attention.attn.out_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.1.attention_norm.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.1.attention_norm.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.1.global_attention.attn.in_proj_weight - torch.Size([768, 256]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.1.global_attention.attn.in_proj_bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.1.global_attention.attn.out_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.1.global_attention.attn.out_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.1.global_attention_norm.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.1.global_attention_norm.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.1.instance_interactive_conv.dynamic_layer.weight - torch.Size([32768, 256]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.1.instance_interactive_conv.dynamic_layer.bias - torch.Size([32768]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.1.instance_interactive_conv.norm_in.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.1.instance_interactive_conv.norm_in.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.1.instance_interactive_conv.norm_out.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.1.instance_interactive_conv.norm_out.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.1.instance_interactive_conv.fc_layer.weight - torch.Size([256, 12544]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.1.instance_interactive_conv.fc_layer.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.1.instance_interactive_conv.fc_norm.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.1.instance_interactive_conv.fc_norm.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.1.instance_interactive_conv_norm.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.1.instance_interactive_conv_norm.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.1.ffn.layers.0.0.weight - torch.Size([2048, 256]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.1.ffn.layers.0.0.bias - torch.Size([2048]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.1.ffn.layers.1.weight - torch.Size([256, 2048]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.1.ffn.layers.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.1.ffn_norm.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.1.ffn_norm.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.1.global_ffn.layers.0.0.weight - torch.Size([2048, 256]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.1.global_ffn.layers.0.0.bias - torch.Size([2048]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.1.global_ffn.layers.1.weight - torch.Size([256, 2048]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.1.global_ffn.layers.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.1.global_ffn_norm.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.1.global_ffn_norm.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.1.cls_fcs.0.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.1.cls_fcs.1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.1.cls_fcs.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.1.cls_fcs.3.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.1.cls_fcs.4.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.1.cls_fcs.4.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.1.reg_fcs.0.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.1.reg_fcs.1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.1.reg_fcs.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.1.reg_fcs.3.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.1.reg_fcs.4.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.1.reg_fcs.4.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.1.reg_fcs.6.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.1.reg_fcs.7.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.1.reg_fcs.7.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.1.glb_fcs.0.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.1.glb_fcs.1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.1.glb_fcs.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.1.glb_fcs.3.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.1.glb_fcs.4.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.1.glb_fcs.4.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.1.fc_glb.weight - torch.Size([2, 256]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.1.fc_glb.bias - torch.Size([2]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.2.fc_cls.weight - torch.Size([2, 256]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.2.fc_cls.bias - torch.Size([2]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.2.fc_reg.weight - torch.Size([4, 256]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.2.fc_reg.bias - torch.Size([4]): 
NormalInit: mean=0, std=0.001, bias=0 

roi_head.bbox_head.2.attention.attn.in_proj_weight - torch.Size([768, 256]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.2.attention.attn.in_proj_bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.2.attention.attn.out_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.2.attention.attn.out_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.2.attention_norm.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.2.attention_norm.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.2.global_attention.attn.in_proj_weight - torch.Size([768, 256]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.2.global_attention.attn.in_proj_bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.2.global_attention.attn.out_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.2.global_attention.attn.out_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.2.global_attention_norm.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.2.global_attention_norm.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.2.instance_interactive_conv.dynamic_layer.weight - torch.Size([32768, 256]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.2.instance_interactive_conv.dynamic_layer.bias - torch.Size([32768]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.2.instance_interactive_conv.norm_in.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.2.instance_interactive_conv.norm_in.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.2.instance_interactive_conv.norm_out.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.2.instance_interactive_conv.norm_out.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.2.instance_interactive_conv.fc_layer.weight - torch.Size([256, 12544]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.2.instance_interactive_conv.fc_layer.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.2.instance_interactive_conv.fc_norm.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.2.instance_interactive_conv.fc_norm.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.2.instance_interactive_conv_norm.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.2.instance_interactive_conv_norm.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.2.ffn.layers.0.0.weight - torch.Size([2048, 256]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.2.ffn.layers.0.0.bias - torch.Size([2048]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.2.ffn.layers.1.weight - torch.Size([256, 2048]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.2.ffn.layers.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.2.ffn_norm.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.2.ffn_norm.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.2.global_ffn.layers.0.0.weight - torch.Size([2048, 256]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.2.global_ffn.layers.0.0.bias - torch.Size([2048]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.2.global_ffn.layers.1.weight - torch.Size([256, 2048]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.2.global_ffn.layers.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.2.global_ffn_norm.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.2.global_ffn_norm.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.2.cls_fcs.0.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.2.cls_fcs.1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.2.cls_fcs.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.2.cls_fcs.3.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.2.cls_fcs.4.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.2.cls_fcs.4.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.2.reg_fcs.0.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.2.reg_fcs.1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.2.reg_fcs.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.2.reg_fcs.3.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.2.reg_fcs.4.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.2.reg_fcs.4.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.2.reg_fcs.6.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.2.reg_fcs.7.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.2.reg_fcs.7.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.2.glb_fcs.0.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.2.glb_fcs.1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.2.glb_fcs.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.2.glb_fcs.3.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.2.glb_fcs.4.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.2.glb_fcs.4.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.2.fc_glb.weight - torch.Size([2, 256]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.2.fc_glb.bias - torch.Size([2]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.3.fc_cls.weight - torch.Size([2, 256]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.3.fc_cls.bias - torch.Size([2]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.3.fc_reg.weight - torch.Size([4, 256]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.3.fc_reg.bias - torch.Size([4]): 
NormalInit: mean=0, std=0.001, bias=0 

roi_head.bbox_head.3.attention.attn.in_proj_weight - torch.Size([768, 256]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.3.attention.attn.in_proj_bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.3.attention.attn.out_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.3.attention.attn.out_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.3.attention_norm.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.3.attention_norm.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.3.global_attention.attn.in_proj_weight - torch.Size([768, 256]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.3.global_attention.attn.in_proj_bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.3.global_attention.attn.out_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.3.global_attention.attn.out_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.3.global_attention_norm.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.3.global_attention_norm.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.3.instance_interactive_conv.dynamic_layer.weight - torch.Size([32768, 256]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.3.instance_interactive_conv.dynamic_layer.bias - torch.Size([32768]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.3.instance_interactive_conv.norm_in.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.3.instance_interactive_conv.norm_in.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.3.instance_interactive_conv.norm_out.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.3.instance_interactive_conv.norm_out.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.3.instance_interactive_conv.fc_layer.weight - torch.Size([256, 12544]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.3.instance_interactive_conv.fc_layer.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.3.instance_interactive_conv.fc_norm.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.3.instance_interactive_conv.fc_norm.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.3.instance_interactive_conv_norm.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.3.instance_interactive_conv_norm.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.3.ffn.layers.0.0.weight - torch.Size([2048, 256]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.3.ffn.layers.0.0.bias - torch.Size([2048]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.3.ffn.layers.1.weight - torch.Size([256, 2048]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.3.ffn.layers.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.3.ffn_norm.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.3.ffn_norm.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.3.global_ffn.layers.0.0.weight - torch.Size([2048, 256]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.3.global_ffn.layers.0.0.bias - torch.Size([2048]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.3.global_ffn.layers.1.weight - torch.Size([256, 2048]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.3.global_ffn.layers.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.3.global_ffn_norm.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.3.global_ffn_norm.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.3.cls_fcs.0.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.3.cls_fcs.1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.3.cls_fcs.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.3.cls_fcs.3.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.3.cls_fcs.4.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.3.cls_fcs.4.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.3.reg_fcs.0.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.3.reg_fcs.1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.3.reg_fcs.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.3.reg_fcs.3.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.3.reg_fcs.4.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.3.reg_fcs.4.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.3.reg_fcs.6.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.3.reg_fcs.7.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.3.reg_fcs.7.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.3.glb_fcs.0.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.3.glb_fcs.1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.3.glb_fcs.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.3.glb_fcs.3.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.3.glb_fcs.4.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.3.glb_fcs.4.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.3.fc_glb.weight - torch.Size([2, 256]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.3.fc_glb.bias - torch.Size([2]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.4.fc_cls.weight - torch.Size([2, 256]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.4.fc_cls.bias - torch.Size([2]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.4.fc_reg.weight - torch.Size([4, 256]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.4.fc_reg.bias - torch.Size([4]): 
NormalInit: mean=0, std=0.001, bias=0 

roi_head.bbox_head.4.attention.attn.in_proj_weight - torch.Size([768, 256]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.4.attention.attn.in_proj_bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.4.attention.attn.out_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.4.attention.attn.out_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.4.attention_norm.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.4.attention_norm.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.4.global_attention.attn.in_proj_weight - torch.Size([768, 256]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.4.global_attention.attn.in_proj_bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.4.global_attention.attn.out_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.4.global_attention.attn.out_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.4.global_attention_norm.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.4.global_attention_norm.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.4.instance_interactive_conv.dynamic_layer.weight - torch.Size([32768, 256]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.4.instance_interactive_conv.dynamic_layer.bias - torch.Size([32768]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.4.instance_interactive_conv.norm_in.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.4.instance_interactive_conv.norm_in.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.4.instance_interactive_conv.norm_out.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.4.instance_interactive_conv.norm_out.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.4.instance_interactive_conv.fc_layer.weight - torch.Size([256, 12544]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.4.instance_interactive_conv.fc_layer.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.4.instance_interactive_conv.fc_norm.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.4.instance_interactive_conv.fc_norm.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.4.instance_interactive_conv_norm.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.4.instance_interactive_conv_norm.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.4.ffn.layers.0.0.weight - torch.Size([2048, 256]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.4.ffn.layers.0.0.bias - torch.Size([2048]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.4.ffn.layers.1.weight - torch.Size([256, 2048]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.4.ffn.layers.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.4.ffn_norm.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.4.ffn_norm.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.4.global_ffn.layers.0.0.weight - torch.Size([2048, 256]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.4.global_ffn.layers.0.0.bias - torch.Size([2048]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.4.global_ffn.layers.1.weight - torch.Size([256, 2048]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.4.global_ffn.layers.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.4.global_ffn_norm.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.4.global_ffn_norm.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.4.cls_fcs.0.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.4.cls_fcs.1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.4.cls_fcs.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.4.cls_fcs.3.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.4.cls_fcs.4.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.4.cls_fcs.4.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.4.reg_fcs.0.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.4.reg_fcs.1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.4.reg_fcs.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.4.reg_fcs.3.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.4.reg_fcs.4.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.4.reg_fcs.4.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.4.reg_fcs.6.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.4.reg_fcs.7.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.4.reg_fcs.7.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.4.glb_fcs.0.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.4.glb_fcs.1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.4.glb_fcs.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.4.glb_fcs.3.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.4.glb_fcs.4.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.4.glb_fcs.4.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.4.fc_glb.weight - torch.Size([2, 256]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.4.fc_glb.bias - torch.Size([2]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.5.fc_cls.weight - torch.Size([2, 256]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.5.fc_cls.bias - torch.Size([2]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.5.fc_reg.weight - torch.Size([4, 256]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.5.fc_reg.bias - torch.Size([4]): 
NormalInit: mean=0, std=0.001, bias=0 

roi_head.bbox_head.5.attention.attn.in_proj_weight - torch.Size([768, 256]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.5.attention.attn.in_proj_bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.5.attention.attn.out_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.5.attention.attn.out_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.5.attention_norm.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.5.attention_norm.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.5.global_attention.attn.in_proj_weight - torch.Size([768, 256]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.5.global_attention.attn.in_proj_bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.5.global_attention.attn.out_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.5.global_attention.attn.out_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.5.global_attention_norm.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.5.global_attention_norm.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.5.instance_interactive_conv.dynamic_layer.weight - torch.Size([32768, 256]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.5.instance_interactive_conv.dynamic_layer.bias - torch.Size([32768]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.5.instance_interactive_conv.norm_in.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.5.instance_interactive_conv.norm_in.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.5.instance_interactive_conv.norm_out.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.5.instance_interactive_conv.norm_out.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.5.instance_interactive_conv.fc_layer.weight - torch.Size([256, 12544]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.5.instance_interactive_conv.fc_layer.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.5.instance_interactive_conv.fc_norm.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.5.instance_interactive_conv.fc_norm.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.5.instance_interactive_conv_norm.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.5.instance_interactive_conv_norm.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.5.ffn.layers.0.0.weight - torch.Size([2048, 256]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.5.ffn.layers.0.0.bias - torch.Size([2048]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.5.ffn.layers.1.weight - torch.Size([256, 2048]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.5.ffn.layers.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.5.ffn_norm.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.5.ffn_norm.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.5.global_ffn.layers.0.0.weight - torch.Size([2048, 256]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.5.global_ffn.layers.0.0.bias - torch.Size([2048]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.5.global_ffn.layers.1.weight - torch.Size([256, 2048]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.5.global_ffn.layers.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.5.global_ffn_norm.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.5.global_ffn_norm.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.5.cls_fcs.0.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.5.cls_fcs.1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.5.cls_fcs.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.5.cls_fcs.3.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.5.cls_fcs.4.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.5.cls_fcs.4.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.5.reg_fcs.0.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.5.reg_fcs.1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.5.reg_fcs.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.5.reg_fcs.3.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.5.reg_fcs.4.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.5.reg_fcs.4.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.5.reg_fcs.6.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.5.reg_fcs.7.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.5.reg_fcs.7.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.5.glb_fcs.0.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.5.glb_fcs.1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.5.glb_fcs.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.5.glb_fcs.3.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.5.glb_fcs.4.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.5.glb_fcs.4.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.5.fc_glb.weight - torch.Size([2, 256]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.5.fc_glb.bias - torch.Size([2]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.0.convs.0.conv.weight - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.0.convs.0.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.0.convs.0.bn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.0.convs.0.bn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.0.convs.1.conv.weight - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.0.convs.1.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.0.convs.1.bn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.0.convs.1.bn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.0.convs.2.conv.weight - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.0.convs.2.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.0.convs.2.bn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.0.convs.2.bn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.0.convs.3.conv.weight - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.0.convs.3.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.0.convs.3.bn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.0.convs.3.bn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.0.upsample.weight - torch.Size([256, 256, 2, 2]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.0.upsample.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.0.conv_logits.weight - torch.Size([2, 256, 1, 1]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.0.conv_logits.bias - torch.Size([2]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.0.instance_interactive_conv.dynamic_layer.weight - torch.Size([32768, 256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.0.instance_interactive_conv.dynamic_layer.bias - torch.Size([32768]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.0.instance_interactive_conv.norm_in.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.0.instance_interactive_conv.norm_in.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.0.instance_interactive_conv.norm_out.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.0.instance_interactive_conv.norm_out.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.1.convs.0.conv.weight - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.1.convs.0.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.1.convs.0.bn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.1.convs.0.bn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.1.convs.1.conv.weight - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.1.convs.1.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.1.convs.1.bn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.1.convs.1.bn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.1.convs.2.conv.weight - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.1.convs.2.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.1.convs.2.bn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.1.convs.2.bn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.1.convs.3.conv.weight - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.1.convs.3.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.1.convs.3.bn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.1.convs.3.bn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.1.upsample.weight - torch.Size([256, 256, 2, 2]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.1.upsample.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.1.conv_logits.weight - torch.Size([2, 256, 1, 1]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.1.conv_logits.bias - torch.Size([2]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.1.instance_interactive_conv.dynamic_layer.weight - torch.Size([32768, 256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.1.instance_interactive_conv.dynamic_layer.bias - torch.Size([32768]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.1.instance_interactive_conv.norm_in.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.1.instance_interactive_conv.norm_in.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.1.instance_interactive_conv.norm_out.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.1.instance_interactive_conv.norm_out.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.2.convs.0.conv.weight - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.2.convs.0.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.2.convs.0.bn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.2.convs.0.bn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.2.convs.1.conv.weight - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.2.convs.1.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.2.convs.1.bn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.2.convs.1.bn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.2.convs.2.conv.weight - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.2.convs.2.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.2.convs.2.bn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.2.convs.2.bn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.2.convs.3.conv.weight - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.2.convs.3.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.2.convs.3.bn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.2.convs.3.bn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.2.upsample.weight - torch.Size([256, 256, 2, 2]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.2.upsample.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.2.conv_logits.weight - torch.Size([2, 256, 1, 1]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.2.conv_logits.bias - torch.Size([2]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.2.instance_interactive_conv.dynamic_layer.weight - torch.Size([32768, 256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.2.instance_interactive_conv.dynamic_layer.bias - torch.Size([32768]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.2.instance_interactive_conv.norm_in.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.2.instance_interactive_conv.norm_in.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.2.instance_interactive_conv.norm_out.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.2.instance_interactive_conv.norm_out.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.3.convs.0.conv.weight - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.3.convs.0.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.3.convs.0.bn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.3.convs.0.bn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.3.convs.1.conv.weight - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.3.convs.1.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.3.convs.1.bn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.3.convs.1.bn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.3.convs.2.conv.weight - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.3.convs.2.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.3.convs.2.bn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.3.convs.2.bn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.3.convs.3.conv.weight - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.3.convs.3.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.3.convs.3.bn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.3.convs.3.bn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.3.upsample.weight - torch.Size([256, 256, 2, 2]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.3.upsample.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.3.conv_logits.weight - torch.Size([2, 256, 1, 1]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.3.conv_logits.bias - torch.Size([2]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.3.instance_interactive_conv.dynamic_layer.weight - torch.Size([32768, 256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.3.instance_interactive_conv.dynamic_layer.bias - torch.Size([32768]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.3.instance_interactive_conv.norm_in.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.3.instance_interactive_conv.norm_in.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.3.instance_interactive_conv.norm_out.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.3.instance_interactive_conv.norm_out.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.4.convs.0.conv.weight - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.4.convs.0.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.4.convs.0.bn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.4.convs.0.bn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.4.convs.1.conv.weight - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.4.convs.1.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.4.convs.1.bn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.4.convs.1.bn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.4.convs.2.conv.weight - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.4.convs.2.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.4.convs.2.bn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.4.convs.2.bn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.4.convs.3.conv.weight - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.4.convs.3.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.4.convs.3.bn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.4.convs.3.bn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.4.upsample.weight - torch.Size([256, 256, 2, 2]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.4.upsample.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.4.conv_logits.weight - torch.Size([2, 256, 1, 1]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.4.conv_logits.bias - torch.Size([2]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.4.instance_interactive_conv.dynamic_layer.weight - torch.Size([32768, 256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.4.instance_interactive_conv.dynamic_layer.bias - torch.Size([32768]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.4.instance_interactive_conv.norm_in.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.4.instance_interactive_conv.norm_in.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.4.instance_interactive_conv.norm_out.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.4.instance_interactive_conv.norm_out.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.5.convs.0.conv.weight - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.5.convs.0.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.5.convs.0.bn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.5.convs.0.bn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.5.convs.1.conv.weight - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.5.convs.1.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.5.convs.1.bn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.5.convs.1.bn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.5.convs.2.conv.weight - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.5.convs.2.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.5.convs.2.bn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.5.convs.2.bn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.5.convs.3.conv.weight - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.5.convs.3.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.5.convs.3.bn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.5.convs.3.bn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.5.upsample.weight - torch.Size([256, 256, 2, 2]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.5.upsample.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.5.conv_logits.weight - torch.Size([2, 256, 1, 1]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.5.conv_logits.bias - torch.Size([2]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.5.instance_interactive_conv.dynamic_layer.weight - torch.Size([32768, 256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.5.instance_interactive_conv.dynamic_layer.bias - torch.Size([32768]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.5.instance_interactive_conv.norm_in.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.5.instance_interactive_conv.norm_in.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.5.instance_interactive_conv.norm_out.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.5.instance_interactive_conv.norm_out.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  
2021-12-29 16:04:01,657 - mmdet - INFO - load checkpoint from local path: work_dirs/pretrained/queryInst/queryinst_r101_300_queries-860dc5d5.pth
2021-12-29 16:04:02,539 - mmdet - WARNING - The model and loaded state dict do not match exactly

size mismatch for roi_head.bbox_head.0.fc_cls.weight: copying a param with shape torch.Size([80, 256]) from checkpoint, the shape in current model is torch.Size([2, 256]).
size mismatch for roi_head.bbox_head.0.fc_cls.bias: copying a param with shape torch.Size([80]) from checkpoint, the shape in current model is torch.Size([2]).
size mismatch for roi_head.bbox_head.1.fc_cls.weight: copying a param with shape torch.Size([80, 256]) from checkpoint, the shape in current model is torch.Size([2, 256]).
size mismatch for roi_head.bbox_head.1.fc_cls.bias: copying a param with shape torch.Size([80]) from checkpoint, the shape in current model is torch.Size([2]).
size mismatch for roi_head.bbox_head.2.fc_cls.weight: copying a param with shape torch.Size([80, 256]) from checkpoint, the shape in current model is torch.Size([2, 256]).
size mismatch for roi_head.bbox_head.2.fc_cls.bias: copying a param with shape torch.Size([80]) from checkpoint, the shape in current model is torch.Size([2]).
size mismatch for roi_head.bbox_head.3.fc_cls.weight: copying a param with shape torch.Size([80, 256]) from checkpoint, the shape in current model is torch.Size([2, 256]).
size mismatch for roi_head.bbox_head.3.fc_cls.bias: copying a param with shape torch.Size([80]) from checkpoint, the shape in current model is torch.Size([2]).
size mismatch for roi_head.bbox_head.4.fc_cls.weight: copying a param with shape torch.Size([80, 256]) from checkpoint, the shape in current model is torch.Size([2, 256]).
size mismatch for roi_head.bbox_head.4.fc_cls.bias: copying a param with shape torch.Size([80]) from checkpoint, the shape in current model is torch.Size([2]).
size mismatch for roi_head.bbox_head.5.fc_cls.weight: copying a param with shape torch.Size([80, 256]) from checkpoint, the shape in current model is torch.Size([2, 256]).
size mismatch for roi_head.bbox_head.5.fc_cls.bias: copying a param with shape torch.Size([80]) from checkpoint, the shape in current model is torch.Size([2]).
size mismatch for roi_head.mask_head.0.conv_logits.weight: copying a param with shape torch.Size([80, 256, 1, 1]) from checkpoint, the shape in current model is torch.Size([2, 256, 1, 1]).
size mismatch for roi_head.mask_head.0.conv_logits.bias: copying a param with shape torch.Size([80]) from checkpoint, the shape in current model is torch.Size([2]).
size mismatch for roi_head.mask_head.1.conv_logits.weight: copying a param with shape torch.Size([80, 256, 1, 1]) from checkpoint, the shape in current model is torch.Size([2, 256, 1, 1]).
size mismatch for roi_head.mask_head.1.conv_logits.bias: copying a param with shape torch.Size([80]) from checkpoint, the shape in current model is torch.Size([2]).
size mismatch for roi_head.mask_head.2.conv_logits.weight: copying a param with shape torch.Size([80, 256, 1, 1]) from checkpoint, the shape in current model is torch.Size([2, 256, 1, 1]).
size mismatch for roi_head.mask_head.2.conv_logits.bias: copying a param with shape torch.Size([80]) from checkpoint, the shape in current model is torch.Size([2]).
size mismatch for roi_head.mask_head.3.conv_logits.weight: copying a param with shape torch.Size([80, 256, 1, 1]) from checkpoint, the shape in current model is torch.Size([2, 256, 1, 1]).
size mismatch for roi_head.mask_head.3.conv_logits.bias: copying a param with shape torch.Size([80]) from checkpoint, the shape in current model is torch.Size([2]).
size mismatch for roi_head.mask_head.4.conv_logits.weight: copying a param with shape torch.Size([80, 256, 1, 1]) from checkpoint, the shape in current model is torch.Size([2, 256, 1, 1]).
size mismatch for roi_head.mask_head.4.conv_logits.bias: copying a param with shape torch.Size([80]) from checkpoint, the shape in current model is torch.Size([2]).
size mismatch for roi_head.mask_head.5.conv_logits.weight: copying a param with shape torch.Size([80, 256, 1, 1]) from checkpoint, the shape in current model is torch.Size([2, 256, 1, 1]).
size mismatch for roi_head.mask_head.5.conv_logits.bias: copying a param with shape torch.Size([80]) from checkpoint, the shape in current model is torch.Size([2]).
missing keys in source state_dict: rpn_head.global_features_embed.weight, roi_head.bbox_head.0.global_attention.attn.in_proj_weight, roi_head.bbox_head.0.global_attention.attn.in_proj_bias, roi_head.bbox_head.0.global_attention.attn.out_proj.weight, roi_head.bbox_head.0.global_attention.attn.out_proj.bias, roi_head.bbox_head.0.global_attention_norm.weight, roi_head.bbox_head.0.global_attention_norm.bias, roi_head.bbox_head.0.global_ffn.layers.0.0.weight, roi_head.bbox_head.0.global_ffn.layers.0.0.bias, roi_head.bbox_head.0.global_ffn.layers.1.weight, roi_head.bbox_head.0.global_ffn.layers.1.bias, roi_head.bbox_head.0.global_ffn_norm.weight, roi_head.bbox_head.0.global_ffn_norm.bias, roi_head.bbox_head.0.cls_fcs.3.weight, roi_head.bbox_head.0.cls_fcs.4.weight, roi_head.bbox_head.0.cls_fcs.4.bias, roi_head.bbox_head.0.glb_fcs.0.weight, roi_head.bbox_head.0.glb_fcs.1.weight, roi_head.bbox_head.0.glb_fcs.1.bias, roi_head.bbox_head.0.glb_fcs.3.weight, roi_head.bbox_head.0.glb_fcs.4.weight, roi_head.bbox_head.0.glb_fcs.4.bias, roi_head.bbox_head.0.fc_glb.weight, roi_head.bbox_head.0.fc_glb.bias, roi_head.bbox_head.1.global_attention.attn.in_proj_weight, roi_head.bbox_head.1.global_attention.attn.in_proj_bias, roi_head.bbox_head.1.global_attention.attn.out_proj.weight, roi_head.bbox_head.1.global_attention.attn.out_proj.bias, roi_head.bbox_head.1.global_attention_norm.weight, roi_head.bbox_head.1.global_attention_norm.bias, roi_head.bbox_head.1.global_ffn.layers.0.0.weight, roi_head.bbox_head.1.global_ffn.layers.0.0.bias, roi_head.bbox_head.1.global_ffn.layers.1.weight, roi_head.bbox_head.1.global_ffn.layers.1.bias, roi_head.bbox_head.1.global_ffn_norm.weight, roi_head.bbox_head.1.global_ffn_norm.bias, roi_head.bbox_head.1.cls_fcs.3.weight, roi_head.bbox_head.1.cls_fcs.4.weight, roi_head.bbox_head.1.cls_fcs.4.bias, roi_head.bbox_head.1.glb_fcs.0.weight, roi_head.bbox_head.1.glb_fcs.1.weight, roi_head.bbox_head.1.glb_fcs.1.bias, roi_head.bbox_head.1.glb_fcs.3.weight, roi_head.bbox_head.1.glb_fcs.4.weight, roi_head.bbox_head.1.glb_fcs.4.bias, roi_head.bbox_head.1.fc_glb.weight, roi_head.bbox_head.1.fc_glb.bias, roi_head.bbox_head.2.global_attention.attn.in_proj_weight, roi_head.bbox_head.2.global_attention.attn.in_proj_bias, roi_head.bbox_head.2.global_attention.attn.out_proj.weight, roi_head.bbox_head.2.global_attention.attn.out_proj.bias, roi_head.bbox_head.2.global_attention_norm.weight, roi_head.bbox_head.2.global_attention_norm.bias, roi_head.bbox_head.2.global_ffn.layers.0.0.weight, roi_head.bbox_head.2.global_ffn.layers.0.0.bias, roi_head.bbox_head.2.global_ffn.layers.1.weight, roi_head.bbox_head.2.global_ffn.layers.1.bias, roi_head.bbox_head.2.global_ffn_norm.weight, roi_head.bbox_head.2.global_ffn_norm.bias, roi_head.bbox_head.2.cls_fcs.3.weight, roi_head.bbox_head.2.cls_fcs.4.weight, roi_head.bbox_head.2.cls_fcs.4.bias, roi_head.bbox_head.2.glb_fcs.0.weight, roi_head.bbox_head.2.glb_fcs.1.weight, roi_head.bbox_head.2.glb_fcs.1.bias, roi_head.bbox_head.2.glb_fcs.3.weight, roi_head.bbox_head.2.glb_fcs.4.weight, roi_head.bbox_head.2.glb_fcs.4.bias, roi_head.bbox_head.2.fc_glb.weight, roi_head.bbox_head.2.fc_glb.bias, roi_head.bbox_head.3.global_attention.attn.in_proj_weight, roi_head.bbox_head.3.global_attention.attn.in_proj_bias, roi_head.bbox_head.3.global_attention.attn.out_proj.weight, roi_head.bbox_head.3.global_attention.attn.out_proj.bias, roi_head.bbox_head.3.global_attention_norm.weight, roi_head.bbox_head.3.global_attention_norm.bias, roi_head.bbox_head.3.global_ffn.layers.0.0.weight, roi_head.bbox_head.3.global_ffn.layers.0.0.bias, roi_head.bbox_head.3.global_ffn.layers.1.weight, roi_head.bbox_head.3.global_ffn.layers.1.bias, roi_head.bbox_head.3.global_ffn_norm.weight, roi_head.bbox_head.3.global_ffn_norm.bias, roi_head.bbox_head.3.cls_fcs.3.weight, roi_head.bbox_head.3.cls_fcs.4.weight, roi_head.bbox_head.3.cls_fcs.4.bias, roi_head.bbox_head.3.glb_fcs.0.weight, roi_head.bbox_head.3.glb_fcs.1.weight, roi_head.bbox_head.3.glb_fcs.1.bias, roi_head.bbox_head.3.glb_fcs.3.weight, roi_head.bbox_head.3.glb_fcs.4.weight, roi_head.bbox_head.3.glb_fcs.4.bias, roi_head.bbox_head.3.fc_glb.weight, roi_head.bbox_head.3.fc_glb.bias, roi_head.bbox_head.4.global_attention.attn.in_proj_weight, roi_head.bbox_head.4.global_attention.attn.in_proj_bias, roi_head.bbox_head.4.global_attention.attn.out_proj.weight, roi_head.bbox_head.4.global_attention.attn.out_proj.bias, roi_head.bbox_head.4.global_attention_norm.weight, roi_head.bbox_head.4.global_attention_norm.bias, roi_head.bbox_head.4.global_ffn.layers.0.0.weight, roi_head.bbox_head.4.global_ffn.layers.0.0.bias, roi_head.bbox_head.4.global_ffn.layers.1.weight, roi_head.bbox_head.4.global_ffn.layers.1.bias, roi_head.bbox_head.4.global_ffn_norm.weight, roi_head.bbox_head.4.global_ffn_norm.bias, roi_head.bbox_head.4.cls_fcs.3.weight, roi_head.bbox_head.4.cls_fcs.4.weight, roi_head.bbox_head.4.cls_fcs.4.bias, roi_head.bbox_head.4.glb_fcs.0.weight, roi_head.bbox_head.4.glb_fcs.1.weight, roi_head.bbox_head.4.glb_fcs.1.bias, roi_head.bbox_head.4.glb_fcs.3.weight, roi_head.bbox_head.4.glb_fcs.4.weight, roi_head.bbox_head.4.glb_fcs.4.bias, roi_head.bbox_head.4.fc_glb.weight, roi_head.bbox_head.4.fc_glb.bias, roi_head.bbox_head.5.global_attention.attn.in_proj_weight, roi_head.bbox_head.5.global_attention.attn.in_proj_bias, roi_head.bbox_head.5.global_attention.attn.out_proj.weight, roi_head.bbox_head.5.global_attention.attn.out_proj.bias, roi_head.bbox_head.5.global_attention_norm.weight, roi_head.bbox_head.5.global_attention_norm.bias, roi_head.bbox_head.5.global_ffn.layers.0.0.weight, roi_head.bbox_head.5.global_ffn.layers.0.0.bias, roi_head.bbox_head.5.global_ffn.layers.1.weight, roi_head.bbox_head.5.global_ffn.layers.1.bias, roi_head.bbox_head.5.global_ffn_norm.weight, roi_head.bbox_head.5.global_ffn_norm.bias, roi_head.bbox_head.5.cls_fcs.3.weight, roi_head.bbox_head.5.cls_fcs.4.weight, roi_head.bbox_head.5.cls_fcs.4.bias, roi_head.bbox_head.5.glb_fcs.0.weight, roi_head.bbox_head.5.glb_fcs.1.weight, roi_head.bbox_head.5.glb_fcs.1.bias, roi_head.bbox_head.5.glb_fcs.3.weight, roi_head.bbox_head.5.glb_fcs.4.weight, roi_head.bbox_head.5.glb_fcs.4.bias, roi_head.bbox_head.5.fc_glb.weight, roi_head.bbox_head.5.fc_glb.bias

2021-12-29 16:04:02,569 - mmdet - INFO - Start running, host: user@ubuntu, work_dir: /mnt/home1/workspace2/QueryInst/work_dirs/queryglob_usdanno514roi_B_2_7_split2
2021-12-29 16:04:02,570 - mmdet - INFO - Hooks will be executed in the following order:
before_run:
(VERY_HIGH   ) StepLrUpdaterHook                  
(NORMAL      ) CheckpointHook                     
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_train_epoch:
(VERY_HIGH   ) StepLrUpdaterHook                  
(NORMAL      ) DistSamplerSeedHook                
(NORMAL      ) NumClassCheckHook                  
(LOW         ) IterTimerHook                      
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_train_iter:
(VERY_HIGH   ) StepLrUpdaterHook                  
(LOW         ) IterTimerHook                      
 -------------------- 
after_train_iter:
(ABOVE_NORMAL) OptimizerHook                      
(NORMAL      ) CheckpointHook                     
(LOW         ) IterTimerHook                      
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
after_train_epoch:
(NORMAL      ) CheckpointHook                     
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_val_epoch:
(NORMAL      ) DistSamplerSeedHook                
(NORMAL      ) NumClassCheckHook                  
(LOW         ) IterTimerHook                      
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_val_iter:
(LOW         ) IterTimerHook                      
 -------------------- 
after_val_iter:
(LOW         ) IterTimerHook                      
 -------------------- 
after_val_epoch:
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
after_run:
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
2021-12-29 16:04:02,570 - mmdet - INFO - workflow: [('train', 1)], max: 36 epochs
2021-12-29 16:04:02,570 - mmdet - INFO - Checkpoints will be saved to /mnt/home1/workspace2/QueryInst/work_dirs/queryglob_usdanno514roi_B_2_7_split2 by HardDiskBackend.
2021-12-29 16:05:08,880 - mmdet - INFO - Epoch [1][50/53]	lr: 1.249e-06, eta: 0:41:02, time: 1.325, data_time: 0.215, memory: 8378, stage0_loss_cls: 2.0969, stage0_pos_acc: 53.5000, stage0_loss_bbox: 0.6374, stage0_loss_iou: 1.0067, stage0_loss_global: 0.6787, stage0_loss_mask: 2.8107, stage1_loss_cls: 1.8882, stage1_pos_acc: 55.5000, stage1_loss_bbox: 0.5406, stage1_loss_iou: 0.8764, stage1_loss_global: 1.3658, stage1_loss_mask: 2.4640, stage2_loss_cls: 2.5495, stage2_pos_acc: 49.2500, stage2_loss_bbox: 0.5538, stage2_loss_iou: 0.8803, stage2_loss_global: 0.6760, stage2_loss_mask: 2.7730, stage3_loss_cls: 2.4061, stage3_pos_acc: 51.2500, stage3_loss_bbox: 0.5638, stage3_loss_iou: 0.8783, stage3_loss_global: 0.8574, stage3_loss_mask: 2.8562, stage4_loss_cls: 1.7191, stage4_pos_acc: 49.2500, stage4_loss_bbox: 0.5673, stage4_loss_iou: 0.8963, stage4_loss_global: 1.1744, stage4_loss_mask: 3.2188, stage5_loss_cls: 2.3027, stage5_pos_acc: 51.0000, stage5_loss_bbox: 0.5709, stage5_loss_iou: 0.9139, stage5_loss_global: 0.6102, stage5_loss_mask: 3.0344, loss: 44.3678, grad_norm: 225.3406
2021-12-29 16:05:12,803 - mmdet - INFO - Saving checkpoint at 1 epochs
2021-12-29 16:06:28,055 - mmdet - INFO - Epoch [2][50/53]	lr: 2.572e-06, eta: 0:38:48, time: 1.333, data_time: 0.214, memory: 8605, stage0_loss_cls: 1.9103, stage0_pos_acc: 50.7500, stage0_loss_bbox: 0.5723, stage0_loss_iou: 0.9265, stage0_loss_global: 0.6109, stage0_loss_mask: 2.7776, stage1_loss_cls: 1.7329, stage1_pos_acc: 56.0000, stage1_loss_bbox: 0.4509, stage1_loss_iou: 0.7564, stage1_loss_global: 0.8778, stage1_loss_mask: 2.3546, stage2_loss_cls: 2.3731, stage2_pos_acc: 48.2500, stage2_loss_bbox: 0.4392, stage2_loss_iou: 0.7238, stage2_loss_global: 0.5247, stage2_loss_mask: 2.6093, stage3_loss_cls: 2.1470, stage3_pos_acc: 56.0000, stage3_loss_bbox: 0.4383, stage3_loss_iou: 0.7101, stage3_loss_global: 0.6218, stage3_loss_mask: 2.6200, stage4_loss_cls: 1.6028, stage4_pos_acc: 52.7500, stage4_loss_bbox: 0.4324, stage4_loss_iou: 0.7088, stage4_loss_global: 0.5818, stage4_loss_mask: 2.9593, stage5_loss_cls: 1.9539, stage5_pos_acc: 51.7500, stage5_loss_bbox: 0.4220, stage5_loss_iou: 0.7038, stage5_loss_global: 0.5401, stage5_loss_mask: 2.7454, loss: 38.8275, grad_norm: 196.2849
2021-12-29 16:06:31,945 - mmdet - INFO - Saving checkpoint at 2 epochs
2021-12-29 16:07:46,406 - mmdet - INFO - Epoch [3][50/53]	lr: 3.896e-06, eta: 0:37:13, time: 1.319, data_time: 0.216, memory: 8605, stage0_loss_cls: 1.6028, stage0_pos_acc: 52.5000, stage0_loss_bbox: 0.5571, stage0_loss_iou: 0.8946, stage0_loss_global: 0.5286, stage0_loss_mask: 2.5960, stage1_loss_cls: 1.4720, stage1_pos_acc: 55.7500, stage1_loss_bbox: 0.3886, stage1_loss_iou: 0.6558, stage1_loss_global: 0.5680, stage1_loss_mask: 2.1145, stage2_loss_cls: 1.8943, stage2_pos_acc: 50.5000, stage2_loss_bbox: 0.3508, stage2_loss_iou: 0.6046, stage2_loss_global: 0.4814, stage2_loss_mask: 2.2541, stage3_loss_cls: 1.6338, stage3_pos_acc: 60.2500, stage3_loss_bbox: 0.3500, stage3_loss_iou: 0.5994, stage3_loss_global: 0.4971, stage3_loss_mask: 2.1802, stage4_loss_cls: 1.4261, stage4_pos_acc: 56.5000, stage4_loss_bbox: 0.3433, stage4_loss_iou: 0.5924, stage4_loss_global: 0.4862, stage4_loss_mask: 2.4465, stage5_loss_cls: 1.4405, stage5_pos_acc: 52.0000, stage5_loss_bbox: 0.3422, stage5_loss_iou: 0.5931, stage5_loss_global: 0.4993, stage5_loss_mask: 2.3669, loss: 32.7602, grad_norm: 159.2771
2021-12-29 16:07:50,163 - mmdet - INFO - Saving checkpoint at 3 epochs
2021-12-29 16:09:04,213 - mmdet - INFO - Epoch [4][50/53]	lr: 5.220e-06, eta: 0:35:47, time: 1.307, data_time: 0.210, memory: 8605, stage0_loss_cls: 1.4479, stage0_pos_acc: 56.2500, stage0_loss_bbox: 0.5051, stage0_loss_iou: 0.8426, stage0_loss_global: 0.5029, stage0_loss_mask: 2.1318, stage1_loss_cls: 1.3617, stage1_pos_acc: 55.0000, stage1_loss_bbox: 0.3169, stage1_loss_iou: 0.5633, stage1_loss_global: 0.5117, stage1_loss_mask: 1.7185, stage2_loss_cls: 1.4280, stage2_pos_acc: 50.5000, stage2_loss_bbox: 0.2763, stage2_loss_iou: 0.4970, stage2_loss_global: 0.4817, stage2_loss_mask: 1.8269, stage3_loss_cls: 1.2236, stage3_pos_acc: 57.2500, stage3_loss_bbox: 0.2776, stage3_loss_iou: 0.4999, stage3_loss_global: 0.4830, stage3_loss_mask: 1.6996, stage4_loss_cls: 1.2060, stage4_pos_acc: 60.0000, stage4_loss_bbox: 0.2652, stage4_loss_iou: 0.4787, stage4_loss_global: 0.4785, stage4_loss_mask: 1.8794, stage5_loss_cls: 1.1396, stage5_pos_acc: 58.7500, stage5_loss_bbox: 0.2716, stage5_loss_iou: 0.4887, stage5_loss_global: 0.4933, stage5_loss_mask: 1.8512, loss: 27.1479, grad_norm: 138.3559
2021-12-29 16:09:07,997 - mmdet - INFO - Saving checkpoint at 4 epochs
2021-12-29 16:10:22,079 - mmdet - INFO - Epoch [5][50/53]	lr: 6.543e-06, eta: 0:34:31, time: 1.312, data_time: 0.218, memory: 8605, stage0_loss_cls: 1.3541, stage0_pos_acc: 58.7500, stage0_loss_bbox: 0.4686, stage0_loss_iou: 0.7900, stage0_loss_global: 0.4802, stage0_loss_mask: 1.8352, stage1_loss_cls: 1.2328, stage1_pos_acc: 58.2500, stage1_loss_bbox: 0.2711, stage1_loss_iou: 0.4989, stage1_loss_global: 0.4823, stage1_loss_mask: 1.4917, stage2_loss_cls: 1.1061, stage2_pos_acc: 59.7500, stage2_loss_bbox: 0.2414, stage2_loss_iou: 0.4439, stage2_loss_global: 0.4707, stage2_loss_mask: 1.5034, stage3_loss_cls: 0.9407, stage3_pos_acc: 57.7500, stage3_loss_bbox: 0.2711, stage3_loss_iou: 0.4839, stage3_loss_global: 0.4669, stage3_loss_mask: 1.3765, stage4_loss_cls: 1.0145, stage4_pos_acc: 63.7500, stage4_loss_bbox: 0.2418, stage4_loss_iou: 0.4323, stage4_loss_global: 0.4681, stage4_loss_mask: 1.5102, stage5_loss_cls: 0.8564, stage5_pos_acc: 63.7500, stage5_loss_bbox: 0.2583, stage5_loss_iou: 0.4631, stage5_loss_global: 0.4700, stage5_loss_mask: 1.5115, loss: 23.4354, grad_norm: 143.8817
2021-12-29 16:10:25,872 - mmdet - INFO - Saving checkpoint at 5 epochs
2021-12-29 16:11:40,288 - mmdet - INFO - Epoch [6][50/53]	lr: 7.867e-06, eta: 0:33:18, time: 1.310, data_time: 0.217, memory: 8605, stage0_loss_cls: 1.3112, stage0_pos_acc: 58.0000, stage0_loss_bbox: 0.4397, stage0_loss_iou: 0.7575, stage0_loss_global: 0.4814, stage0_loss_mask: 1.5240, stage1_loss_cls: 1.1129, stage1_pos_acc: 62.2500, stage1_loss_bbox: 0.2367, stage1_loss_iou: 0.4427, stage1_loss_global: 0.4809, stage1_loss_mask: 1.2075, stage2_loss_cls: 0.9565, stage2_pos_acc: 66.2500, stage2_loss_bbox: 0.2237, stage2_loss_iou: 0.4138, stage2_loss_global: 0.4717, stage2_loss_mask: 1.2416, stage3_loss_cls: 0.6965, stage3_pos_acc: 63.5000, stage3_loss_bbox: 0.2534, stage3_loss_iou: 0.4643, stage3_loss_global: 0.4688, stage3_loss_mask: 1.1246, stage4_loss_cls: 0.7092, stage4_pos_acc: 66.5000, stage4_loss_bbox: 0.2434, stage4_loss_iou: 0.4462, stage4_loss_global: 0.4692, stage4_loss_mask: 1.2405, stage5_loss_cls: 0.6235, stage5_pos_acc: 65.2500, stage5_loss_bbox: 0.2559, stage5_loss_iou: 0.4595, stage5_loss_global: 0.4675, stage5_loss_mask: 1.2022, loss: 20.4265, grad_norm: 152.9711
2021-12-29 16:11:44,155 - mmdet - INFO - Saving checkpoint at 6 epochs
2021-12-29 16:12:58,609 - mmdet - INFO - Epoch [7][50/53]	lr: 9.191e-06, eta: 0:32:11, time: 1.326, data_time: 0.220, memory: 8605, stage0_loss_cls: 1.2790, stage0_pos_acc: 54.7500, stage0_loss_bbox: 0.3867, stage0_loss_iou: 0.6839, stage0_loss_global: 0.4845, stage0_loss_mask: 1.2484, stage1_loss_cls: 0.9574, stage1_pos_acc: 64.0000, stage1_loss_bbox: 0.2311, stage1_loss_iou: 0.4273, stage1_loss_global: 0.4817, stage1_loss_mask: 1.0777, stage2_loss_cls: 0.8605, stage2_pos_acc: 71.5000, stage2_loss_bbox: 0.2204, stage2_loss_iou: 0.3993, stage2_loss_global: 0.4868, stage2_loss_mask: 1.0912, stage3_loss_cls: 0.6050, stage3_pos_acc: 58.5000, stage3_loss_bbox: 0.2499, stage3_loss_iou: 0.4443, stage3_loss_global: 0.4855, stage3_loss_mask: 0.9964, stage4_loss_cls: 0.5875, stage4_pos_acc: 64.0000, stage4_loss_bbox: 0.2419, stage4_loss_iou: 0.4341, stage4_loss_global: 0.4845, stage4_loss_mask: 1.0592, stage5_loss_cls: 0.5486, stage5_pos_acc: 70.2500, stage5_loss_bbox: 0.2464, stage5_loss_iou: 0.4372, stage5_loss_global: 0.4618, stage5_loss_mask: 1.0380, loss: 18.6365, grad_norm: 134.4546
2021-12-29 16:13:02,386 - mmdet - INFO - Saving checkpoint at 7 epochs
2021-12-29 16:14:16,757 - mmdet - INFO - Epoch [8][50/53]	lr: 1.051e-05, eta: 0:31:05, time: 1.333, data_time: 0.220, memory: 8605, stage0_loss_cls: 1.1418, stage0_pos_acc: 63.2500, stage0_loss_bbox: 0.3675, stage0_loss_iou: 0.6465, stage0_loss_global: 0.4743, stage0_loss_mask: 1.1542, stage1_loss_cls: 0.8665, stage1_pos_acc: 66.0000, stage1_loss_bbox: 0.2313, stage1_loss_iou: 0.4230, stage1_loss_global: 0.4716, stage1_loss_mask: 0.9768, stage2_loss_cls: 0.7463, stage2_pos_acc: 65.7500, stage2_loss_bbox: 0.2271, stage2_loss_iou: 0.4126, stage2_loss_global: 0.4569, stage2_loss_mask: 0.9506, stage3_loss_cls: 0.5312, stage3_pos_acc: 63.0000, stage3_loss_bbox: 0.2498, stage3_loss_iou: 0.4400, stage3_loss_global: 0.4495, stage3_loss_mask: 0.8752, stage4_loss_cls: 0.5102, stage4_pos_acc: 70.7500, stage4_loss_bbox: 0.2477, stage4_loss_iou: 0.4380, stage4_loss_global: 0.4419, stage4_loss_mask: 0.9244, stage5_loss_cls: 0.4640, stage5_pos_acc: 76.2500, stage5_loss_bbox: 0.2481, stage5_loss_iou: 0.4388, stage5_loss_global: 0.4273, stage5_loss_mask: 0.9168, loss: 17.1498, grad_norm: 171.3952
2021-12-29 16:14:20,435 - mmdet - INFO - Saving checkpoint at 8 epochs
2021-12-29 16:15:35,061 - mmdet - INFO - Epoch [9][50/53]	lr: 1.184e-05, eta: 0:30:00, time: 1.339, data_time: 0.221, memory: 8605, stage0_loss_cls: 1.0266, stage0_pos_acc: 64.5000, stage0_loss_bbox: 0.3445, stage0_loss_iou: 0.6042, stage0_loss_global: 0.4677, stage0_loss_mask: 0.9552, stage1_loss_cls: 0.8087, stage1_pos_acc: 69.5000, stage1_loss_bbox: 0.2156, stage1_loss_iou: 0.4015, stage1_loss_global: 0.4647, stage1_loss_mask: 0.8514, stage2_loss_cls: 0.6316, stage2_pos_acc: 60.7500, stage2_loss_bbox: 0.2241, stage2_loss_iou: 0.4052, stage2_loss_global: 0.4306, stage2_loss_mask: 0.8308, stage3_loss_cls: 0.4889, stage3_pos_acc: 68.7500, stage3_loss_bbox: 0.2312, stage3_loss_iou: 0.4113, stage3_loss_global: 0.4079, stage3_loss_mask: 0.7756, stage4_loss_cls: 0.4382, stage4_pos_acc: 80.2500, stage4_loss_bbox: 0.2323, stage4_loss_iou: 0.4106, stage4_loss_global: 0.3867, stage4_loss_mask: 0.8192, stage5_loss_cls: 0.4239, stage5_pos_acc: 79.0000, stage5_loss_bbox: 0.2340, stage5_loss_iou: 0.4093, stage5_loss_global: 0.3815, stage5_loss_mask: 0.8303, loss: 15.5433, grad_norm: 222.9547
2021-12-29 16:15:38,687 - mmdet - INFO - Saving checkpoint at 9 epochs
2021-12-29 16:16:52,613 - mmdet - INFO - Epoch [10][50/53]	lr: 1.316e-05, eta: 0:28:52, time: 1.324, data_time: 0.219, memory: 8605, stage0_loss_cls: 0.9497, stage0_pos_acc: 69.5000, stage0_loss_bbox: 0.3394, stage0_loss_iou: 0.6051, stage0_loss_global: 0.4357, stage0_loss_mask: 0.8184, stage1_loss_cls: 0.7375, stage1_pos_acc: 68.5000, stage1_loss_bbox: 0.2204, stage1_loss_iou: 0.4020, stage1_loss_global: 0.4311, stage1_loss_mask: 0.7874, stage2_loss_cls: 0.5598, stage2_pos_acc: 66.0000, stage2_loss_bbox: 0.2205, stage2_loss_iou: 0.4051, stage2_loss_global: 0.3653, stage2_loss_mask: 0.7723, stage3_loss_cls: 0.4082, stage3_pos_acc: 77.5000, stage3_loss_bbox: 0.2349, stage3_loss_iou: 0.4166, stage3_loss_global: 0.3359, stage3_loss_mask: 0.7281, stage4_loss_cls: 0.3913, stage4_pos_acc: 81.5000, stage4_loss_bbox: 0.2334, stage4_loss_iou: 0.4155, stage4_loss_global: 0.3313, stage4_loss_mask: 0.7721, stage5_loss_cls: 0.3791, stage5_pos_acc: 82.2500, stage5_loss_bbox: 0.2328, stage5_loss_iou: 0.4130, stage5_loss_global: 0.3344, stage5_loss_mask: 0.7625, loss: 14.4387, grad_norm: 204.6969
2021-12-29 16:16:56,308 - mmdet - INFO - Saving checkpoint at 10 epochs
2021-12-29 16:18:10,232 - mmdet - INFO - Epoch [11][50/53]	lr: 1.449e-05, eta: 0:27:45, time: 1.320, data_time: 0.217, memory: 8605, stage0_loss_cls: 0.8694, stage0_pos_acc: 75.5000, stage0_loss_bbox: 0.3384, stage0_loss_iou: 0.6093, stage0_loss_global: 0.3439, stage0_loss_mask: 0.7688, stage1_loss_cls: 0.6801, stage1_pos_acc: 80.7500, stage1_loss_bbox: 0.2179, stage1_loss_iou: 0.4003, stage1_loss_global: 0.3201, stage1_loss_mask: 0.6885, stage2_loss_cls: 0.4723, stage2_pos_acc: 84.0000, stage2_loss_bbox: 0.2257, stage2_loss_iou: 0.4096, stage2_loss_global: 0.2409, stage2_loss_mask: 0.6941, stage3_loss_cls: 0.3658, stage3_pos_acc: 87.5000, stage3_loss_bbox: 0.2254, stage3_loss_iou: 0.4092, stage3_loss_global: 0.2185, stage3_loss_mask: 0.6526, stage4_loss_cls: 0.3283, stage4_pos_acc: 89.5000, stage4_loss_bbox: 0.2236, stage4_loss_iou: 0.4038, stage4_loss_global: 0.2189, stage4_loss_mask: 0.6933, stage5_loss_cls: 0.3122, stage5_pos_acc: 89.2500, stage5_loss_bbox: 0.2256, stage5_loss_iou: 0.4029, stage5_loss_global: 0.2136, stage5_loss_mask: 0.6830, loss: 12.8560, grad_norm: 294.8124
2021-12-29 16:18:14,123 - mmdet - INFO - Saving checkpoint at 11 epochs
2021-12-29 16:19:28,340 - mmdet - INFO - Epoch [12][50/53]	lr: 1.581e-05, eta: 0:26:38, time: 1.330, data_time: 0.216, memory: 8605, stage0_loss_cls: 0.7759, stage0_pos_acc: 77.7500, stage0_loss_bbox: 0.3496, stage0_loss_iou: 0.6241, stage0_loss_global: 0.2883, stage0_loss_mask: 0.7279, stage1_loss_cls: 0.5998, stage1_pos_acc: 82.2500, stage1_loss_bbox: 0.2203, stage1_loss_iou: 0.4009, stage1_loss_global: 0.2691, stage1_loss_mask: 0.6590, stage2_loss_cls: 0.4187, stage2_pos_acc: 88.0000, stage2_loss_bbox: 0.2152, stage2_loss_iou: 0.3896, stage2_loss_global: 0.2613, stage2_loss_mask: 0.6509, stage3_loss_cls: 0.3159, stage3_pos_acc: 89.2500, stage3_loss_bbox: 0.2169, stage3_loss_iou: 0.3922, stage3_loss_global: 0.2505, stage3_loss_mask: 0.6217, stage4_loss_cls: 0.2985, stage4_pos_acc: 89.7500, stage4_loss_bbox: 0.2137, stage4_loss_iou: 0.3868, stage4_loss_global: 0.2509, stage4_loss_mask: 0.6527, stage5_loss_cls: 0.2879, stage5_pos_acc: 89.7500, stage5_loss_bbox: 0.2182, stage5_loss_iou: 0.3892, stage5_loss_global: 0.2509, stage5_loss_mask: 0.6395, loss: 12.2358, grad_norm: 245.7535
2021-12-29 16:19:32,061 - mmdet - INFO - Saving checkpoint at 12 epochs
2021-12-29 16:20:45,578 - mmdet - INFO - Epoch [13][50/53]	lr: 1.713e-05, eta: 0:25:31, time: 1.317, data_time: 0.217, memory: 8605, stage0_loss_cls: 0.7817, stage0_pos_acc: 83.0000, stage0_loss_bbox: 0.3511, stage0_loss_iou: 0.6166, stage0_loss_global: 0.2359, stage0_loss_mask: 0.7304, stage1_loss_cls: 0.5763, stage1_pos_acc: 90.7500, stage1_loss_bbox: 0.2221, stage1_loss_iou: 0.3973, stage1_loss_global: 0.2191, stage1_loss_mask: 0.6246, stage2_loss_cls: 0.3839, stage2_pos_acc: 91.0000, stage2_loss_bbox: 0.2217, stage2_loss_iou: 0.3926, stage2_loss_global: 0.2110, stage2_loss_mask: 0.6348, stage3_loss_cls: 0.2916, stage3_pos_acc: 92.0000, stage3_loss_bbox: 0.2314, stage3_loss_iou: 0.4037, stage3_loss_global: 0.2087, stage3_loss_mask: 0.6122, stage4_loss_cls: 0.2738, stage4_pos_acc: 92.5000, stage4_loss_bbox: 0.2320, stage4_loss_iou: 0.4046, stage4_loss_global: 0.2076, stage4_loss_mask: 0.6402, stage5_loss_cls: 0.2651, stage5_pos_acc: 92.5000, stage5_loss_bbox: 0.2303, stage5_loss_iou: 0.4063, stage5_loss_global: 0.2126, stage5_loss_mask: 0.6281, loss: 11.8474, grad_norm: 215.7038
2021-12-29 16:20:49,319 - mmdet - INFO - Saving checkpoint at 13 epochs
2021-12-29 16:22:03,497 - mmdet - INFO - Epoch [14][50/53]	lr: 1.846e-05, eta: 0:24:24, time: 1.326, data_time: 0.217, memory: 8605, stage0_loss_cls: 0.7246, stage0_pos_acc: 84.0000, stage0_loss_bbox: 0.3441, stage0_loss_iou: 0.6080, stage0_loss_global: 0.2401, stage0_loss_mask: 0.6669, stage1_loss_cls: 0.5505, stage1_pos_acc: 89.7500, stage1_loss_bbox: 0.2338, stage1_loss_iou: 0.4132, stage1_loss_global: 0.2306, stage1_loss_mask: 0.6202, stage2_loss_cls: 0.3725, stage2_pos_acc: 88.0000, stage2_loss_bbox: 0.2264, stage2_loss_iou: 0.3990, stage2_loss_global: 0.2275, stage2_loss_mask: 0.6244, stage3_loss_cls: 0.2824, stage3_pos_acc: 88.0000, stage3_loss_bbox: 0.2287, stage3_loss_iou: 0.3957, stage3_loss_global: 0.2333, stage3_loss_mask: 0.6015, stage4_loss_cls: 0.2783, stage4_pos_acc: 86.5000, stage4_loss_bbox: 0.2318, stage4_loss_iou: 0.4003, stage4_loss_global: 0.2331, stage4_loss_mask: 0.6375, stage5_loss_cls: 0.2574, stage5_pos_acc: 88.7500, stage5_loss_bbox: 0.2308, stage5_loss_iou: 0.3984, stage5_loss_global: 0.2366, stage5_loss_mask: 0.6200, loss: 11.7477, grad_norm: 279.3514
2021-12-29 16:22:07,293 - mmdet - INFO - Saving checkpoint at 14 epochs
2021-12-29 16:23:20,873 - mmdet - INFO - Epoch [15][50/53]	lr: 1.978e-05, eta: 0:23:17, time: 1.311, data_time: 0.223, memory: 8605, stage0_loss_cls: 0.7547, stage0_pos_acc: 85.7500, stage0_loss_bbox: 0.3552, stage0_loss_iou: 0.6227, stage0_loss_global: 0.2146, stage0_loss_mask: 0.6592, stage1_loss_cls: 0.5440, stage1_pos_acc: 90.5000, stage1_loss_bbox: 0.2234, stage1_loss_iou: 0.3971, stage1_loss_global: 0.2104, stage1_loss_mask: 0.5728, stage2_loss_cls: 0.3674, stage2_pos_acc: 91.0000, stage2_loss_bbox: 0.2083, stage2_loss_iou: 0.3751, stage2_loss_global: 0.2135, stage2_loss_mask: 0.5636, stage3_loss_cls: 0.2808, stage3_pos_acc: 91.7500, stage3_loss_bbox: 0.2106, stage3_loss_iou: 0.3728, stage3_loss_global: 0.2132, stage3_loss_mask: 0.5466, stage4_loss_cls: 0.2634, stage4_pos_acc: 91.0000, stage4_loss_bbox: 0.2104, stage4_loss_iou: 0.3713, stage4_loss_global: 0.2168, stage4_loss_mask: 0.5841, stage5_loss_cls: 0.2457, stage5_pos_acc: 92.0000, stage5_loss_bbox: 0.2112, stage5_loss_iou: 0.3710, stage5_loss_global: 0.2218, stage5_loss_mask: 0.5622, loss: 11.1639, grad_norm: 243.7027
2021-12-29 16:23:24,661 - mmdet - INFO - Saving checkpoint at 15 epochs
2021-12-29 16:24:38,252 - mmdet - INFO - Epoch [16][50/53]	lr: 2.110e-05, eta: 0:22:10, time: 1.318, data_time: 0.219, memory: 8605, stage0_loss_cls: 0.6402, stage0_pos_acc: 82.5000, stage0_loss_bbox: 0.3386, stage0_loss_iou: 0.5996, stage0_loss_global: 0.1946, stage0_loss_mask: 0.6002, stage1_loss_cls: 0.4809, stage1_pos_acc: 86.7500, stage1_loss_bbox: 0.2227, stage1_loss_iou: 0.3952, stage1_loss_global: 0.1992, stage1_loss_mask: 0.5446, stage2_loss_cls: 0.3348, stage2_pos_acc: 87.5000, stage2_loss_bbox: 0.2233, stage2_loss_iou: 0.3891, stage2_loss_global: 0.1952, stage2_loss_mask: 0.5507, stage3_loss_cls: 0.2572, stage3_pos_acc: 88.5000, stage3_loss_bbox: 0.2209, stage3_loss_iou: 0.3833, stage3_loss_global: 0.2035, stage3_loss_mask: 0.5302, stage4_loss_cls: 0.2634, stage4_pos_acc: 89.7500, stage4_loss_bbox: 0.2143, stage4_loss_iou: 0.3755, stage4_loss_global: 0.2057, stage4_loss_mask: 0.5534, stage5_loss_cls: 0.2450, stage5_pos_acc: 89.2500, stage5_loss_bbox: 0.2156, stage5_loss_iou: 0.3772, stage5_loss_global: 0.2096, stage5_loss_mask: 0.5453, loss: 10.7088, grad_norm: 358.8236
2021-12-29 16:24:41,967 - mmdet - INFO - Saving checkpoint at 16 epochs
2021-12-29 16:25:56,968 - mmdet - INFO - Epoch [17][50/53]	lr: 2.243e-05, eta: 0:21:04, time: 1.345, data_time: 0.220, memory: 8605, stage0_loss_cls: 0.6531, stage0_pos_acc: 86.2500, stage0_loss_bbox: 0.3407, stage0_loss_iou: 0.6052, stage0_loss_global: 0.2110, stage0_loss_mask: 0.6340, stage1_loss_cls: 0.4915, stage1_pos_acc: 90.5000, stage1_loss_bbox: 0.2125, stage1_loss_iou: 0.3857, stage1_loss_global: 0.2016, stage1_loss_mask: 0.5426, stage2_loss_cls: 0.3321, stage2_pos_acc: 92.0000, stage2_loss_bbox: 0.2123, stage2_loss_iou: 0.3798, stage2_loss_global: 0.2021, stage2_loss_mask: 0.5699, stage3_loss_cls: 0.2562, stage3_pos_acc: 91.0000, stage3_loss_bbox: 0.2163, stage3_loss_iou: 0.3843, stage3_loss_global: 0.2059, stage3_loss_mask: 0.5444, stage4_loss_cls: 0.2341, stage4_pos_acc: 92.5000, stage4_loss_bbox: 0.2141, stage4_loss_iou: 0.3792, stage4_loss_global: 0.1992, stage4_loss_mask: 0.5721, stage5_loss_cls: 0.2333, stage5_pos_acc: 92.0000, stage5_loss_bbox: 0.2135, stage5_loss_iou: 0.3790, stage5_loss_global: 0.1995, stage5_loss_mask: 0.5658, loss: 10.7711, grad_norm: 249.6626
2021-12-29 16:26:00,959 - mmdet - INFO - Saving checkpoint at 17 epochs
2021-12-29 16:27:15,932 - mmdet - INFO - Epoch [18][50/53]	lr: 2.375e-05, eta: 0:19:59, time: 1.343, data_time: 0.215, memory: 8605, stage0_loss_cls: 0.6514, stage0_pos_acc: 90.5000, stage0_loss_bbox: 0.3499, stage0_loss_iou: 0.6079, stage0_loss_global: 0.1627, stage0_loss_mask: 0.6335, stage1_loss_cls: 0.4936, stage1_pos_acc: 93.2500, stage1_loss_bbox: 0.2184, stage1_loss_iou: 0.3890, stage1_loss_global: 0.1611, stage1_loss_mask: 0.5417, stage2_loss_cls: 0.2989, stage2_pos_acc: 94.2500, stage2_loss_bbox: 0.2145, stage2_loss_iou: 0.3799, stage2_loss_global: 0.1556, stage2_loss_mask: 0.5439, stage3_loss_cls: 0.2152, stage3_pos_acc: 93.0000, stage3_loss_bbox: 0.2161, stage3_loss_iou: 0.3792, stage3_loss_global: 0.1500, stage3_loss_mask: 0.5472, stage4_loss_cls: 0.1933, stage4_pos_acc: 93.7500, stage4_loss_bbox: 0.2160, stage4_loss_iou: 0.3787, stage4_loss_global: 0.1455, stage4_loss_mask: 0.5721, stage5_loss_cls: 0.1935, stage5_pos_acc: 94.2500, stage5_loss_bbox: 0.2125, stage5_loss_iou: 0.3756, stage5_loss_global: 0.1487, stage5_loss_mask: 0.5464, loss: 10.2919, grad_norm: 224.0562
2021-12-29 16:27:19,763 - mmdet - INFO - Saving checkpoint at 18 epochs
2021-12-29 16:28:35,283 - mmdet - INFO - Epoch [19][50/53]	lr: 2.500e-05, eta: 0:18:54, time: 1.356, data_time: 0.224, memory: 8605, stage0_loss_cls: 0.6406, stage0_pos_acc: 87.7500, stage0_loss_bbox: 0.3307, stage0_loss_iou: 0.5801, stage0_loss_global: 0.1807, stage0_loss_mask: 0.6118, stage1_loss_cls: 0.5340, stage1_pos_acc: 91.0000, stage1_loss_bbox: 0.2035, stage1_loss_iou: 0.3620, stage1_loss_global: 0.1790, stage1_loss_mask: 0.5319, stage2_loss_cls: 0.3352, stage2_pos_acc: 92.2500, stage2_loss_bbox: 0.2039, stage2_loss_iou: 0.3596, stage2_loss_global: 0.1778, stage2_loss_mask: 0.5378, stage3_loss_cls: 0.2297, stage3_pos_acc: 93.2500, stage3_loss_bbox: 0.2142, stage3_loss_iou: 0.3671, stage3_loss_global: 0.1804, stage3_loss_mask: 0.5333, stage4_loss_cls: 0.2114, stage4_pos_acc: 94.7500, stage4_loss_bbox: 0.2138, stage4_loss_iou: 0.3692, stage4_loss_global: 0.1854, stage4_loss_mask: 0.5369, stage5_loss_cls: 0.2092, stage5_pos_acc: 94.2500, stage5_loss_bbox: 0.2174, stage5_loss_iou: 0.3725, stage5_loss_global: 0.1824, stage5_loss_mask: 0.5382, loss: 10.3298, grad_norm: 296.0848
2021-12-29 16:28:39,037 - mmdet - INFO - Saving checkpoint at 19 epochs
2021-12-29 16:29:53,245 - mmdet - INFO - Epoch [20][50/53]	lr: 2.500e-05, eta: 0:17:47, time: 1.331, data_time: 0.222, memory: 8605, stage0_loss_cls: 0.5728, stage0_pos_acc: 88.7500, stage0_loss_bbox: 0.3289, stage0_loss_iou: 0.5840, stage0_loss_global: 0.1557, stage0_loss_mask: 0.5506, stage1_loss_cls: 0.4492, stage1_pos_acc: 92.7500, stage1_loss_bbox: 0.2199, stage1_loss_iou: 0.3872, stage1_loss_global: 0.1576, stage1_loss_mask: 0.5154, stage2_loss_cls: 0.2723, stage2_pos_acc: 93.7500, stage2_loss_bbox: 0.2081, stage2_loss_iou: 0.3711, stage2_loss_global: 0.1568, stage2_loss_mask: 0.5161, stage3_loss_cls: 0.2109, stage3_pos_acc: 92.0000, stage3_loss_bbox: 0.2091, stage3_loss_iou: 0.3690, stage3_loss_global: 0.1571, stage3_loss_mask: 0.5145, stage4_loss_cls: 0.1802, stage4_pos_acc: 93.5000, stage4_loss_bbox: 0.2122, stage4_loss_iou: 0.3713, stage4_loss_global: 0.1621, stage4_loss_mask: 0.5234, stage5_loss_cls: 0.1859, stage5_pos_acc: 93.5000, stage5_loss_bbox: 0.2105, stage5_loss_iou: 0.3702, stage5_loss_global: 0.1603, stage5_loss_mask: 0.5108, loss: 9.7931, grad_norm: 406.7838
2021-12-29 16:29:56,926 - mmdet - INFO - Saving checkpoint at 20 epochs
2021-12-29 16:31:10,937 - mmdet - INFO - Epoch [21][50/53]	lr: 2.500e-05, eta: 0:16:40, time: 1.321, data_time: 0.222, memory: 8605, stage0_loss_cls: 0.6201, stage0_pos_acc: 88.7500, stage0_loss_bbox: 0.3364, stage0_loss_iou: 0.6066, stage0_loss_global: 0.1944, stage0_loss_mask: 0.5639, stage1_loss_cls: 0.5646, stage1_pos_acc: 90.7500, stage1_loss_bbox: 0.2081, stage1_loss_iou: 0.3778, stage1_loss_global: 0.1992, stage1_loss_mask: 0.4980, stage2_loss_cls: 0.2993, stage2_pos_acc: 92.2500, stage2_loss_bbox: 0.2024, stage2_loss_iou: 0.3644, stage2_loss_global: 0.2003, stage2_loss_mask: 0.5077, stage3_loss_cls: 0.2312, stage3_pos_acc: 90.7500, stage3_loss_bbox: 0.2041, stage3_loss_iou: 0.3640, stage3_loss_global: 0.2027, stage3_loss_mask: 0.4934, stage4_loss_cls: 0.2272, stage4_pos_acc: 89.5000, stage4_loss_bbox: 0.2068, stage4_loss_iou: 0.3668, stage4_loss_global: 0.2030, stage4_loss_mask: 0.5149, stage5_loss_cls: 0.2347, stage5_pos_acc: 89.7500, stage5_loss_bbox: 0.2002, stage5_loss_iou: 0.3612, stage5_loss_global: 0.2110, stage5_loss_mask: 0.5043, loss: 10.2686, grad_norm: 323.8263
2021-12-29 16:31:14,700 - mmdet - INFO - Saving checkpoint at 21 epochs
2021-12-29 16:32:28,405 - mmdet - INFO - Epoch [22][50/53]	lr: 2.500e-05, eta: 0:15:34, time: 1.320, data_time: 0.218, memory: 8605, stage0_loss_cls: 0.6060, stage0_pos_acc: 89.0000, stage0_loss_bbox: 0.3382, stage0_loss_iou: 0.5983, stage0_loss_global: 0.2043, stage0_loss_mask: 0.5880, stage1_loss_cls: 0.5157, stage1_pos_acc: 92.7500, stage1_loss_bbox: 0.2067, stage1_loss_iou: 0.3731, stage1_loss_global: 0.2046, stage1_loss_mask: 0.5301, stage2_loss_cls: 0.2784, stage2_pos_acc: 92.7500, stage2_loss_bbox: 0.2130, stage2_loss_iou: 0.3763, stage2_loss_global: 0.2050, stage2_loss_mask: 0.5365, stage3_loss_cls: 0.2176, stage3_pos_acc: 92.2500, stage3_loss_bbox: 0.2106, stage3_loss_iou: 0.3724, stage3_loss_global: 0.2090, stage3_loss_mask: 0.5155, stage4_loss_cls: 0.1910, stage4_pos_acc: 93.2500, stage4_loss_bbox: 0.2118, stage4_loss_iou: 0.3715, stage4_loss_global: 0.2183, stage4_loss_mask: 0.5297, stage5_loss_cls: 0.1889, stage5_pos_acc: 93.0000, stage5_loss_bbox: 0.2073, stage5_loss_iou: 0.3649, stage5_loss_global: 0.2223, stage5_loss_mask: 0.5138, loss: 10.3186, grad_norm: 348.8458
2021-12-29 16:32:32,142 - mmdet - INFO - Saving checkpoint at 22 epochs
2021-12-29 16:33:46,371 - mmdet - INFO - Epoch [23][50/53]	lr: 2.500e-05, eta: 0:14:27, time: 1.333, data_time: 0.217, memory: 8605, stage0_loss_cls: 0.5291, stage0_pos_acc: 89.7500, stage0_loss_bbox: 0.3332, stage0_loss_iou: 0.6070, stage0_loss_global: 0.1423, stage0_loss_mask: 0.5806, stage1_loss_cls: 0.4244, stage1_pos_acc: 93.0000, stage1_loss_bbox: 0.2098, stage1_loss_iou: 0.3809, stage1_loss_global: 0.1460, stage1_loss_mask: 0.4908, stage2_loss_cls: 0.2745, stage2_pos_acc: 93.7500, stage2_loss_bbox: 0.2030, stage2_loss_iou: 0.3643, stage2_loss_global: 0.1401, stage2_loss_mask: 0.4878, stage3_loss_cls: 0.2054, stage3_pos_acc: 94.0000, stage3_loss_bbox: 0.2036, stage3_loss_iou: 0.3614, stage3_loss_global: 0.1444, stage3_loss_mask: 0.5030, stage4_loss_cls: 0.1870, stage4_pos_acc: 93.7500, stage4_loss_bbox: 0.2087, stage4_loss_iou: 0.3679, stage4_loss_global: 0.1444, stage4_loss_mask: 0.5347, stage5_loss_cls: 0.1705, stage5_pos_acc: 93.7500, stage5_loss_bbox: 0.2125, stage5_loss_iou: 0.3717, stage5_loss_global: 0.1413, stage5_loss_mask: 0.5454, loss: 9.6156, grad_norm: 231.4944
2021-12-29 16:33:49,994 - mmdet - INFO - Saving checkpoint at 23 epochs
2021-12-29 16:35:03,504 - mmdet - INFO - Epoch [24][50/53]	lr: 2.500e-05, eta: 0:13:20, time: 1.313, data_time: 0.218, memory: 8605, stage0_loss_cls: 0.5958, stage0_pos_acc: 89.0000, stage0_loss_bbox: 0.3162, stage0_loss_iou: 0.5706, stage0_loss_global: 0.1904, stage0_loss_mask: 0.5379, stage1_loss_cls: 0.4548, stage1_pos_acc: 89.2500, stage1_loss_bbox: 0.2101, stage1_loss_iou: 0.3738, stage1_loss_global: 0.1915, stage1_loss_mask: 0.5004, stage2_loss_cls: 0.2935, stage2_pos_acc: 91.0000, stage2_loss_bbox: 0.2084, stage2_loss_iou: 0.3692, stage2_loss_global: 0.1981, stage2_loss_mask: 0.5063, stage3_loss_cls: 0.2218, stage3_pos_acc: 91.0000, stage3_loss_bbox: 0.2125, stage3_loss_iou: 0.3701, stage3_loss_global: 0.1989, stage3_loss_mask: 0.5014, stage4_loss_cls: 0.1974, stage4_pos_acc: 91.2500, stage4_loss_bbox: 0.2100, stage4_loss_iou: 0.3665, stage4_loss_global: 0.2063, stage4_loss_mask: 0.5156, stage5_loss_cls: 0.1937, stage5_pos_acc: 92.2500, stage5_loss_bbox: 0.2061, stage5_loss_iou: 0.3597, stage5_loss_global: 0.2159, stage5_loss_mask: 0.5064, loss: 9.9991, grad_norm: 306.8578
2021-12-29 16:35:07,252 - mmdet - INFO - Saving checkpoint at 24 epochs
2021-12-29 16:36:21,100 - mmdet - INFO - Epoch [25][50/53]	lr: 2.500e-05, eta: 0:12:14, time: 1.317, data_time: 0.224, memory: 8605, stage0_loss_cls: 0.5239, stage0_pos_acc: 90.0000, stage0_loss_bbox: 0.3114, stage0_loss_iou: 0.5582, stage0_loss_global: 0.1704, stage0_loss_mask: 0.5282, stage1_loss_cls: 0.4003, stage1_pos_acc: 92.5000, stage1_loss_bbox: 0.2141, stage1_loss_iou: 0.3765, stage1_loss_global: 0.1656, stage1_loss_mask: 0.4903, stage2_loss_cls: 0.2283, stage2_pos_acc: 92.2500, stage2_loss_bbox: 0.2133, stage2_loss_iou: 0.3711, stage2_loss_global: 0.1622, stage2_loss_mask: 0.4966, stage3_loss_cls: 0.1846, stage3_pos_acc: 92.2500, stage3_loss_bbox: 0.2111, stage3_loss_iou: 0.3689, stage3_loss_global: 0.1618, stage3_loss_mask: 0.4922, stage4_loss_cls: 0.1687, stage4_pos_acc: 92.0000, stage4_loss_bbox: 0.2114, stage4_loss_iou: 0.3697, stage4_loss_global: 0.1595, stage4_loss_mask: 0.5107, stage5_loss_cls: 0.1665, stage5_pos_acc: 92.0000, stage5_loss_bbox: 0.2119, stage5_loss_iou: 0.3722, stage5_loss_global: 0.1616, stage5_loss_mask: 0.5016, loss: 9.4630, grad_norm: 307.6358
2021-12-29 16:36:24,825 - mmdet - INFO - Saving checkpoint at 25 epochs
2021-12-29 16:37:38,854 - mmdet - INFO - Epoch [26][50/53]	lr: 2.500e-05, eta: 0:11:07, time: 1.326, data_time: 0.217, memory: 8605, stage0_loss_cls: 0.5303, stage0_pos_acc: 86.5000, stage0_loss_bbox: 0.3423, stage0_loss_iou: 0.6019, stage0_loss_global: 0.2481, stage0_loss_mask: 0.5468, stage1_loss_cls: 0.4281, stage1_pos_acc: 87.5000, stage1_loss_bbox: 0.2239, stage1_loss_iou: 0.3915, stage1_loss_global: 0.2641, stage1_loss_mask: 0.5091, stage2_loss_cls: 0.3307, stage2_pos_acc: 85.2500, stage2_loss_bbox: 0.2140, stage2_loss_iou: 0.3775, stage2_loss_global: 0.2615, stage2_loss_mask: 0.5182, stage3_loss_cls: 0.2622, stage3_pos_acc: 85.5000, stage3_loss_bbox: 0.2103, stage3_loss_iou: 0.3693, stage3_loss_global: 0.2755, stage3_loss_mask: 0.4979, stage4_loss_cls: 0.2800, stage4_pos_acc: 83.5000, stage4_loss_bbox: 0.2086, stage4_loss_iou: 0.3650, stage4_loss_global: 0.2860, stage4_loss_mask: 0.5050, stage5_loss_cls: 0.2656, stage5_pos_acc: 84.2500, stage5_loss_bbox: 0.2077, stage5_loss_iou: 0.3617, stage5_loss_global: 0.2994, stage5_loss_mask: 0.5017, loss: 10.6838, grad_norm: 359.5298
2021-12-29 16:37:42,560 - mmdet - INFO - Saving checkpoint at 26 epochs
2021-12-29 16:38:57,024 - mmdet - INFO - Epoch [27][50/53]	lr: 2.500e-05, eta: 0:10:01, time: 1.334, data_time: 0.220, memory: 8605, stage0_loss_cls: 0.3957, stage0_pos_acc: 88.7500, stage0_loss_bbox: 0.3563, stage0_loss_iou: 0.6284, stage0_loss_global: 0.1727, stage0_loss_mask: 0.5356, stage1_loss_cls: 0.3156, stage1_pos_acc: 91.7500, stage1_loss_bbox: 0.2053, stage1_loss_iou: 0.3719, stage1_loss_global: 0.1738, stage1_loss_mask: 0.4795, stage2_loss_cls: 0.2166, stage2_pos_acc: 90.5000, stage2_loss_bbox: 0.1954, stage2_loss_iou: 0.3526, stage2_loss_global: 0.1735, stage2_loss_mask: 0.4742, stage3_loss_cls: 0.1648, stage3_pos_acc: 91.7500, stage3_loss_bbox: 0.1947, stage3_loss_iou: 0.3494, stage3_loss_global: 0.1744, stage3_loss_mask: 0.4695, stage4_loss_cls: 0.1505, stage4_pos_acc: 92.0000, stage4_loss_bbox: 0.1943, stage4_loss_iou: 0.3475, stage4_loss_global: 0.1754, stage4_loss_mask: 0.4870, stage5_loss_cls: 0.1455, stage5_pos_acc: 91.2500, stage5_loss_bbox: 0.1935, stage5_loss_iou: 0.3474, stage5_loss_global: 0.1827, stage5_loss_mask: 0.4777, loss: 9.1014, grad_norm: 311.6067
2021-12-29 16:39:00,702 - mmdet - INFO - Saving checkpoint at 27 epochs
2021-12-29 16:40:15,610 - mmdet - INFO - Epoch [28][50/53]	lr: 2.500e-06, eta: 0:08:55, time: 1.342, data_time: 0.222, memory: 8605, stage0_loss_cls: 0.3417, stage0_pos_acc: 94.0000, stage0_loss_bbox: 0.3271, stage0_loss_iou: 0.5816, stage0_loss_global: 0.1269, stage0_loss_mask: 0.5182, stage1_loss_cls: 0.2610, stage1_pos_acc: 95.2500, stage1_loss_bbox: 0.2047, stage1_loss_iou: 0.3652, stage1_loss_global: 0.1240, stage1_loss_mask: 0.4692, stage2_loss_cls: 0.1491, stage2_pos_acc: 96.5000, stage2_loss_bbox: 0.2115, stage2_loss_iou: 0.3561, stage2_loss_global: 0.1209, stage2_loss_mask: 0.4921, stage3_loss_cls: 0.1064, stage3_pos_acc: 96.0000, stage3_loss_bbox: 0.2090, stage3_loss_iou: 0.3524, stage3_loss_global: 0.1213, stage3_loss_mask: 0.4730, stage4_loss_cls: 0.0980, stage4_pos_acc: 95.7500, stage4_loss_bbox: 0.2098, stage4_loss_iou: 0.3531, stage4_loss_global: 0.1219, stage4_loss_mask: 0.4823, stage5_loss_cls: 0.0989, stage5_pos_acc: 96.0000, stage5_loss_bbox: 0.2062, stage5_loss_iou: 0.3486, stage5_loss_global: 0.1220, stage5_loss_mask: 0.4762, loss: 8.4282, grad_norm: 125.5607
2021-12-29 16:40:19,479 - mmdet - INFO - Saving checkpoint at 28 epochs
2021-12-29 16:41:32,526 - mmdet - INFO - Epoch [29][50/53]	lr: 2.500e-06, eta: 0:07:48, time: 1.304, data_time: 0.219, memory: 8605, stage0_loss_cls: 0.3355, stage0_pos_acc: 93.2500, stage0_loss_bbox: 0.3304, stage0_loss_iou: 0.5858, stage0_loss_global: 0.1279, stage0_loss_mask: 0.5134, stage1_loss_cls: 0.2468, stage1_pos_acc: 95.5000, stage1_loss_bbox: 0.2024, stage1_loss_iou: 0.3606, stage1_loss_global: 0.1331, stage1_loss_mask: 0.4795, stage2_loss_cls: 0.1513, stage2_pos_acc: 95.5000, stage2_loss_bbox: 0.1983, stage2_loss_iou: 0.3516, stage2_loss_global: 0.1287, stage2_loss_mask: 0.4858, stage3_loss_cls: 0.1124, stage3_pos_acc: 94.7500, stage3_loss_bbox: 0.1921, stage3_loss_iou: 0.3411, stage3_loss_global: 0.1336, stage3_loss_mask: 0.4589, stage4_loss_cls: 0.1045, stage4_pos_acc: 94.7500, stage4_loss_bbox: 0.1914, stage4_loss_iou: 0.3383, stage4_loss_global: 0.1311, stage4_loss_mask: 0.4703, stage5_loss_cls: 0.1022, stage5_pos_acc: 94.0000, stage5_loss_bbox: 0.1898, stage5_loss_iou: 0.3377, stage5_loss_global: 0.1325, stage5_loss_mask: 0.4678, loss: 8.3348, grad_norm: 203.2306
2021-12-29 16:41:36,270 - mmdet - INFO - Saving checkpoint at 29 epochs
2021-12-29 16:42:49,728 - mmdet - INFO - Epoch [30][50/53]	lr: 2.500e-06, eta: 0:06:41, time: 1.314, data_time: 0.217, memory: 8605, stage0_loss_cls: 0.3295, stage0_pos_acc: 95.0000, stage0_loss_bbox: 0.3090, stage0_loss_iou: 0.5544, stage0_loss_global: 0.1162, stage0_loss_mask: 0.4858, stage1_loss_cls: 0.2269, stage1_pos_acc: 96.0000, stage1_loss_bbox: 0.2029, stage1_loss_iou: 0.3629, stage1_loss_global: 0.1152, stage1_loss_mask: 0.4485, stage2_loss_cls: 0.1343, stage2_pos_acc: 96.0000, stage2_loss_bbox: 0.1997, stage2_loss_iou: 0.3487, stage2_loss_global: 0.1127, stage2_loss_mask: 0.4571, stage3_loss_cls: 0.1019, stage3_pos_acc: 95.2500, stage3_loss_bbox: 0.1977, stage3_loss_iou: 0.3428, stage3_loss_global: 0.1129, stage3_loss_mask: 0.4398, stage4_loss_cls: 0.0902, stage4_pos_acc: 96.0000, stage4_loss_bbox: 0.1972, stage4_loss_iou: 0.3409, stage4_loss_global: 0.1120, stage4_loss_mask: 0.4646, stage5_loss_cls: 0.0902, stage5_pos_acc: 96.0000, stage5_loss_bbox: 0.1974, stage5_loss_iou: 0.3408, stage5_loss_global: 0.1131, stage5_loss_mask: 0.4603, loss: 8.0054, grad_norm: 153.3849
2021-12-29 16:42:53,714 - mmdet - INFO - Saving checkpoint at 30 epochs
2021-12-29 16:44:07,235 - mmdet - INFO - Epoch [31][50/53]	lr: 2.500e-06, eta: 0:05:35, time: 1.313, data_time: 0.221, memory: 8605, stage0_loss_cls: 0.3465, stage0_pos_acc: 95.0000, stage0_loss_bbox: 0.3061, stage0_loss_iou: 0.5520, stage0_loss_global: 0.1193, stage0_loss_mask: 0.4898, stage1_loss_cls: 0.2464, stage1_pos_acc: 95.2500, stage1_loss_bbox: 0.1950, stage1_loss_iou: 0.3529, stage1_loss_global: 0.1218, stage1_loss_mask: 0.4636, stage2_loss_cls: 0.1562, stage2_pos_acc: 95.5000, stage2_loss_bbox: 0.1871, stage2_loss_iou: 0.3349, stage2_loss_global: 0.1201, stage2_loss_mask: 0.4630, stage3_loss_cls: 0.1180, stage3_pos_acc: 95.5000, stage3_loss_bbox: 0.1826, stage3_loss_iou: 0.3256, stage3_loss_global: 0.1202, stage3_loss_mask: 0.4477, stage4_loss_cls: 0.1018, stage4_pos_acc: 96.0000, stage4_loss_bbox: 0.1841, stage4_loss_iou: 0.3276, stage4_loss_global: 0.1191, stage4_loss_mask: 0.4666, stage5_loss_cls: 0.0969, stage5_pos_acc: 96.5000, stage5_loss_bbox: 0.1838, stage5_loss_iou: 0.3278, stage5_loss_global: 0.1188, stage5_loss_mask: 0.4626, loss: 8.0379, grad_norm: 496.5447
2021-12-29 16:44:10,862 - mmdet - INFO - Saving checkpoint at 31 epochs
2021-12-29 16:45:26,284 - mmdet - INFO - Epoch [32][50/53]	lr: 2.500e-06, eta: 0:04:29, time: 1.350, data_time: 0.221, memory: 8605, stage0_loss_cls: 0.3296, stage0_pos_acc: 94.5000, stage0_loss_bbox: 0.3029, stage0_loss_iou: 0.5510, stage0_loss_global: 0.1378, stage0_loss_mask: 0.4797, stage1_loss_cls: 0.2315, stage1_pos_acc: 94.7500, stage1_loss_bbox: 0.1995, stage1_loss_iou: 0.3588, stage1_loss_global: 0.1413, stage1_loss_mask: 0.4895, stage2_loss_cls: 0.1428, stage2_pos_acc: 95.2500, stage2_loss_bbox: 0.1887, stage2_loss_iou: 0.3399, stage2_loss_global: 0.1368, stage2_loss_mask: 0.4770, stage3_loss_cls: 0.0970, stage3_pos_acc: 95.7500, stage3_loss_bbox: 0.1895, stage3_loss_iou: 0.3396, stage3_loss_global: 0.1394, stage3_loss_mask: 0.4619, stage4_loss_cls: 0.0783, stage4_pos_acc: 96.7500, stage4_loss_bbox: 0.1900, stage4_loss_iou: 0.3391, stage4_loss_global: 0.1361, stage4_loss_mask: 0.4945, stage5_loss_cls: 0.0844, stage5_pos_acc: 96.2500, stage5_loss_bbox: 0.1868, stage5_loss_iou: 0.3352, stage5_loss_global: 0.1349, stage5_loss_mask: 0.4714, loss: 8.1850, grad_norm: 170.9254
2021-12-29 16:45:29,987 - mmdet - INFO - Saving checkpoint at 32 epochs
2021-12-29 16:46:44,057 - mmdet - INFO - Epoch [33][50/53]	lr: 2.500e-06, eta: 0:03:22, time: 1.319, data_time: 0.222, memory: 8605, stage0_loss_cls: 0.3407, stage0_pos_acc: 96.5000, stage0_loss_bbox: 0.2828, stage0_loss_iou: 0.5145, stage0_loss_global: 0.1185, stage0_loss_mask: 0.4885, stage1_loss_cls: 0.2251, stage1_pos_acc: 96.0000, stage1_loss_bbox: 0.1886, stage1_loss_iou: 0.3422, stage1_loss_global: 0.1182, stage1_loss_mask: 0.4653, stage2_loss_cls: 0.1281, stage2_pos_acc: 96.5000, stage2_loss_bbox: 0.1840, stage2_loss_iou: 0.3319, stage2_loss_global: 0.1112, stage2_loss_mask: 0.4630, stage3_loss_cls: 0.0855, stage3_pos_acc: 97.2500, stage3_loss_bbox: 0.1782, stage3_loss_iou: 0.3222, stage3_loss_global: 0.1112, stage3_loss_mask: 0.4548, stage4_loss_cls: 0.0737, stage4_pos_acc: 97.0000, stage4_loss_bbox: 0.1759, stage4_loss_iou: 0.3175, stage4_loss_global: 0.1059, stage4_loss_mask: 0.4642, stage5_loss_cls: 0.0731, stage5_pos_acc: 96.7500, stage5_loss_bbox: 0.1757, stage5_loss_iou: 0.3167, stage5_loss_global: 0.1043, stage5_loss_mask: 0.4571, loss: 7.7185, grad_norm: 203.5964
2021-12-29 16:46:47,739 - mmdet - INFO - Saving checkpoint at 33 epochs
2021-12-29 16:48:02,396 - mmdet - INFO - Epoch [34][50/53]	lr: 2.500e-07, eta: 0:02:16, time: 1.332, data_time: 0.221, memory: 8605, stage0_loss_cls: 0.3091, stage0_pos_acc: 95.5000, stage0_loss_bbox: 0.2946, stage0_loss_iou: 0.5304, stage0_loss_global: 0.1097, stage0_loss_mask: 0.5141, stage1_loss_cls: 0.2099, stage1_pos_acc: 96.5000, stage1_loss_bbox: 0.1963, stage1_loss_iou: 0.3578, stage1_loss_global: 0.1096, stage1_loss_mask: 0.4587, stage2_loss_cls: 0.1370, stage2_pos_acc: 96.0000, stage2_loss_bbox: 0.1882, stage2_loss_iou: 0.3415, stage2_loss_global: 0.1070, stage2_loss_mask: 0.4593, stage3_loss_cls: 0.0841, stage3_pos_acc: 96.5000, stage3_loss_bbox: 0.1872, stage3_loss_iou: 0.3372, stage3_loss_global: 0.1101, stage3_loss_mask: 0.4461, stage4_loss_cls: 0.0781, stage4_pos_acc: 97.0000, stage4_loss_bbox: 0.1862, stage4_loss_iou: 0.3358, stage4_loss_global: 0.1065, stage4_loss_mask: 0.4537, stage5_loss_cls: 0.0765, stage5_pos_acc: 96.7500, stage5_loss_bbox: 0.1840, stage5_loss_iou: 0.3317, stage5_loss_global: 0.1068, stage5_loss_mask: 0.4508, loss: 7.7979, grad_norm: 148.1267
2021-12-29 16:48:06,140 - mmdet - INFO - Saving checkpoint at 34 epochs
2021-12-29 16:49:20,449 - mmdet - INFO - Epoch [35][50/53]	lr: 2.500e-07, eta: 0:01:10, time: 1.323, data_time: 0.219, memory: 8605, stage0_loss_cls: 0.3339, stage0_pos_acc: 94.7500, stage0_loss_bbox: 0.2897, stage0_loss_iou: 0.5292, stage0_loss_global: 0.1268, stage0_loss_mask: 0.4940, stage1_loss_cls: 0.2342, stage1_pos_acc: 95.2500, stage1_loss_bbox: 0.1887, stage1_loss_iou: 0.3468, stage1_loss_global: 0.1298, stage1_loss_mask: 0.4616, stage2_loss_cls: 0.1362, stage2_pos_acc: 95.5000, stage2_loss_bbox: 0.1792, stage2_loss_iou: 0.3273, stage2_loss_global: 0.1240, stage2_loss_mask: 0.4546, stage3_loss_cls: 0.0866, stage3_pos_acc: 96.0000, stage3_loss_bbox: 0.1826, stage3_loss_iou: 0.3292, stage3_loss_global: 0.1249, stage3_loss_mask: 0.4522, stage4_loss_cls: 0.0778, stage4_pos_acc: 96.0000, stage4_loss_bbox: 0.1801, stage4_loss_iou: 0.3256, stage4_loss_global: 0.1213, stage4_loss_mask: 0.4648, stage5_loss_cls: 0.0753, stage5_pos_acc: 96.0000, stage5_loss_bbox: 0.1798, stage5_loss_iou: 0.3236, stage5_loss_global: 0.1222, stage5_loss_mask: 0.4604, loss: 7.8624, grad_norm: 203.8041
2021-12-29 16:49:24,288 - mmdet - INFO - Saving checkpoint at 35 epochs
2021-12-29 16:50:38,466 - mmdet - INFO - Epoch [36][50/53]	lr: 2.500e-07, eta: 0:00:03, time: 1.323, data_time: 0.217, memory: 8605, stage0_loss_cls: 0.3273, stage0_pos_acc: 95.7500, stage0_loss_bbox: 0.2820, stage0_loss_iou: 0.5135, stage0_loss_global: 0.1196, stage0_loss_mask: 0.4897, stage1_loss_cls: 0.2155, stage1_pos_acc: 95.7500, stage1_loss_bbox: 0.1883, stage1_loss_iou: 0.3491, stage1_loss_global: 0.1169, stage1_loss_mask: 0.4608, stage2_loss_cls: 0.1278, stage2_pos_acc: 96.2500, stage2_loss_bbox: 0.1780, stage2_loss_iou: 0.3275, stage2_loss_global: 0.1133, stage2_loss_mask: 0.4545, stage3_loss_cls: 0.0789, stage3_pos_acc: 96.7500, stage3_loss_bbox: 0.1768, stage3_loss_iou: 0.3248, stage3_loss_global: 0.1103, stage3_loss_mask: 0.4526, stage4_loss_cls: 0.0731, stage4_pos_acc: 97.0000, stage4_loss_bbox: 0.1733, stage4_loss_iou: 0.3201, stage4_loss_global: 0.1082, stage4_loss_mask: 0.4589, stage5_loss_cls: 0.0744, stage5_pos_acc: 96.2500, stage5_loss_bbox: 0.1725, stage5_loss_iou: 0.3180, stage5_loss_global: 0.1070, stage5_loss_mask: 0.4595, loss: 7.6722, grad_norm: 133.3020
2021-12-29 16:50:42,187 - mmdet - INFO - Saving checkpoint at 36 epochs
