2021-12-29 17:38:11,839 - mmdet - INFO - Environment info:
------------------------------------------------------------
sys.platform: linux
Python: 3.8.10 (default, Jun  4 2021, 15:09:15) [GCC 7.5.0]
CUDA available: True
GPU 0,1,2,3: NVIDIA TITAN Xp
CUDA_HOME: /usr/local/cuda
NVCC: Cuda compilation tools, release 10.2, V10.2.89
GCC: gcc (Ubuntu 5.4.0-6ubuntu1~16.04.12) 5.4.0 20160609
PyTorch: 1.7.0
PyTorch compiling details: PyTorch built with:
  - GCC 7.3
  - C++ Version: 201402
  - Intel(R) Math Kernel Library Version 2020.0.0 Product Build 20191122 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v1.6.0 (Git Hash 5ef631a030a6f73131c77892041042805a06064f)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 10.2
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75
  - CuDNN 7.6.5
  - Magma 2.5.2
  - Build settings: BLAS=MKL, BUILD_TYPE=Release, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DUSE_VULKAN_WRAPPER -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, USE_CUDA=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, 

TorchVision: 0.8.1
OpenCV: 4.5.3
MMCV: 1.3.18
MMCV Compiler: GCC 7.3
MMCV CUDA Compiler: 10.2
MMDetection: 2.12.0+170db93
------------------------------------------------------------

2021-12-29 17:38:14,820 - mmdet - INFO - Distributed training: True
2021-12-29 17:38:17,764 - mmdet - INFO - Config:
dataset_type = 'AnatomyDataset'
data_root = '/mnt/home1/workspace2/QueryInst/data/usd514_jpeg_roi'
split = 'split_4'
img_norm_cfg = dict(
    mean=[123.675, 116.28, 103.53], std=[58.395, 57.12, 57.375], to_rgb=True)
albu_train_transforms = [
    dict(
        type='OneOf',
        transforms=[
            dict(
                type='Affine',
                translate_percent=0.0,
                rotate=90,
                fit_output=True,
                p=0.25),
            dict(
                type='Affine',
                translate_percent=0.0,
                rotate=180,
                fit_output=True,
                p=0.25),
            dict(
                type='Affine',
                translate_percent=0.0,
                rotate=270,
                fit_output=True,
                p=0.25)
        ],
        p=0.75)
]
train_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(type='LoadAnnotations', with_bbox=True, with_mask=True),
    dict(type='LoadAnatomy'),
    dict(type='RandomFlip', flip_ratio=0.5),
    dict(
        type='Albu',
        transforms=[
            dict(
                type='OneOf',
                transforms=[
                    dict(
                        type='Affine',
                        translate_percent=0.0,
                        rotate=90,
                        fit_output=True,
                        p=0.25),
                    dict(
                        type='Affine',
                        translate_percent=0.0,
                        rotate=180,
                        fit_output=True,
                        p=0.25),
                    dict(
                        type='Affine',
                        translate_percent=0.0,
                        rotate=270,
                        fit_output=True,
                        p=0.25)
                ],
                p=0.75)
        ],
        bbox_params=dict(
            type='BboxParams',
            format='pascal_voc',
            label_fields=['gt_labels'],
            min_visibility=0.0,
            filter_lost_elements=True),
        keymap=dict(img='image', gt_masks='masks', gt_bboxes='bboxes'),
        update_pad_shape=False,
        skip_img_without_anno=True),
    dict(
        type='Resize',
        img_scale=[(1333, 480), (1333, 512), (1333, 544), (1333, 576),
                   (1333, 608), (1333, 640), (1333, 672), (1333, 704),
                   (1333, 736), (1333, 768), (1333, 800)],
        multiscale_mode='value',
        keep_ratio=True),
    dict(
        type='Normalize',
        mean=[123.675, 116.28, 103.53],
        std=[58.395, 57.12, 57.375],
        to_rgb=True),
    dict(type='Pad', size_divisor=32),
    dict(type='DefaultFormatBundle'),
    dict(type='FormatAnatomyBundle'),
    dict(
        type='Collect',
        keys=['img', 'anatomy', 'gt_bboxes', 'gt_labels', 'gt_masks'])
]
test_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(type='LoadAnatomy'),
    dict(
        type='MultiScaleFlipAug',
        img_scale=(1333, 800),
        flip=False,
        transforms=[
            dict(type='Resize', keep_ratio=True),
            dict(type='RandomFlip'),
            dict(
                type='Normalize',
                mean=[123.675, 116.28, 103.53],
                std=[58.395, 57.12, 57.375],
                to_rgb=True),
            dict(type='Pad', size_divisor=32),
            dict(type='ImageToTensor', keys=['img']),
            dict(type='FormatAnatomyBundle'),
            dict(type='Collect', keys=['img', 'anatomy'])
        ])
]
data = dict(
    samples_per_gpu=2,
    workers_per_gpu=2,
    train=dict(
        type='AnatomyDataset',
        ann_file=
        '/mnt/home1/workspace2/QueryInst/data/usd514_jpeg_roi/annotations/train_anno_crop_split_4.json',
        img_prefix=
        '/mnt/home1/workspace2/QueryInst/data/usd514_jpeg_roi/images/',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(type='LoadAnnotations', with_bbox=True, with_mask=True),
            dict(type='LoadAnatomy'),
            dict(type='RandomFlip', flip_ratio=0.5),
            dict(
                type='Albu',
                transforms=[
                    dict(
                        type='OneOf',
                        transforms=[
                            dict(
                                type='Affine',
                                translate_percent=0.0,
                                rotate=90,
                                fit_output=True,
                                p=0.25),
                            dict(
                                type='Affine',
                                translate_percent=0.0,
                                rotate=180,
                                fit_output=True,
                                p=0.25),
                            dict(
                                type='Affine',
                                translate_percent=0.0,
                                rotate=270,
                                fit_output=True,
                                p=0.25)
                        ],
                        p=0.75)
                ],
                bbox_params=dict(
                    type='BboxParams',
                    format='pascal_voc',
                    label_fields=['gt_labels'],
                    min_visibility=0.0,
                    filter_lost_elements=True),
                keymap=dict(img='image', gt_masks='masks', gt_bboxes='bboxes'),
                update_pad_shape=False,
                skip_img_without_anno=True),
            dict(
                type='Resize',
                img_scale=[(1333, 480), (1333, 512), (1333, 544), (1333, 576),
                           (1333, 608), (1333, 640), (1333, 672), (1333, 704),
                           (1333, 736), (1333, 768), (1333, 800)],
                multiscale_mode='value',
                keep_ratio=True),
            dict(
                type='Normalize',
                mean=[123.675, 116.28, 103.53],
                std=[58.395, 57.12, 57.375],
                to_rgb=True),
            dict(type='Pad', size_divisor=32),
            dict(type='DefaultFormatBundle'),
            dict(type='FormatAnatomyBundle'),
            dict(
                type='Collect',
                keys=['img', 'anatomy', 'gt_bboxes', 'gt_labels', 'gt_masks'])
        ],
        classes=('lmym', 'GIST')),
    val=dict(
        type='AnatomyDataset',
        ann_file=
        '/mnt/home1/workspace2/QueryInst/data/usd514_jpeg_roi/annotations/val_anno_crop_split_4.json',
        img_prefix=
        '/mnt/home1/workspace2/QueryInst/data/usd514_jpeg_roi/images/',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(type='LoadAnatomy'),
            dict(
                type='MultiScaleFlipAug',
                img_scale=(1333, 800),
                flip=False,
                transforms=[
                    dict(type='Resize', keep_ratio=True),
                    dict(type='RandomFlip'),
                    dict(
                        type='Normalize',
                        mean=[123.675, 116.28, 103.53],
                        std=[58.395, 57.12, 57.375],
                        to_rgb=True),
                    dict(type='Pad', size_divisor=32),
                    dict(type='ImageToTensor', keys=['img']),
                    dict(type='FormatAnatomyBundle'),
                    dict(type='Collect', keys=['img', 'anatomy'])
                ])
        ],
        classes=('lmym', 'GIST')),
    test=dict(
        type='AnatomyDataset',
        ann_file=
        '/mnt/home1/workspace2/QueryInst/data/usd514_jpeg_roi/annotations/val_anno_crop_split_4.json',
        img_prefix=
        '/mnt/home1/workspace2/QueryInst/data/usd514_jpeg_roi/images/',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(type='LoadAnatomy'),
            dict(
                type='MultiScaleFlipAug',
                img_scale=(1333, 800),
                flip=False,
                transforms=[
                    dict(type='Resize', keep_ratio=True),
                    dict(type='RandomFlip'),
                    dict(
                        type='Normalize',
                        mean=[123.675, 116.28, 103.53],
                        std=[58.395, 57.12, 57.375],
                        to_rgb=True),
                    dict(type='Pad', size_divisor=32),
                    dict(type='ImageToTensor', keys=['img']),
                    dict(type='FormatAnatomyBundle'),
                    dict(type='Collect', keys=['img', 'anatomy'])
                ])
        ],
        classes=('lmym', 'GIST')))
evaluation = dict(metric=['bbox', 'segm', 'glob'])
optimizer = dict(type='AdamW', lr=2.5e-05, weight_decay=0.0001)
optimizer_config = dict(grad_clip=dict(max_norm=1, norm_type=2))
lr_config = dict(
    policy='step',
    warmup='linear',
    warmup_iters=1000,
    warmup_ratio=0.001,
    step=[27, 33])
runner = dict(type='EpochBasedRunner', max_epochs=36)
checkpoint_config = dict(interval=1)
log_config = dict(interval=50, hooks=[dict(type='TextLoggerHook')])
custom_hooks = [dict(type='NumClassCheckHook')]
dist_params = dict(backend='nccl')
log_level = 'INFO'
load_from = 'work_dirs/pretrained/queryInst/queryinst_r101_300_queries-860dc5d5.pth'
resume_from = None
workflow = [('train', 1)]
num_stages = 6
num_proposals = 300
model = dict(
    type='QueryGlob',
    pretrained='torchvision://resnet101',
    backbone=dict(
        type='ResNet',
        depth=101,
        num_stages=4,
        out_indices=(0, 1, 2, 3),
        frozen_stages=1,
        norm_cfg=dict(type='BN', requires_grad=True),
        norm_eval=True,
        style='pytorch'),
    neck=dict(
        type='FPN',
        in_channels=[256, 512, 1024, 2048],
        out_channels=256,
        start_level=0,
        add_extra_convs='on_input',
        num_outs=4),
    rpn_head=dict(
        type='GlobalEmbeddingRPNHead',
        num_proposals=300,
        dim_global=7,
        proposal_feature_channel=256),
    roi_head=dict(
        type='QueryGlobRoIHead',
        num_stages=6,
        stage_loss_weights=[1, 1, 1, 1, 1, 1],
        proposal_feature_channel=256,
        bbox_roi_extractor=dict(
            type='SingleRoIExtractor',
            roi_layer=dict(type='RoIAlign', output_size=7, sampling_ratio=2),
            out_channels=256,
            featmap_strides=[4, 8, 16, 32]),
        mask_roi_extractor=dict(
            type='SingleRoIExtractor',
            roi_layer=dict(type='RoIAlign', output_size=14, sampling_ratio=2),
            out_channels=256,
            featmap_strides=[4, 8, 16, 32]),
        bbox_head=[
            dict(
                type='GlobDIIHead',
                num_classes=2,
                num_ffn_fcs=2,
                num_heads=8,
                num_cls_fcs=2,
                num_glb_fcs=2,
                num_reg_fcs=3,
                feedforward_channels=2048,
                in_channels=256,
                dropout=0.0,
                ffn_act_cfg=dict(type='ReLU', inplace=True),
                dynamic_conv_cfg=dict(
                    type='DynamicConv',
                    in_channels=256,
                    feat_channels=64,
                    out_channels=256,
                    input_feat_shape=7,
                    with_proj=True,
                    act_cfg=dict(type='ReLU', inplace=True),
                    norm_cfg=dict(type='LN')),
                loss_bbox=dict(type='L1Loss', loss_weight=5.0),
                loss_iou=dict(type='GIoULoss', loss_weight=2.0),
                loss_cls=dict(
                    type='FocalLoss',
                    use_sigmoid=True,
                    gamma=2.0,
                    alpha=0.25,
                    loss_weight=2.0),
                loss_global=dict(type='CrossEntropyLoss', loss_weight=1.0),
                bbox_coder=dict(
                    type='DeltaXYWHBBoxCoder',
                    clip_border=False,
                    target_means=[0.0, 0.0, 0.0, 0.0],
                    target_stds=[0.5, 0.5, 1.0, 1.0])),
            dict(
                type='GlobDIIHead',
                num_classes=2,
                num_ffn_fcs=2,
                num_heads=8,
                num_cls_fcs=2,
                num_glb_fcs=2,
                num_reg_fcs=3,
                feedforward_channels=2048,
                in_channels=256,
                dropout=0.0,
                ffn_act_cfg=dict(type='ReLU', inplace=True),
                dynamic_conv_cfg=dict(
                    type='DynamicConv',
                    in_channels=256,
                    feat_channels=64,
                    out_channels=256,
                    input_feat_shape=7,
                    with_proj=True,
                    act_cfg=dict(type='ReLU', inplace=True),
                    norm_cfg=dict(type='LN')),
                loss_bbox=dict(type='L1Loss', loss_weight=5.0),
                loss_iou=dict(type='GIoULoss', loss_weight=2.0),
                loss_cls=dict(
                    type='FocalLoss',
                    use_sigmoid=True,
                    gamma=2.0,
                    alpha=0.25,
                    loss_weight=2.0),
                loss_global=dict(type='CrossEntropyLoss', loss_weight=1.0),
                bbox_coder=dict(
                    type='DeltaXYWHBBoxCoder',
                    clip_border=False,
                    target_means=[0.0, 0.0, 0.0, 0.0],
                    target_stds=[0.5, 0.5, 1.0, 1.0])),
            dict(
                type='GlobDIIHead',
                num_classes=2,
                num_ffn_fcs=2,
                num_heads=8,
                num_cls_fcs=2,
                num_glb_fcs=2,
                num_reg_fcs=3,
                feedforward_channels=2048,
                in_channels=256,
                dropout=0.0,
                ffn_act_cfg=dict(type='ReLU', inplace=True),
                dynamic_conv_cfg=dict(
                    type='DynamicConv',
                    in_channels=256,
                    feat_channels=64,
                    out_channels=256,
                    input_feat_shape=7,
                    with_proj=True,
                    act_cfg=dict(type='ReLU', inplace=True),
                    norm_cfg=dict(type='LN')),
                loss_bbox=dict(type='L1Loss', loss_weight=5.0),
                loss_iou=dict(type='GIoULoss', loss_weight=2.0),
                loss_cls=dict(
                    type='FocalLoss',
                    use_sigmoid=True,
                    gamma=2.0,
                    alpha=0.25,
                    loss_weight=2.0),
                loss_global=dict(type='CrossEntropyLoss', loss_weight=1.0),
                bbox_coder=dict(
                    type='DeltaXYWHBBoxCoder',
                    clip_border=False,
                    target_means=[0.0, 0.0, 0.0, 0.0],
                    target_stds=[0.5, 0.5, 1.0, 1.0])),
            dict(
                type='GlobDIIHead',
                num_classes=2,
                num_ffn_fcs=2,
                num_heads=8,
                num_cls_fcs=2,
                num_glb_fcs=2,
                num_reg_fcs=3,
                feedforward_channels=2048,
                in_channels=256,
                dropout=0.0,
                ffn_act_cfg=dict(type='ReLU', inplace=True),
                dynamic_conv_cfg=dict(
                    type='DynamicConv',
                    in_channels=256,
                    feat_channels=64,
                    out_channels=256,
                    input_feat_shape=7,
                    with_proj=True,
                    act_cfg=dict(type='ReLU', inplace=True),
                    norm_cfg=dict(type='LN')),
                loss_bbox=dict(type='L1Loss', loss_weight=5.0),
                loss_iou=dict(type='GIoULoss', loss_weight=2.0),
                loss_cls=dict(
                    type='FocalLoss',
                    use_sigmoid=True,
                    gamma=2.0,
                    alpha=0.25,
                    loss_weight=2.0),
                loss_global=dict(type='CrossEntropyLoss', loss_weight=1.0),
                bbox_coder=dict(
                    type='DeltaXYWHBBoxCoder',
                    clip_border=False,
                    target_means=[0.0, 0.0, 0.0, 0.0],
                    target_stds=[0.5, 0.5, 1.0, 1.0])),
            dict(
                type='GlobDIIHead',
                num_classes=2,
                num_ffn_fcs=2,
                num_heads=8,
                num_cls_fcs=2,
                num_glb_fcs=2,
                num_reg_fcs=3,
                feedforward_channels=2048,
                in_channels=256,
                dropout=0.0,
                ffn_act_cfg=dict(type='ReLU', inplace=True),
                dynamic_conv_cfg=dict(
                    type='DynamicConv',
                    in_channels=256,
                    feat_channels=64,
                    out_channels=256,
                    input_feat_shape=7,
                    with_proj=True,
                    act_cfg=dict(type='ReLU', inplace=True),
                    norm_cfg=dict(type='LN')),
                loss_bbox=dict(type='L1Loss', loss_weight=5.0),
                loss_iou=dict(type='GIoULoss', loss_weight=2.0),
                loss_cls=dict(
                    type='FocalLoss',
                    use_sigmoid=True,
                    gamma=2.0,
                    alpha=0.25,
                    loss_weight=2.0),
                loss_global=dict(type='CrossEntropyLoss', loss_weight=1.0),
                bbox_coder=dict(
                    type='DeltaXYWHBBoxCoder',
                    clip_border=False,
                    target_means=[0.0, 0.0, 0.0, 0.0],
                    target_stds=[0.5, 0.5, 1.0, 1.0])),
            dict(
                type='GlobDIIHead',
                num_classes=2,
                num_ffn_fcs=2,
                num_heads=8,
                num_cls_fcs=2,
                num_glb_fcs=2,
                num_reg_fcs=3,
                feedforward_channels=2048,
                in_channels=256,
                dropout=0.0,
                ffn_act_cfg=dict(type='ReLU', inplace=True),
                dynamic_conv_cfg=dict(
                    type='DynamicConv',
                    in_channels=256,
                    feat_channels=64,
                    out_channels=256,
                    input_feat_shape=7,
                    with_proj=True,
                    act_cfg=dict(type='ReLU', inplace=True),
                    norm_cfg=dict(type='LN')),
                loss_bbox=dict(type='L1Loss', loss_weight=5.0),
                loss_iou=dict(type='GIoULoss', loss_weight=2.0),
                loss_cls=dict(
                    type='FocalLoss',
                    use_sigmoid=True,
                    gamma=2.0,
                    alpha=0.25,
                    loss_weight=2.0),
                loss_global=dict(type='CrossEntropyLoss', loss_weight=1.0),
                bbox_coder=dict(
                    type='DeltaXYWHBBoxCoder',
                    clip_border=False,
                    target_means=[0.0, 0.0, 0.0, 0.0],
                    target_stds=[0.5, 0.5, 1.0, 1.0]))
        ],
        mask_head=[
            dict(
                type='DynamicMaskHead',
                num_classes=2,
                dynamic_conv_cfg=dict(
                    type='DynamicConv',
                    in_channels=256,
                    feat_channels=64,
                    out_channels=256,
                    input_feat_shape=14,
                    with_proj=False,
                    act_cfg=dict(type='ReLU', inplace=True),
                    norm_cfg=dict(type='LN')),
                dropout=0.0,
                num_convs=4,
                roi_feat_size=14,
                in_channels=256,
                conv_kernel_size=3,
                conv_out_channels=256,
                class_agnostic=False,
                norm_cfg=dict(type='BN'),
                upsample_cfg=dict(type='deconv', scale_factor=2),
                loss_dice=dict(type='DiceLoss', loss_weight=8.0)),
            dict(
                type='DynamicMaskHead',
                num_classes=2,
                dynamic_conv_cfg=dict(
                    type='DynamicConv',
                    in_channels=256,
                    feat_channels=64,
                    out_channels=256,
                    input_feat_shape=14,
                    with_proj=False,
                    act_cfg=dict(type='ReLU', inplace=True),
                    norm_cfg=dict(type='LN')),
                dropout=0.0,
                num_convs=4,
                roi_feat_size=14,
                in_channels=256,
                conv_kernel_size=3,
                conv_out_channels=256,
                class_agnostic=False,
                norm_cfg=dict(type='BN'),
                upsample_cfg=dict(type='deconv', scale_factor=2),
                loss_dice=dict(type='DiceLoss', loss_weight=8.0)),
            dict(
                type='DynamicMaskHead',
                num_classes=2,
                dynamic_conv_cfg=dict(
                    type='DynamicConv',
                    in_channels=256,
                    feat_channels=64,
                    out_channels=256,
                    input_feat_shape=14,
                    with_proj=False,
                    act_cfg=dict(type='ReLU', inplace=True),
                    norm_cfg=dict(type='LN')),
                dropout=0.0,
                num_convs=4,
                roi_feat_size=14,
                in_channels=256,
                conv_kernel_size=3,
                conv_out_channels=256,
                class_agnostic=False,
                norm_cfg=dict(type='BN'),
                upsample_cfg=dict(type='deconv', scale_factor=2),
                loss_dice=dict(type='DiceLoss', loss_weight=8.0)),
            dict(
                type='DynamicMaskHead',
                num_classes=2,
                dynamic_conv_cfg=dict(
                    type='DynamicConv',
                    in_channels=256,
                    feat_channels=64,
                    out_channels=256,
                    input_feat_shape=14,
                    with_proj=False,
                    act_cfg=dict(type='ReLU', inplace=True),
                    norm_cfg=dict(type='LN')),
                dropout=0.0,
                num_convs=4,
                roi_feat_size=14,
                in_channels=256,
                conv_kernel_size=3,
                conv_out_channels=256,
                class_agnostic=False,
                norm_cfg=dict(type='BN'),
                upsample_cfg=dict(type='deconv', scale_factor=2),
                loss_dice=dict(type='DiceLoss', loss_weight=8.0)),
            dict(
                type='DynamicMaskHead',
                num_classes=2,
                dynamic_conv_cfg=dict(
                    type='DynamicConv',
                    in_channels=256,
                    feat_channels=64,
                    out_channels=256,
                    input_feat_shape=14,
                    with_proj=False,
                    act_cfg=dict(type='ReLU', inplace=True),
                    norm_cfg=dict(type='LN')),
                dropout=0.0,
                num_convs=4,
                roi_feat_size=14,
                in_channels=256,
                conv_kernel_size=3,
                conv_out_channels=256,
                class_agnostic=False,
                norm_cfg=dict(type='BN'),
                upsample_cfg=dict(type='deconv', scale_factor=2),
                loss_dice=dict(type='DiceLoss', loss_weight=8.0)),
            dict(
                type='DynamicMaskHead',
                num_classes=2,
                dynamic_conv_cfg=dict(
                    type='DynamicConv',
                    in_channels=256,
                    feat_channels=64,
                    out_channels=256,
                    input_feat_shape=14,
                    with_proj=False,
                    act_cfg=dict(type='ReLU', inplace=True),
                    norm_cfg=dict(type='LN')),
                dropout=0.0,
                num_convs=4,
                roi_feat_size=14,
                in_channels=256,
                conv_kernel_size=3,
                conv_out_channels=256,
                class_agnostic=False,
                norm_cfg=dict(type='BN'),
                upsample_cfg=dict(type='deconv', scale_factor=2),
                loss_dice=dict(type='DiceLoss', loss_weight=8.0))
        ]),
    train_cfg=dict(
        rpn=None,
        rcnn=[
            dict(
                assigner=dict(
                    type='HungarianAssigner',
                    cls_cost=dict(type='FocalLossCost', weight=2.0),
                    reg_cost=dict(type='BBoxL1Cost', weight=5.0),
                    iou_cost=dict(type='IoUCost', iou_mode='giou',
                                  weight=2.0)),
                sampler=dict(type='PseudoSampler'),
                pos_weight=1,
                mask_size=28,
                debug=False),
            dict(
                assigner=dict(
                    type='HungarianAssigner',
                    cls_cost=dict(type='FocalLossCost', weight=2.0),
                    reg_cost=dict(type='BBoxL1Cost', weight=5.0),
                    iou_cost=dict(type='IoUCost', iou_mode='giou',
                                  weight=2.0)),
                sampler=dict(type='PseudoSampler'),
                pos_weight=1,
                mask_size=28,
                debug=False),
            dict(
                assigner=dict(
                    type='HungarianAssigner',
                    cls_cost=dict(type='FocalLossCost', weight=2.0),
                    reg_cost=dict(type='BBoxL1Cost', weight=5.0),
                    iou_cost=dict(type='IoUCost', iou_mode='giou',
                                  weight=2.0)),
                sampler=dict(type='PseudoSampler'),
                pos_weight=1,
                mask_size=28,
                debug=False),
            dict(
                assigner=dict(
                    type='HungarianAssigner',
                    cls_cost=dict(type='FocalLossCost', weight=2.0),
                    reg_cost=dict(type='BBoxL1Cost', weight=5.0),
                    iou_cost=dict(type='IoUCost', iou_mode='giou',
                                  weight=2.0)),
                sampler=dict(type='PseudoSampler'),
                pos_weight=1,
                mask_size=28,
                debug=False),
            dict(
                assigner=dict(
                    type='HungarianAssigner',
                    cls_cost=dict(type='FocalLossCost', weight=2.0),
                    reg_cost=dict(type='BBoxL1Cost', weight=5.0),
                    iou_cost=dict(type='IoUCost', iou_mode='giou',
                                  weight=2.0)),
                sampler=dict(type='PseudoSampler'),
                pos_weight=1,
                mask_size=28,
                debug=False),
            dict(
                assigner=dict(
                    type='HungarianAssigner',
                    cls_cost=dict(type='FocalLossCost', weight=2.0),
                    reg_cost=dict(type='BBoxL1Cost', weight=5.0),
                    iou_cost=dict(type='IoUCost', iou_mode='giou',
                                  weight=2.0)),
                sampler=dict(type='PseudoSampler'),
                pos_weight=1,
                mask_size=28,
                debug=False)
        ]),
    test_cfg=dict(
        rpn=None,
        rcnn=dict(
            max_per_img=300,
            mask_thr_binary=0.5,
            nms=dict(type='nms', iou_threshold=0.7))))
total_epochs = 36
min_values = (480, 512, 544, 576, 608, 640, 672, 704, 736, 768, 800)
classes = ('lmym', 'GIST')
gpu_ids = range(0, 4)
work_dir = './work_dirs/queryglob_usdanno514roi_B_2_7_split4'

2021-12-29 17:38:19,816 - mmdet - INFO - initialize ResNet with init_cfg {'type': 'Pretrained', 'checkpoint': 'torchvision://resnet101'}
2021-12-29 17:38:20,345 - mmdet - INFO - initialize FPN with init_cfg {'type': 'Xavier', 'layer': 'Conv2d', 'distribution': 'uniform'}
2021-12-29 17:38:20,371 - mmdet - INFO - initialize GlobDIIHead with init_cfg [{'type': 'Normal', 'std': 0.01, 'override': {'name': 'fc_cls'}}, {'type': 'Normal', 'std': 0.001, 'override': {'name': 'fc_reg'}}]
2021-12-29 17:38:20,493 - mmdet - INFO - initialize GlobDIIHead with init_cfg [{'type': 'Normal', 'std': 0.01, 'override': {'name': 'fc_cls'}}, {'type': 'Normal', 'std': 0.001, 'override': {'name': 'fc_reg'}}]
2021-12-29 17:38:20,615 - mmdet - INFO - initialize GlobDIIHead with init_cfg [{'type': 'Normal', 'std': 0.01, 'override': {'name': 'fc_cls'}}, {'type': 'Normal', 'std': 0.001, 'override': {'name': 'fc_reg'}}]
2021-12-29 17:38:20,733 - mmdet - INFO - initialize GlobDIIHead with init_cfg [{'type': 'Normal', 'std': 0.01, 'override': {'name': 'fc_cls'}}, {'type': 'Normal', 'std': 0.001, 'override': {'name': 'fc_reg'}}]
2021-12-29 17:38:20,865 - mmdet - INFO - initialize GlobDIIHead with init_cfg [{'type': 'Normal', 'std': 0.01, 'override': {'name': 'fc_cls'}}, {'type': 'Normal', 'std': 0.001, 'override': {'name': 'fc_reg'}}]
2021-12-29 17:38:20,997 - mmdet - INFO - initialize GlobDIIHead with init_cfg [{'type': 'Normal', 'std': 0.01, 'override': {'name': 'fc_cls'}}, {'type': 'Normal', 'std': 0.001, 'override': {'name': 'fc_reg'}}]
Name of parameter - Initialization information

backbone.conv1.weight - torch.Size([64, 3, 7, 7]): 
PretrainedInit: load from torchvision://resnet101 

backbone.bn1.weight - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet101 

backbone.bn1.bias - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer1.0.conv1.weight - torch.Size([64, 64, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer1.0.bn1.weight - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer1.0.bn1.bias - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer1.0.conv2.weight - torch.Size([64, 64, 3, 3]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer1.0.bn2.weight - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer1.0.bn2.bias - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer1.0.conv3.weight - torch.Size([256, 64, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer1.0.bn3.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer1.0.bn3.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer1.0.downsample.0.weight - torch.Size([256, 64, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer1.0.downsample.1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer1.0.downsample.1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer1.1.conv1.weight - torch.Size([64, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer1.1.bn1.weight - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer1.1.bn1.bias - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer1.1.conv2.weight - torch.Size([64, 64, 3, 3]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer1.1.bn2.weight - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer1.1.bn2.bias - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer1.1.conv3.weight - torch.Size([256, 64, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer1.1.bn3.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer1.1.bn3.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer1.2.conv1.weight - torch.Size([64, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer1.2.bn1.weight - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer1.2.bn1.bias - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer1.2.conv2.weight - torch.Size([64, 64, 3, 3]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer1.2.bn2.weight - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer1.2.bn2.bias - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer1.2.conv3.weight - torch.Size([256, 64, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer1.2.bn3.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer1.2.bn3.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer2.0.conv1.weight - torch.Size([128, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer2.0.bn1.weight - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer2.0.bn1.bias - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer2.0.conv2.weight - torch.Size([128, 128, 3, 3]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer2.0.bn2.weight - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer2.0.bn2.bias - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer2.0.conv3.weight - torch.Size([512, 128, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer2.0.bn3.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer2.0.bn3.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer2.0.downsample.0.weight - torch.Size([512, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer2.0.downsample.1.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer2.0.downsample.1.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer2.1.conv1.weight - torch.Size([128, 512, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer2.1.bn1.weight - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer2.1.bn1.bias - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer2.1.conv2.weight - torch.Size([128, 128, 3, 3]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer2.1.bn2.weight - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer2.1.bn2.bias - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer2.1.conv3.weight - torch.Size([512, 128, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer2.1.bn3.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer2.1.bn3.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer2.2.conv1.weight - torch.Size([128, 512, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer2.2.bn1.weight - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer2.2.bn1.bias - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer2.2.conv2.weight - torch.Size([128, 128, 3, 3]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer2.2.bn2.weight - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer2.2.bn2.bias - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer2.2.conv3.weight - torch.Size([512, 128, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer2.2.bn3.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer2.2.bn3.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer2.3.conv1.weight - torch.Size([128, 512, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer2.3.bn1.weight - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer2.3.bn1.bias - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer2.3.conv2.weight - torch.Size([128, 128, 3, 3]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer2.3.bn2.weight - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer2.3.bn2.bias - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer2.3.conv3.weight - torch.Size([512, 128, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer2.3.bn3.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer2.3.bn3.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.0.conv1.weight - torch.Size([256, 512, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.0.bn1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.0.bn1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.0.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.0.bn2.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.0.bn2.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.0.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.0.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.0.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.0.downsample.0.weight - torch.Size([1024, 512, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.0.downsample.1.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.0.downsample.1.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.1.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.1.bn1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.1.bn1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.1.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.1.bn2.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.1.bn2.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.1.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.1.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.1.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.2.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.2.bn1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.2.bn1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.2.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.2.bn2.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.2.bn2.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.2.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.2.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.2.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.3.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.3.bn1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.3.bn1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.3.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.3.bn2.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.3.bn2.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.3.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.3.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.3.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.4.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.4.bn1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.4.bn1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.4.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.4.bn2.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.4.bn2.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.4.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.4.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.4.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.5.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.5.bn1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.5.bn1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.5.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.5.bn2.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.5.bn2.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.5.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.5.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.5.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.6.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.6.bn1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.6.bn1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.6.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.6.bn2.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.6.bn2.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.6.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.6.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.6.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.7.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.7.bn1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.7.bn1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.7.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.7.bn2.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.7.bn2.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.7.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.7.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.7.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.8.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.8.bn1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.8.bn1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.8.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.8.bn2.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.8.bn2.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.8.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.8.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.8.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.9.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.9.bn1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.9.bn1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.9.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.9.bn2.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.9.bn2.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.9.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.9.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.9.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.10.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.10.bn1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.10.bn1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.10.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.10.bn2.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.10.bn2.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.10.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.10.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.10.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.11.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.11.bn1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.11.bn1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.11.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.11.bn2.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.11.bn2.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.11.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.11.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.11.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.12.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.12.bn1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.12.bn1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.12.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.12.bn2.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.12.bn2.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.12.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.12.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.12.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.13.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.13.bn1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.13.bn1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.13.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.13.bn2.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.13.bn2.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.13.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.13.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.13.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.14.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.14.bn1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.14.bn1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.14.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.14.bn2.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.14.bn2.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.14.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.14.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.14.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.15.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.15.bn1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.15.bn1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.15.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.15.bn2.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.15.bn2.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.15.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.15.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.15.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.16.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.16.bn1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.16.bn1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.16.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.16.bn2.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.16.bn2.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.16.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.16.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.16.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.17.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.17.bn1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.17.bn1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.17.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.17.bn2.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.17.bn2.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.17.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.17.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.17.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.18.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.18.bn1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.18.bn1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.18.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.18.bn2.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.18.bn2.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.18.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.18.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.18.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.19.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.19.bn1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.19.bn1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.19.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.19.bn2.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.19.bn2.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.19.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.19.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.19.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.20.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.20.bn1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.20.bn1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.20.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.20.bn2.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.20.bn2.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.20.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.20.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.20.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.21.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.21.bn1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.21.bn1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.21.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.21.bn2.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.21.bn2.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.21.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.21.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.21.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.22.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.22.bn1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.22.bn1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.22.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.22.bn2.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.22.bn2.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.22.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.22.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.22.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer4.0.conv1.weight - torch.Size([512, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer4.0.bn1.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer4.0.bn1.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer4.0.conv2.weight - torch.Size([512, 512, 3, 3]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer4.0.bn2.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer4.0.bn2.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer4.0.conv3.weight - torch.Size([2048, 512, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer4.0.bn3.weight - torch.Size([2048]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer4.0.bn3.bias - torch.Size([2048]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer4.0.downsample.0.weight - torch.Size([2048, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer4.0.downsample.1.weight - torch.Size([2048]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer4.0.downsample.1.bias - torch.Size([2048]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer4.1.conv1.weight - torch.Size([512, 2048, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer4.1.bn1.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer4.1.bn1.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer4.1.conv2.weight - torch.Size([512, 512, 3, 3]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer4.1.bn2.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer4.1.bn2.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer4.1.conv3.weight - torch.Size([2048, 512, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer4.1.bn3.weight - torch.Size([2048]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer4.1.bn3.bias - torch.Size([2048]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer4.2.conv1.weight - torch.Size([512, 2048, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer4.2.bn1.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer4.2.bn1.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer4.2.conv2.weight - torch.Size([512, 512, 3, 3]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer4.2.bn2.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer4.2.bn2.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer4.2.conv3.weight - torch.Size([2048, 512, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer4.2.bn3.weight - torch.Size([2048]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer4.2.bn3.bias - torch.Size([2048]): 
PretrainedInit: load from torchvision://resnet101 

neck.lateral_convs.0.conv.weight - torch.Size([256, 256, 1, 1]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.lateral_convs.0.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

neck.lateral_convs.1.conv.weight - torch.Size([256, 512, 1, 1]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.lateral_convs.1.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

neck.lateral_convs.2.conv.weight - torch.Size([256, 1024, 1, 1]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.lateral_convs.2.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

neck.lateral_convs.3.conv.weight - torch.Size([256, 2048, 1, 1]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.lateral_convs.3.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

neck.fpn_convs.0.conv.weight - torch.Size([256, 256, 3, 3]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.fpn_convs.0.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

neck.fpn_convs.1.conv.weight - torch.Size([256, 256, 3, 3]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.fpn_convs.1.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

neck.fpn_convs.2.conv.weight - torch.Size([256, 256, 3, 3]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.fpn_convs.2.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

neck.fpn_convs.3.conv.weight - torch.Size([256, 256, 3, 3]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.fpn_convs.3.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

rpn_head.init_proposal_bboxes.weight - torch.Size([300, 4]): 
Initialized by user-defined `init_weights` in GlobalEmbeddingRPNHead  

rpn_head.init_proposal_features.weight - torch.Size([300, 256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

rpn_head.global_features_embed.weight - torch.Size([7, 256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.0.fc_cls.weight - torch.Size([2, 256]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.0.fc_cls.bias - torch.Size([2]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.0.fc_reg.weight - torch.Size([4, 256]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.0.fc_reg.bias - torch.Size([4]): 
NormalInit: mean=0, std=0.001, bias=0 

roi_head.bbox_head.0.attention.attn.in_proj_weight - torch.Size([768, 256]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.0.attention.attn.in_proj_bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.0.attention.attn.out_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.0.attention.attn.out_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.0.attention_norm.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.0.attention_norm.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.0.global_attention.attn.in_proj_weight - torch.Size([768, 256]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.0.global_attention.attn.in_proj_bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.0.global_attention.attn.out_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.0.global_attention.attn.out_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.0.global_attention_norm.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.0.global_attention_norm.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.0.instance_interactive_conv.dynamic_layer.weight - torch.Size([32768, 256]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.0.instance_interactive_conv.dynamic_layer.bias - torch.Size([32768]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.0.instance_interactive_conv.norm_in.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.0.instance_interactive_conv.norm_in.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.0.instance_interactive_conv.norm_out.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.0.instance_interactive_conv.norm_out.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.0.instance_interactive_conv.fc_layer.weight - torch.Size([256, 12544]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.0.instance_interactive_conv.fc_layer.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.0.instance_interactive_conv.fc_norm.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.0.instance_interactive_conv.fc_norm.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.0.instance_interactive_conv_norm.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.0.instance_interactive_conv_norm.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.0.ffn.layers.0.0.weight - torch.Size([2048, 256]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.0.ffn.layers.0.0.bias - torch.Size([2048]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.0.ffn.layers.1.weight - torch.Size([256, 2048]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.0.ffn.layers.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.0.ffn_norm.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.0.ffn_norm.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.0.global_ffn.layers.0.0.weight - torch.Size([2048, 256]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.0.global_ffn.layers.0.0.bias - torch.Size([2048]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.0.global_ffn.layers.1.weight - torch.Size([256, 2048]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.0.global_ffn.layers.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.0.global_ffn_norm.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.0.global_ffn_norm.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.0.cls_fcs.0.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.0.cls_fcs.1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.0.cls_fcs.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.0.cls_fcs.3.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.0.cls_fcs.4.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.0.cls_fcs.4.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.0.reg_fcs.0.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.0.reg_fcs.1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.0.reg_fcs.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.0.reg_fcs.3.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.0.reg_fcs.4.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.0.reg_fcs.4.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.0.reg_fcs.6.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.0.reg_fcs.7.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.0.reg_fcs.7.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.0.glb_fcs.0.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.0.glb_fcs.1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.0.glb_fcs.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.0.glb_fcs.3.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.0.glb_fcs.4.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.0.glb_fcs.4.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.0.fc_glb.weight - torch.Size([2, 256]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.0.fc_glb.bias - torch.Size([2]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.1.fc_cls.weight - torch.Size([2, 256]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.1.fc_cls.bias - torch.Size([2]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.1.fc_reg.weight - torch.Size([4, 256]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.1.fc_reg.bias - torch.Size([4]): 
NormalInit: mean=0, std=0.001, bias=0 

roi_head.bbox_head.1.attention.attn.in_proj_weight - torch.Size([768, 256]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.1.attention.attn.in_proj_bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.1.attention.attn.out_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.1.attention.attn.out_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.1.attention_norm.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.1.attention_norm.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.1.global_attention.attn.in_proj_weight - torch.Size([768, 256]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.1.global_attention.attn.in_proj_bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.1.global_attention.attn.out_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.1.global_attention.attn.out_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.1.global_attention_norm.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.1.global_attention_norm.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.1.instance_interactive_conv.dynamic_layer.weight - torch.Size([32768, 256]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.1.instance_interactive_conv.dynamic_layer.bias - torch.Size([32768]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.1.instance_interactive_conv.norm_in.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.1.instance_interactive_conv.norm_in.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.1.instance_interactive_conv.norm_out.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.1.instance_interactive_conv.norm_out.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.1.instance_interactive_conv.fc_layer.weight - torch.Size([256, 12544]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.1.instance_interactive_conv.fc_layer.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.1.instance_interactive_conv.fc_norm.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.1.instance_interactive_conv.fc_norm.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.1.instance_interactive_conv_norm.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.1.instance_interactive_conv_norm.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.1.ffn.layers.0.0.weight - torch.Size([2048, 256]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.1.ffn.layers.0.0.bias - torch.Size([2048]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.1.ffn.layers.1.weight - torch.Size([256, 2048]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.1.ffn.layers.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.1.ffn_norm.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.1.ffn_norm.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.1.global_ffn.layers.0.0.weight - torch.Size([2048, 256]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.1.global_ffn.layers.0.0.bias - torch.Size([2048]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.1.global_ffn.layers.1.weight - torch.Size([256, 2048]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.1.global_ffn.layers.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.1.global_ffn_norm.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.1.global_ffn_norm.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.1.cls_fcs.0.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.1.cls_fcs.1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.1.cls_fcs.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.1.cls_fcs.3.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.1.cls_fcs.4.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.1.cls_fcs.4.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.1.reg_fcs.0.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.1.reg_fcs.1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.1.reg_fcs.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.1.reg_fcs.3.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.1.reg_fcs.4.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.1.reg_fcs.4.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.1.reg_fcs.6.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.1.reg_fcs.7.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.1.reg_fcs.7.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.1.glb_fcs.0.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.1.glb_fcs.1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.1.glb_fcs.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.1.glb_fcs.3.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.1.glb_fcs.4.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.1.glb_fcs.4.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.1.fc_glb.weight - torch.Size([2, 256]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.1.fc_glb.bias - torch.Size([2]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.2.fc_cls.weight - torch.Size([2, 256]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.2.fc_cls.bias - torch.Size([2]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.2.fc_reg.weight - torch.Size([4, 256]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.2.fc_reg.bias - torch.Size([4]): 
NormalInit: mean=0, std=0.001, bias=0 

roi_head.bbox_head.2.attention.attn.in_proj_weight - torch.Size([768, 256]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.2.attention.attn.in_proj_bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.2.attention.attn.out_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.2.attention.attn.out_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.2.attention_norm.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.2.attention_norm.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.2.global_attention.attn.in_proj_weight - torch.Size([768, 256]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.2.global_attention.attn.in_proj_bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.2.global_attention.attn.out_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.2.global_attention.attn.out_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.2.global_attention_norm.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.2.global_attention_norm.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.2.instance_interactive_conv.dynamic_layer.weight - torch.Size([32768, 256]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.2.instance_interactive_conv.dynamic_layer.bias - torch.Size([32768]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.2.instance_interactive_conv.norm_in.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.2.instance_interactive_conv.norm_in.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.2.instance_interactive_conv.norm_out.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.2.instance_interactive_conv.norm_out.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.2.instance_interactive_conv.fc_layer.weight - torch.Size([256, 12544]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.2.instance_interactive_conv.fc_layer.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.2.instance_interactive_conv.fc_norm.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.2.instance_interactive_conv.fc_norm.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.2.instance_interactive_conv_norm.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.2.instance_interactive_conv_norm.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.2.ffn.layers.0.0.weight - torch.Size([2048, 256]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.2.ffn.layers.0.0.bias - torch.Size([2048]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.2.ffn.layers.1.weight - torch.Size([256, 2048]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.2.ffn.layers.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.2.ffn_norm.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.2.ffn_norm.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.2.global_ffn.layers.0.0.weight - torch.Size([2048, 256]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.2.global_ffn.layers.0.0.bias - torch.Size([2048]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.2.global_ffn.layers.1.weight - torch.Size([256, 2048]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.2.global_ffn.layers.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.2.global_ffn_norm.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.2.global_ffn_norm.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.2.cls_fcs.0.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.2.cls_fcs.1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.2.cls_fcs.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.2.cls_fcs.3.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.2.cls_fcs.4.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.2.cls_fcs.4.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.2.reg_fcs.0.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.2.reg_fcs.1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.2.reg_fcs.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.2.reg_fcs.3.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.2.reg_fcs.4.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.2.reg_fcs.4.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.2.reg_fcs.6.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.2.reg_fcs.7.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.2.reg_fcs.7.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.2.glb_fcs.0.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.2.glb_fcs.1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.2.glb_fcs.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.2.glb_fcs.3.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.2.glb_fcs.4.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.2.glb_fcs.4.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.2.fc_glb.weight - torch.Size([2, 256]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.2.fc_glb.bias - torch.Size([2]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.3.fc_cls.weight - torch.Size([2, 256]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.3.fc_cls.bias - torch.Size([2]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.3.fc_reg.weight - torch.Size([4, 256]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.3.fc_reg.bias - torch.Size([4]): 
NormalInit: mean=0, std=0.001, bias=0 

roi_head.bbox_head.3.attention.attn.in_proj_weight - torch.Size([768, 256]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.3.attention.attn.in_proj_bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.3.attention.attn.out_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.3.attention.attn.out_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.3.attention_norm.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.3.attention_norm.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.3.global_attention.attn.in_proj_weight - torch.Size([768, 256]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.3.global_attention.attn.in_proj_bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.3.global_attention.attn.out_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.3.global_attention.attn.out_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.3.global_attention_norm.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.3.global_attention_norm.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.3.instance_interactive_conv.dynamic_layer.weight - torch.Size([32768, 256]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.3.instance_interactive_conv.dynamic_layer.bias - torch.Size([32768]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.3.instance_interactive_conv.norm_in.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.3.instance_interactive_conv.norm_in.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.3.instance_interactive_conv.norm_out.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.3.instance_interactive_conv.norm_out.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.3.instance_interactive_conv.fc_layer.weight - torch.Size([256, 12544]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.3.instance_interactive_conv.fc_layer.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.3.instance_interactive_conv.fc_norm.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.3.instance_interactive_conv.fc_norm.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.3.instance_interactive_conv_norm.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.3.instance_interactive_conv_norm.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.3.ffn.layers.0.0.weight - torch.Size([2048, 256]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.3.ffn.layers.0.0.bias - torch.Size([2048]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.3.ffn.layers.1.weight - torch.Size([256, 2048]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.3.ffn.layers.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.3.ffn_norm.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.3.ffn_norm.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.3.global_ffn.layers.0.0.weight - torch.Size([2048, 256]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.3.global_ffn.layers.0.0.bias - torch.Size([2048]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.3.global_ffn.layers.1.weight - torch.Size([256, 2048]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.3.global_ffn.layers.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.3.global_ffn_norm.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.3.global_ffn_norm.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.3.cls_fcs.0.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.3.cls_fcs.1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.3.cls_fcs.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.3.cls_fcs.3.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.3.cls_fcs.4.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.3.cls_fcs.4.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.3.reg_fcs.0.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.3.reg_fcs.1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.3.reg_fcs.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.3.reg_fcs.3.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.3.reg_fcs.4.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.3.reg_fcs.4.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.3.reg_fcs.6.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.3.reg_fcs.7.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.3.reg_fcs.7.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.3.glb_fcs.0.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.3.glb_fcs.1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.3.glb_fcs.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.3.glb_fcs.3.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.3.glb_fcs.4.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.3.glb_fcs.4.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.3.fc_glb.weight - torch.Size([2, 256]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.3.fc_glb.bias - torch.Size([2]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.4.fc_cls.weight - torch.Size([2, 256]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.4.fc_cls.bias - torch.Size([2]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.4.fc_reg.weight - torch.Size([4, 256]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.4.fc_reg.bias - torch.Size([4]): 
NormalInit: mean=0, std=0.001, bias=0 

roi_head.bbox_head.4.attention.attn.in_proj_weight - torch.Size([768, 256]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.4.attention.attn.in_proj_bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.4.attention.attn.out_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.4.attention.attn.out_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.4.attention_norm.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.4.attention_norm.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.4.global_attention.attn.in_proj_weight - torch.Size([768, 256]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.4.global_attention.attn.in_proj_bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.4.global_attention.attn.out_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.4.global_attention.attn.out_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.4.global_attention_norm.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.4.global_attention_norm.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.4.instance_interactive_conv.dynamic_layer.weight - torch.Size([32768, 256]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.4.instance_interactive_conv.dynamic_layer.bias - torch.Size([32768]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.4.instance_interactive_conv.norm_in.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.4.instance_interactive_conv.norm_in.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.4.instance_interactive_conv.norm_out.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.4.instance_interactive_conv.norm_out.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.4.instance_interactive_conv.fc_layer.weight - torch.Size([256, 12544]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.4.instance_interactive_conv.fc_layer.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.4.instance_interactive_conv.fc_norm.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.4.instance_interactive_conv.fc_norm.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.4.instance_interactive_conv_norm.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.4.instance_interactive_conv_norm.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.4.ffn.layers.0.0.weight - torch.Size([2048, 256]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.4.ffn.layers.0.0.bias - torch.Size([2048]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.4.ffn.layers.1.weight - torch.Size([256, 2048]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.4.ffn.layers.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.4.ffn_norm.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.4.ffn_norm.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.4.global_ffn.layers.0.0.weight - torch.Size([2048, 256]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.4.global_ffn.layers.0.0.bias - torch.Size([2048]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.4.global_ffn.layers.1.weight - torch.Size([256, 2048]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.4.global_ffn.layers.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.4.global_ffn_norm.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.4.global_ffn_norm.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.4.cls_fcs.0.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.4.cls_fcs.1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.4.cls_fcs.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.4.cls_fcs.3.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.4.cls_fcs.4.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.4.cls_fcs.4.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.4.reg_fcs.0.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.4.reg_fcs.1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.4.reg_fcs.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.4.reg_fcs.3.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.4.reg_fcs.4.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.4.reg_fcs.4.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.4.reg_fcs.6.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.4.reg_fcs.7.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.4.reg_fcs.7.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.4.glb_fcs.0.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.4.glb_fcs.1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.4.glb_fcs.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.4.glb_fcs.3.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.4.glb_fcs.4.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.4.glb_fcs.4.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.4.fc_glb.weight - torch.Size([2, 256]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.4.fc_glb.bias - torch.Size([2]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.5.fc_cls.weight - torch.Size([2, 256]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.5.fc_cls.bias - torch.Size([2]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.5.fc_reg.weight - torch.Size([4, 256]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.5.fc_reg.bias - torch.Size([4]): 
NormalInit: mean=0, std=0.001, bias=0 

roi_head.bbox_head.5.attention.attn.in_proj_weight - torch.Size([768, 256]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.5.attention.attn.in_proj_bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.5.attention.attn.out_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.5.attention.attn.out_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.5.attention_norm.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.5.attention_norm.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.5.global_attention.attn.in_proj_weight - torch.Size([768, 256]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.5.global_attention.attn.in_proj_bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.5.global_attention.attn.out_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.5.global_attention.attn.out_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.5.global_attention_norm.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.5.global_attention_norm.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.5.instance_interactive_conv.dynamic_layer.weight - torch.Size([32768, 256]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.5.instance_interactive_conv.dynamic_layer.bias - torch.Size([32768]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.5.instance_interactive_conv.norm_in.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.5.instance_interactive_conv.norm_in.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.5.instance_interactive_conv.norm_out.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.5.instance_interactive_conv.norm_out.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.5.instance_interactive_conv.fc_layer.weight - torch.Size([256, 12544]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.5.instance_interactive_conv.fc_layer.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.5.instance_interactive_conv.fc_norm.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.5.instance_interactive_conv.fc_norm.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.5.instance_interactive_conv_norm.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.5.instance_interactive_conv_norm.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.5.ffn.layers.0.0.weight - torch.Size([2048, 256]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.5.ffn.layers.0.0.bias - torch.Size([2048]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.5.ffn.layers.1.weight - torch.Size([256, 2048]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.5.ffn.layers.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.5.ffn_norm.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.5.ffn_norm.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.5.global_ffn.layers.0.0.weight - torch.Size([2048, 256]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.5.global_ffn.layers.0.0.bias - torch.Size([2048]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.5.global_ffn.layers.1.weight - torch.Size([256, 2048]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.5.global_ffn.layers.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.5.global_ffn_norm.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.5.global_ffn_norm.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.5.cls_fcs.0.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.5.cls_fcs.1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.5.cls_fcs.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.5.cls_fcs.3.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.5.cls_fcs.4.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.5.cls_fcs.4.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.5.reg_fcs.0.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.5.reg_fcs.1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.5.reg_fcs.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.5.reg_fcs.3.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.5.reg_fcs.4.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.5.reg_fcs.4.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.5.reg_fcs.6.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.5.reg_fcs.7.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.5.reg_fcs.7.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.5.glb_fcs.0.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.5.glb_fcs.1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.5.glb_fcs.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.5.glb_fcs.3.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.5.glb_fcs.4.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.5.glb_fcs.4.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.5.fc_glb.weight - torch.Size([2, 256]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.5.fc_glb.bias - torch.Size([2]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.0.convs.0.conv.weight - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.0.convs.0.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.0.convs.0.bn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.0.convs.0.bn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.0.convs.1.conv.weight - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.0.convs.1.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.0.convs.1.bn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.0.convs.1.bn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.0.convs.2.conv.weight - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.0.convs.2.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.0.convs.2.bn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.0.convs.2.bn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.0.convs.3.conv.weight - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.0.convs.3.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.0.convs.3.bn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.0.convs.3.bn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.0.upsample.weight - torch.Size([256, 256, 2, 2]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.0.upsample.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.0.conv_logits.weight - torch.Size([2, 256, 1, 1]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.0.conv_logits.bias - torch.Size([2]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.0.instance_interactive_conv.dynamic_layer.weight - torch.Size([32768, 256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.0.instance_interactive_conv.dynamic_layer.bias - torch.Size([32768]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.0.instance_interactive_conv.norm_in.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.0.instance_interactive_conv.norm_in.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.0.instance_interactive_conv.norm_out.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.0.instance_interactive_conv.norm_out.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.1.convs.0.conv.weight - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.1.convs.0.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.1.convs.0.bn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.1.convs.0.bn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.1.convs.1.conv.weight - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.1.convs.1.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.1.convs.1.bn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.1.convs.1.bn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.1.convs.2.conv.weight - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.1.convs.2.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.1.convs.2.bn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.1.convs.2.bn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.1.convs.3.conv.weight - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.1.convs.3.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.1.convs.3.bn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.1.convs.3.bn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.1.upsample.weight - torch.Size([256, 256, 2, 2]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.1.upsample.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.1.conv_logits.weight - torch.Size([2, 256, 1, 1]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.1.conv_logits.bias - torch.Size([2]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.1.instance_interactive_conv.dynamic_layer.weight - torch.Size([32768, 256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.1.instance_interactive_conv.dynamic_layer.bias - torch.Size([32768]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.1.instance_interactive_conv.norm_in.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.1.instance_interactive_conv.norm_in.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.1.instance_interactive_conv.norm_out.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.1.instance_interactive_conv.norm_out.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.2.convs.0.conv.weight - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.2.convs.0.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.2.convs.0.bn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.2.convs.0.bn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.2.convs.1.conv.weight - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.2.convs.1.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.2.convs.1.bn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.2.convs.1.bn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.2.convs.2.conv.weight - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.2.convs.2.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.2.convs.2.bn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.2.convs.2.bn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.2.convs.3.conv.weight - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.2.convs.3.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.2.convs.3.bn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.2.convs.3.bn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.2.upsample.weight - torch.Size([256, 256, 2, 2]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.2.upsample.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.2.conv_logits.weight - torch.Size([2, 256, 1, 1]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.2.conv_logits.bias - torch.Size([2]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.2.instance_interactive_conv.dynamic_layer.weight - torch.Size([32768, 256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.2.instance_interactive_conv.dynamic_layer.bias - torch.Size([32768]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.2.instance_interactive_conv.norm_in.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.2.instance_interactive_conv.norm_in.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.2.instance_interactive_conv.norm_out.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.2.instance_interactive_conv.norm_out.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.3.convs.0.conv.weight - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.3.convs.0.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.3.convs.0.bn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.3.convs.0.bn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.3.convs.1.conv.weight - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.3.convs.1.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.3.convs.1.bn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.3.convs.1.bn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.3.convs.2.conv.weight - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.3.convs.2.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.3.convs.2.bn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.3.convs.2.bn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.3.convs.3.conv.weight - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.3.convs.3.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.3.convs.3.bn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.3.convs.3.bn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.3.upsample.weight - torch.Size([256, 256, 2, 2]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.3.upsample.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.3.conv_logits.weight - torch.Size([2, 256, 1, 1]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.3.conv_logits.bias - torch.Size([2]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.3.instance_interactive_conv.dynamic_layer.weight - torch.Size([32768, 256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.3.instance_interactive_conv.dynamic_layer.bias - torch.Size([32768]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.3.instance_interactive_conv.norm_in.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.3.instance_interactive_conv.norm_in.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.3.instance_interactive_conv.norm_out.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.3.instance_interactive_conv.norm_out.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.4.convs.0.conv.weight - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.4.convs.0.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.4.convs.0.bn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.4.convs.0.bn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.4.convs.1.conv.weight - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.4.convs.1.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.4.convs.1.bn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.4.convs.1.bn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.4.convs.2.conv.weight - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.4.convs.2.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.4.convs.2.bn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.4.convs.2.bn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.4.convs.3.conv.weight - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.4.convs.3.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.4.convs.3.bn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.4.convs.3.bn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.4.upsample.weight - torch.Size([256, 256, 2, 2]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.4.upsample.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.4.conv_logits.weight - torch.Size([2, 256, 1, 1]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.4.conv_logits.bias - torch.Size([2]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.4.instance_interactive_conv.dynamic_layer.weight - torch.Size([32768, 256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.4.instance_interactive_conv.dynamic_layer.bias - torch.Size([32768]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.4.instance_interactive_conv.norm_in.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.4.instance_interactive_conv.norm_in.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.4.instance_interactive_conv.norm_out.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.4.instance_interactive_conv.norm_out.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.5.convs.0.conv.weight - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.5.convs.0.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.5.convs.0.bn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.5.convs.0.bn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.5.convs.1.conv.weight - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.5.convs.1.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.5.convs.1.bn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.5.convs.1.bn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.5.convs.2.conv.weight - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.5.convs.2.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.5.convs.2.bn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.5.convs.2.bn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.5.convs.3.conv.weight - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.5.convs.3.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.5.convs.3.bn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.5.convs.3.bn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.5.upsample.weight - torch.Size([256, 256, 2, 2]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.5.upsample.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.5.conv_logits.weight - torch.Size([2, 256, 1, 1]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.5.conv_logits.bias - torch.Size([2]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.5.instance_interactive_conv.dynamic_layer.weight - torch.Size([32768, 256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.5.instance_interactive_conv.dynamic_layer.bias - torch.Size([32768]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.5.instance_interactive_conv.norm_in.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.5.instance_interactive_conv.norm_in.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.5.instance_interactive_conv.norm_out.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.5.instance_interactive_conv.norm_out.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  
2021-12-29 17:38:22,869 - mmdet - INFO - load checkpoint from local path: work_dirs/pretrained/queryInst/queryinst_r101_300_queries-860dc5d5.pth
2021-12-29 17:38:23,800 - mmdet - WARNING - The model and loaded state dict do not match exactly

size mismatch for roi_head.bbox_head.0.fc_cls.weight: copying a param with shape torch.Size([80, 256]) from checkpoint, the shape in current model is torch.Size([2, 256]).
size mismatch for roi_head.bbox_head.0.fc_cls.bias: copying a param with shape torch.Size([80]) from checkpoint, the shape in current model is torch.Size([2]).
size mismatch for roi_head.bbox_head.1.fc_cls.weight: copying a param with shape torch.Size([80, 256]) from checkpoint, the shape in current model is torch.Size([2, 256]).
size mismatch for roi_head.bbox_head.1.fc_cls.bias: copying a param with shape torch.Size([80]) from checkpoint, the shape in current model is torch.Size([2]).
size mismatch for roi_head.bbox_head.2.fc_cls.weight: copying a param with shape torch.Size([80, 256]) from checkpoint, the shape in current model is torch.Size([2, 256]).
size mismatch for roi_head.bbox_head.2.fc_cls.bias: copying a param with shape torch.Size([80]) from checkpoint, the shape in current model is torch.Size([2]).
size mismatch for roi_head.bbox_head.3.fc_cls.weight: copying a param with shape torch.Size([80, 256]) from checkpoint, the shape in current model is torch.Size([2, 256]).
size mismatch for roi_head.bbox_head.3.fc_cls.bias: copying a param with shape torch.Size([80]) from checkpoint, the shape in current model is torch.Size([2]).
size mismatch for roi_head.bbox_head.4.fc_cls.weight: copying a param with shape torch.Size([80, 256]) from checkpoint, the shape in current model is torch.Size([2, 256]).
size mismatch for roi_head.bbox_head.4.fc_cls.bias: copying a param with shape torch.Size([80]) from checkpoint, the shape in current model is torch.Size([2]).
size mismatch for roi_head.bbox_head.5.fc_cls.weight: copying a param with shape torch.Size([80, 256]) from checkpoint, the shape in current model is torch.Size([2, 256]).
size mismatch for roi_head.bbox_head.5.fc_cls.bias: copying a param with shape torch.Size([80]) from checkpoint, the shape in current model is torch.Size([2]).
size mismatch for roi_head.mask_head.0.conv_logits.weight: copying a param with shape torch.Size([80, 256, 1, 1]) from checkpoint, the shape in current model is torch.Size([2, 256, 1, 1]).
size mismatch for roi_head.mask_head.0.conv_logits.bias: copying a param with shape torch.Size([80]) from checkpoint, the shape in current model is torch.Size([2]).
size mismatch for roi_head.mask_head.1.conv_logits.weight: copying a param with shape torch.Size([80, 256, 1, 1]) from checkpoint, the shape in current model is torch.Size([2, 256, 1, 1]).
size mismatch for roi_head.mask_head.1.conv_logits.bias: copying a param with shape torch.Size([80]) from checkpoint, the shape in current model is torch.Size([2]).
size mismatch for roi_head.mask_head.2.conv_logits.weight: copying a param with shape torch.Size([80, 256, 1, 1]) from checkpoint, the shape in current model is torch.Size([2, 256, 1, 1]).
size mismatch for roi_head.mask_head.2.conv_logits.bias: copying a param with shape torch.Size([80]) from checkpoint, the shape in current model is torch.Size([2]).
size mismatch for roi_head.mask_head.3.conv_logits.weight: copying a param with shape torch.Size([80, 256, 1, 1]) from checkpoint, the shape in current model is torch.Size([2, 256, 1, 1]).
size mismatch for roi_head.mask_head.3.conv_logits.bias: copying a param with shape torch.Size([80]) from checkpoint, the shape in current model is torch.Size([2]).
size mismatch for roi_head.mask_head.4.conv_logits.weight: copying a param with shape torch.Size([80, 256, 1, 1]) from checkpoint, the shape in current model is torch.Size([2, 256, 1, 1]).
size mismatch for roi_head.mask_head.4.conv_logits.bias: copying a param with shape torch.Size([80]) from checkpoint, the shape in current model is torch.Size([2]).
size mismatch for roi_head.mask_head.5.conv_logits.weight: copying a param with shape torch.Size([80, 256, 1, 1]) from checkpoint, the shape in current model is torch.Size([2, 256, 1, 1]).
size mismatch for roi_head.mask_head.5.conv_logits.bias: copying a param with shape torch.Size([80]) from checkpoint, the shape in current model is torch.Size([2]).
missing keys in source state_dict: rpn_head.global_features_embed.weight, roi_head.bbox_head.0.global_attention.attn.in_proj_weight, roi_head.bbox_head.0.global_attention.attn.in_proj_bias, roi_head.bbox_head.0.global_attention.attn.out_proj.weight, roi_head.bbox_head.0.global_attention.attn.out_proj.bias, roi_head.bbox_head.0.global_attention_norm.weight, roi_head.bbox_head.0.global_attention_norm.bias, roi_head.bbox_head.0.global_ffn.layers.0.0.weight, roi_head.bbox_head.0.global_ffn.layers.0.0.bias, roi_head.bbox_head.0.global_ffn.layers.1.weight, roi_head.bbox_head.0.global_ffn.layers.1.bias, roi_head.bbox_head.0.global_ffn_norm.weight, roi_head.bbox_head.0.global_ffn_norm.bias, roi_head.bbox_head.0.cls_fcs.3.weight, roi_head.bbox_head.0.cls_fcs.4.weight, roi_head.bbox_head.0.cls_fcs.4.bias, roi_head.bbox_head.0.glb_fcs.0.weight, roi_head.bbox_head.0.glb_fcs.1.weight, roi_head.bbox_head.0.glb_fcs.1.bias, roi_head.bbox_head.0.glb_fcs.3.weight, roi_head.bbox_head.0.glb_fcs.4.weight, roi_head.bbox_head.0.glb_fcs.4.bias, roi_head.bbox_head.0.fc_glb.weight, roi_head.bbox_head.0.fc_glb.bias, roi_head.bbox_head.1.global_attention.attn.in_proj_weight, roi_head.bbox_head.1.global_attention.attn.in_proj_bias, roi_head.bbox_head.1.global_attention.attn.out_proj.weight, roi_head.bbox_head.1.global_attention.attn.out_proj.bias, roi_head.bbox_head.1.global_attention_norm.weight, roi_head.bbox_head.1.global_attention_norm.bias, roi_head.bbox_head.1.global_ffn.layers.0.0.weight, roi_head.bbox_head.1.global_ffn.layers.0.0.bias, roi_head.bbox_head.1.global_ffn.layers.1.weight, roi_head.bbox_head.1.global_ffn.layers.1.bias, roi_head.bbox_head.1.global_ffn_norm.weight, roi_head.bbox_head.1.global_ffn_norm.bias, roi_head.bbox_head.1.cls_fcs.3.weight, roi_head.bbox_head.1.cls_fcs.4.weight, roi_head.bbox_head.1.cls_fcs.4.bias, roi_head.bbox_head.1.glb_fcs.0.weight, roi_head.bbox_head.1.glb_fcs.1.weight, roi_head.bbox_head.1.glb_fcs.1.bias, roi_head.bbox_head.1.glb_fcs.3.weight, roi_head.bbox_head.1.glb_fcs.4.weight, roi_head.bbox_head.1.glb_fcs.4.bias, roi_head.bbox_head.1.fc_glb.weight, roi_head.bbox_head.1.fc_glb.bias, roi_head.bbox_head.2.global_attention.attn.in_proj_weight, roi_head.bbox_head.2.global_attention.attn.in_proj_bias, roi_head.bbox_head.2.global_attention.attn.out_proj.weight, roi_head.bbox_head.2.global_attention.attn.out_proj.bias, roi_head.bbox_head.2.global_attention_norm.weight, roi_head.bbox_head.2.global_attention_norm.bias, roi_head.bbox_head.2.global_ffn.layers.0.0.weight, roi_head.bbox_head.2.global_ffn.layers.0.0.bias, roi_head.bbox_head.2.global_ffn.layers.1.weight, roi_head.bbox_head.2.global_ffn.layers.1.bias, roi_head.bbox_head.2.global_ffn_norm.weight, roi_head.bbox_head.2.global_ffn_norm.bias, roi_head.bbox_head.2.cls_fcs.3.weight, roi_head.bbox_head.2.cls_fcs.4.weight, roi_head.bbox_head.2.cls_fcs.4.bias, roi_head.bbox_head.2.glb_fcs.0.weight, roi_head.bbox_head.2.glb_fcs.1.weight, roi_head.bbox_head.2.glb_fcs.1.bias, roi_head.bbox_head.2.glb_fcs.3.weight, roi_head.bbox_head.2.glb_fcs.4.weight, roi_head.bbox_head.2.glb_fcs.4.bias, roi_head.bbox_head.2.fc_glb.weight, roi_head.bbox_head.2.fc_glb.bias, roi_head.bbox_head.3.global_attention.attn.in_proj_weight, roi_head.bbox_head.3.global_attention.attn.in_proj_bias, roi_head.bbox_head.3.global_attention.attn.out_proj.weight, roi_head.bbox_head.3.global_attention.attn.out_proj.bias, roi_head.bbox_head.3.global_attention_norm.weight, roi_head.bbox_head.3.global_attention_norm.bias, roi_head.bbox_head.3.global_ffn.layers.0.0.weight, roi_head.bbox_head.3.global_ffn.layers.0.0.bias, roi_head.bbox_head.3.global_ffn.layers.1.weight, roi_head.bbox_head.3.global_ffn.layers.1.bias, roi_head.bbox_head.3.global_ffn_norm.weight, roi_head.bbox_head.3.global_ffn_norm.bias, roi_head.bbox_head.3.cls_fcs.3.weight, roi_head.bbox_head.3.cls_fcs.4.weight, roi_head.bbox_head.3.cls_fcs.4.bias, roi_head.bbox_head.3.glb_fcs.0.weight, roi_head.bbox_head.3.glb_fcs.1.weight, roi_head.bbox_head.3.glb_fcs.1.bias, roi_head.bbox_head.3.glb_fcs.3.weight, roi_head.bbox_head.3.glb_fcs.4.weight, roi_head.bbox_head.3.glb_fcs.4.bias, roi_head.bbox_head.3.fc_glb.weight, roi_head.bbox_head.3.fc_glb.bias, roi_head.bbox_head.4.global_attention.attn.in_proj_weight, roi_head.bbox_head.4.global_attention.attn.in_proj_bias, roi_head.bbox_head.4.global_attention.attn.out_proj.weight, roi_head.bbox_head.4.global_attention.attn.out_proj.bias, roi_head.bbox_head.4.global_attention_norm.weight, roi_head.bbox_head.4.global_attention_norm.bias, roi_head.bbox_head.4.global_ffn.layers.0.0.weight, roi_head.bbox_head.4.global_ffn.layers.0.0.bias, roi_head.bbox_head.4.global_ffn.layers.1.weight, roi_head.bbox_head.4.global_ffn.layers.1.bias, roi_head.bbox_head.4.global_ffn_norm.weight, roi_head.bbox_head.4.global_ffn_norm.bias, roi_head.bbox_head.4.cls_fcs.3.weight, roi_head.bbox_head.4.cls_fcs.4.weight, roi_head.bbox_head.4.cls_fcs.4.bias, roi_head.bbox_head.4.glb_fcs.0.weight, roi_head.bbox_head.4.glb_fcs.1.weight, roi_head.bbox_head.4.glb_fcs.1.bias, roi_head.bbox_head.4.glb_fcs.3.weight, roi_head.bbox_head.4.glb_fcs.4.weight, roi_head.bbox_head.4.glb_fcs.4.bias, roi_head.bbox_head.4.fc_glb.weight, roi_head.bbox_head.4.fc_glb.bias, roi_head.bbox_head.5.global_attention.attn.in_proj_weight, roi_head.bbox_head.5.global_attention.attn.in_proj_bias, roi_head.bbox_head.5.global_attention.attn.out_proj.weight, roi_head.bbox_head.5.global_attention.attn.out_proj.bias, roi_head.bbox_head.5.global_attention_norm.weight, roi_head.bbox_head.5.global_attention_norm.bias, roi_head.bbox_head.5.global_ffn.layers.0.0.weight, roi_head.bbox_head.5.global_ffn.layers.0.0.bias, roi_head.bbox_head.5.global_ffn.layers.1.weight, roi_head.bbox_head.5.global_ffn.layers.1.bias, roi_head.bbox_head.5.global_ffn_norm.weight, roi_head.bbox_head.5.global_ffn_norm.bias, roi_head.bbox_head.5.cls_fcs.3.weight, roi_head.bbox_head.5.cls_fcs.4.weight, roi_head.bbox_head.5.cls_fcs.4.bias, roi_head.bbox_head.5.glb_fcs.0.weight, roi_head.bbox_head.5.glb_fcs.1.weight, roi_head.bbox_head.5.glb_fcs.1.bias, roi_head.bbox_head.5.glb_fcs.3.weight, roi_head.bbox_head.5.glb_fcs.4.weight, roi_head.bbox_head.5.glb_fcs.4.bias, roi_head.bbox_head.5.fc_glb.weight, roi_head.bbox_head.5.fc_glb.bias

2021-12-29 17:38:23,834 - mmdet - INFO - Start running, host: user@ubuntu, work_dir: /mnt/home1/workspace2/QueryInst/work_dirs/queryglob_usdanno514roi_B_2_7_split4
2021-12-29 17:38:23,835 - mmdet - INFO - Hooks will be executed in the following order:
before_run:
(VERY_HIGH   ) StepLrUpdaterHook                  
(NORMAL      ) CheckpointHook                     
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_train_epoch:
(VERY_HIGH   ) StepLrUpdaterHook                  
(NORMAL      ) DistSamplerSeedHook                
(NORMAL      ) NumClassCheckHook                  
(LOW         ) IterTimerHook                      
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_train_iter:
(VERY_HIGH   ) StepLrUpdaterHook                  
(LOW         ) IterTimerHook                      
 -------------------- 
after_train_iter:
(ABOVE_NORMAL) OptimizerHook                      
(NORMAL      ) CheckpointHook                     
(LOW         ) IterTimerHook                      
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
after_train_epoch:
(NORMAL      ) CheckpointHook                     
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_val_epoch:
(NORMAL      ) DistSamplerSeedHook                
(NORMAL      ) NumClassCheckHook                  
(LOW         ) IterTimerHook                      
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_val_iter:
(LOW         ) IterTimerHook                      
 -------------------- 
after_val_iter:
(LOW         ) IterTimerHook                      
 -------------------- 
after_val_epoch:
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
after_run:
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
2021-12-29 17:38:23,835 - mmdet - INFO - workflow: [('train', 1)], max: 36 epochs
2021-12-29 17:38:23,835 - mmdet - INFO - Checkpoints will be saved to /mnt/home1/workspace2/QueryInst/work_dirs/queryglob_usdanno514roi_B_2_7_split4 by HardDiskBackend.
2021-12-29 17:39:30,421 - mmdet - INFO - Epoch [1][50/53]	lr: 1.249e-06, eta: 0:41:13, time: 1.331, data_time: 0.219, memory: 8153, stage0_loss_cls: 2.8281, stage0_pos_acc: 52.0000, stage0_loss_bbox: 0.6596, stage0_loss_iou: 1.0238, stage0_loss_global: 1.2403, stage0_loss_mask: 2.5494, stage1_loss_cls: 1.9823, stage1_pos_acc: 51.2500, stage1_loss_bbox: 0.5600, stage1_loss_iou: 0.9252, stage1_loss_global: 0.7587, stage1_loss_mask: 2.6031, stage2_loss_cls: 2.2991, stage2_pos_acc: 49.7500, stage2_loss_bbox: 0.5762, stage2_loss_iou: 0.9220, stage2_loss_global: 0.6695, stage2_loss_mask: 2.5825, stage3_loss_cls: 2.2501, stage3_pos_acc: 55.7500, stage3_loss_bbox: 0.5926, stage3_loss_iou: 0.9348, stage3_loss_global: 0.7885, stage3_loss_mask: 3.0290, stage4_loss_cls: 2.1859, stage4_pos_acc: 50.5000, stage4_loss_bbox: 0.6022, stage4_loss_iou: 0.9419, stage4_loss_global: 0.8552, stage4_loss_mask: 2.8799, stage5_loss_cls: 1.8054, stage5_pos_acc: 51.2500, stage5_loss_bbox: 0.5996, stage5_loss_iou: 0.9432, stage5_loss_global: 0.7356, stage5_loss_mask: 2.5966, loss: 43.9203, grad_norm: 208.5802
2021-12-29 17:39:34,305 - mmdet - INFO - Saving checkpoint at 1 epochs
2021-12-29 17:40:48,999 - mmdet - INFO - Epoch [2][50/53]	lr: 2.572e-06, eta: 0:38:25, time: 1.299, data_time: 0.214, memory: 8153, stage0_loss_cls: 2.7402, stage0_pos_acc: 51.2500, stage0_loss_bbox: 0.5961, stage0_loss_iou: 0.9377, stage0_loss_global: 0.9196, stage0_loss_mask: 2.4379, stage1_loss_cls: 1.9353, stage1_pos_acc: 48.5000, stage1_loss_bbox: 0.4720, stage1_loss_iou: 0.7908, stage1_loss_global: 0.6270, stage1_loss_mask: 2.3495, stage2_loss_cls: 2.1426, stage2_pos_acc: 47.2500, stage2_loss_bbox: 0.4749, stage2_loss_iou: 0.7800, stage2_loss_global: 0.5769, stage2_loss_mask: 2.3841, stage3_loss_cls: 2.1449, stage3_pos_acc: 51.7500, stage3_loss_bbox: 0.4773, stage3_loss_iou: 0.7847, stage3_loss_global: 0.5775, stage3_loss_mask: 2.7691, stage4_loss_cls: 1.8528, stage4_pos_acc: 48.7500, stage4_loss_bbox: 0.4659, stage4_loss_iou: 0.7662, stage4_loss_global: 0.5836, stage4_loss_mask: 2.5991, stage5_loss_cls: 1.6129, stage5_pos_acc: 54.5000, stage5_loss_bbox: 0.4673, stage5_loss_iou: 0.7639, stage5_loss_global: 0.6209, stage5_loss_mask: 2.2923, loss: 38.9429, grad_norm: 189.6133
2021-12-29 17:40:52,750 - mmdet - INFO - Saving checkpoint at 2 epochs
2021-12-29 17:42:08,561 - mmdet - INFO - Epoch [3][50/53]	lr: 3.896e-06, eta: 0:37:11, time: 1.343, data_time: 0.218, memory: 8245, stage0_loss_cls: 2.4911, stage0_pos_acc: 45.2500, stage0_loss_bbox: 0.5720, stage0_loss_iou: 0.9213, stage0_loss_global: 0.5617, stage0_loss_mask: 2.2973, stage1_loss_cls: 1.6980, stage1_pos_acc: 50.7500, stage1_loss_bbox: 0.4307, stage1_loss_iou: 0.7357, stage1_loss_global: 0.5098, stage1_loss_mask: 2.1076, stage2_loss_cls: 1.7828, stage2_pos_acc: 48.7500, stage2_loss_bbox: 0.4032, stage2_loss_iou: 0.6803, stage2_loss_global: 0.5075, stage2_loss_mask: 2.1303, stage3_loss_cls: 1.7242, stage3_pos_acc: 53.0000, stage3_loss_bbox: 0.3951, stage3_loss_iou: 0.6632, stage3_loss_global: 0.5023, stage3_loss_mask: 2.4113, stage4_loss_cls: 1.3603, stage4_pos_acc: 65.0000, stage4_loss_bbox: 0.3882, stage4_loss_iou: 0.6575, stage4_loss_global: 0.5045, stage4_loss_mask: 2.1854, stage5_loss_cls: 1.3756, stage5_pos_acc: 59.0000, stage5_loss_bbox: 0.3719, stage5_loss_iou: 0.6453, stage5_loss_global: 0.5055, stage5_loss_mask: 1.8929, loss: 33.4126, grad_norm: 176.5249
2021-12-29 17:42:12,440 - mmdet - INFO - Saving checkpoint at 3 epochs
2021-12-29 17:43:28,397 - mmdet - INFO - Epoch [4][50/53]	lr: 5.220e-06, eta: 0:36:02, time: 1.346, data_time: 0.217, memory: 8245, stage0_loss_cls: 2.0947, stage0_pos_acc: 51.5000, stage0_loss_bbox: 0.5282, stage0_loss_iou: 0.8614, stage0_loss_global: 0.5183, stage0_loss_mask: 2.1060, stage1_loss_cls: 1.4833, stage1_pos_acc: 56.5000, stage1_loss_bbox: 0.3599, stage1_loss_iou: 0.6356, stage1_loss_global: 0.4843, stage1_loss_mask: 1.7419, stage2_loss_cls: 1.4060, stage2_pos_acc: 56.2500, stage2_loss_bbox: 0.3349, stage2_loss_iou: 0.5894, stage2_loss_global: 0.4927, stage2_loss_mask: 1.7438, stage3_loss_cls: 1.3368, stage3_pos_acc: 59.5000, stage3_loss_bbox: 0.3138, stage3_loss_iou: 0.5602, stage3_loss_global: 0.4943, stage3_loss_mask: 1.9765, stage4_loss_cls: 1.1431, stage4_pos_acc: 67.0000, stage4_loss_bbox: 0.3122, stage4_loss_iou: 0.5591, stage4_loss_global: 0.4885, stage4_loss_mask: 1.6724, stage5_loss_cls: 1.1487, stage5_pos_acc: 64.5000, stage5_loss_bbox: 0.3047, stage5_loss_iou: 0.5426, stage5_loss_global: 0.4876, stage5_loss_mask: 1.5286, loss: 28.2495, grad_norm: 141.4053
2021-12-29 17:43:32,241 - mmdet - INFO - Saving checkpoint at 4 epochs
2021-12-29 17:44:47,287 - mmdet - INFO - Epoch [5][50/53]	lr: 6.543e-06, eta: 0:34:47, time: 1.327, data_time: 0.214, memory: 8246, stage0_loss_cls: 1.6320, stage0_pos_acc: 54.2500, stage0_loss_bbox: 0.4764, stage0_loss_iou: 0.8040, stage0_loss_global: 0.5034, stage0_loss_mask: 1.8258, stage1_loss_cls: 1.3697, stage1_pos_acc: 59.5000, stage1_loss_bbox: 0.3045, stage1_loss_iou: 0.5567, stage1_loss_global: 0.4848, stage1_loss_mask: 1.4577, stage2_loss_cls: 1.2463, stage2_pos_acc: 54.2500, stage2_loss_bbox: 0.2788, stage2_loss_iou: 0.5097, stage2_loss_global: 0.4873, stage2_loss_mask: 1.4644, stage3_loss_cls: 1.1305, stage3_pos_acc: 58.2500, stage3_loss_bbox: 0.2681, stage3_loss_iou: 0.4942, stage3_loss_global: 0.4917, stage3_loss_mask: 1.6363, stage4_loss_cls: 0.9403, stage4_pos_acc: 65.0000, stage4_loss_bbox: 0.2675, stage4_loss_iou: 0.4888, stage4_loss_global: 0.4853, stage4_loss_mask: 1.4131, stage5_loss_cls: 0.8911, stage5_pos_acc: 68.2500, stage5_loss_bbox: 0.2672, stage5_loss_iou: 0.4936, stage5_loss_global: 0.4848, stage5_loss_mask: 1.2687, loss: 24.4225, grad_norm: 140.4595
2021-12-29 17:44:51,194 - mmdet - INFO - Saving checkpoint at 5 epochs
2021-12-29 17:46:06,670 - mmdet - INFO - Epoch [6][50/53]	lr: 7.867e-06, eta: 0:33:39, time: 1.339, data_time: 0.215, memory: 8246, stage0_loss_cls: 1.3698, stage0_pos_acc: 53.0000, stage0_loss_bbox: 0.4576, stage0_loss_iou: 0.7631, stage0_loss_global: 0.4869, stage0_loss_mask: 1.5448, stage1_loss_cls: 1.2278, stage1_pos_acc: 71.5000, stage1_loss_bbox: 0.2590, stage1_loss_iou: 0.4659, stage1_loss_global: 0.4730, stage1_loss_mask: 1.1967, stage2_loss_cls: 1.0564, stage2_pos_acc: 60.0000, stage2_loss_bbox: 0.2369, stage2_loss_iou: 0.4283, stage2_loss_global: 0.4694, stage2_loss_mask: 1.1982, stage3_loss_cls: 0.9096, stage3_pos_acc: 61.7500, stage3_loss_bbox: 0.2436, stage3_loss_iou: 0.4339, stage3_loss_global: 0.4682, stage3_loss_mask: 1.3063, stage4_loss_cls: 0.7388, stage4_pos_acc: 65.5000, stage4_loss_bbox: 0.2491, stage4_loss_iou: 0.4405, stage4_loss_global: 0.4702, stage4_loss_mask: 1.1442, stage5_loss_cls: 0.6658, stage5_pos_acc: 67.5000, stage5_loss_bbox: 0.2613, stage5_loss_iou: 0.4568, stage5_loss_global: 0.4631, stage5_loss_mask: 1.1000, loss: 20.9853, grad_norm: 147.1782
2021-12-29 17:46:10,560 - mmdet - INFO - Saving checkpoint at 6 epochs
2021-12-29 17:47:25,024 - mmdet - INFO - Epoch [7][50/53]	lr: 9.191e-06, eta: 0:32:27, time: 1.323, data_time: 0.214, memory: 8500, stage0_loss_cls: 1.2974, stage0_pos_acc: 55.7500, stage0_loss_bbox: 0.3936, stage0_loss_iou: 0.6872, stage0_loss_global: 0.4912, stage0_loss_mask: 1.3351, stage1_loss_cls: 1.0653, stage1_pos_acc: 74.0000, stage1_loss_bbox: 0.2313, stage1_loss_iou: 0.4321, stage1_loss_global: 0.4866, stage1_loss_mask: 1.0271, stage2_loss_cls: 0.8908, stage2_pos_acc: 58.2500, stage2_loss_bbox: 0.2200, stage2_loss_iou: 0.4121, stage2_loss_global: 0.4852, stage2_loss_mask: 1.0857, stage3_loss_cls: 0.6889, stage3_pos_acc: 58.2500, stage3_loss_bbox: 0.2507, stage3_loss_iou: 0.4554, stage3_loss_global: 0.4725, stage3_loss_mask: 1.1243, stage4_loss_cls: 0.6013, stage4_pos_acc: 63.5000, stage4_loss_bbox: 0.2579, stage4_loss_iou: 0.4617, stage4_loss_global: 0.4744, stage4_loss_mask: 1.0186, stage5_loss_cls: 0.5618, stage5_pos_acc: 65.2500, stage5_loss_bbox: 0.2618, stage5_loss_iou: 0.4646, stage5_loss_global: 0.4593, stage5_loss_mask: 0.9943, loss: 19.0880, grad_norm: 175.6152
2021-12-29 17:47:28,858 - mmdet - INFO - Saving checkpoint at 7 epochs
2021-12-29 17:48:43,260 - mmdet - INFO - Epoch [8][50/53]	lr: 1.051e-05, eta: 0:31:15, time: 1.313, data_time: 0.215, memory: 8500, stage0_loss_cls: 1.1965, stage0_pos_acc: 62.5000, stage0_loss_bbox: 0.3495, stage0_loss_iou: 0.6278, stage0_loss_global: 0.4709, stage0_loss_mask: 1.1454, stage1_loss_cls: 0.9358, stage1_pos_acc: 75.0000, stage1_loss_bbox: 0.2273, stage1_loss_iou: 0.4171, stage1_loss_global: 0.4634, stage1_loss_mask: 0.8974, stage2_loss_cls: 0.7203, stage2_pos_acc: 59.7500, stage2_loss_bbox: 0.2329, stage2_loss_iou: 0.4263, stage2_loss_global: 0.4658, stage2_loss_mask: 0.9914, stage3_loss_cls: 0.5875, stage3_pos_acc: 61.0000, stage3_loss_bbox: 0.2408, stage3_loss_iou: 0.4390, stage3_loss_global: 0.4569, stage3_loss_mask: 0.9771, stage4_loss_cls: 0.5249, stage4_pos_acc: 67.2500, stage4_loss_bbox: 0.2420, stage4_loss_iou: 0.4382, stage4_loss_global: 0.4574, stage4_loss_mask: 0.9243, stage5_loss_cls: 0.4848, stage5_pos_acc: 70.0000, stage5_loss_bbox: 0.2485, stage5_loss_iou: 0.4429, stage5_loss_global: 0.4426, stage5_loss_mask: 0.9281, loss: 17.4028, grad_norm: 129.7535
2021-12-29 17:48:47,016 - mmdet - INFO - Saving checkpoint at 8 epochs
2021-12-29 17:50:01,371 - mmdet - INFO - Epoch [9][50/53]	lr: 1.184e-05, eta: 0:30:05, time: 1.311, data_time: 0.211, memory: 8608, stage0_loss_cls: 1.0764, stage0_pos_acc: 65.7500, stage0_loss_bbox: 0.3335, stage0_loss_iou: 0.5875, stage0_loss_global: 0.4563, stage0_loss_mask: 0.9692, stage1_loss_cls: 0.8204, stage1_pos_acc: 80.0000, stage1_loss_bbox: 0.2282, stage1_loss_iou: 0.4095, stage1_loss_global: 0.4587, stage1_loss_mask: 0.7752, stage2_loss_cls: 0.6055, stage2_pos_acc: 54.7500, stage2_loss_bbox: 0.2415, stage2_loss_iou: 0.4277, stage2_loss_global: 0.4516, stage2_loss_mask: 0.9543, stage3_loss_cls: 0.5413, stage3_pos_acc: 61.2500, stage3_loss_bbox: 0.2355, stage3_loss_iou: 0.4231, stage3_loss_global: 0.4447, stage3_loss_mask: 0.8495, stage4_loss_cls: 0.4685, stage4_pos_acc: 67.7500, stage4_loss_bbox: 0.2466, stage4_loss_iou: 0.4349, stage4_loss_global: 0.4340, stage4_loss_mask: 0.8270, stage5_loss_cls: 0.4466, stage5_pos_acc: 73.7500, stage5_loss_bbox: 0.2423, stage5_loss_iou: 0.4307, stage5_loss_global: 0.4436, stage5_loss_mask: 0.8317, loss: 16.0952, grad_norm: 134.7642
2021-12-29 17:50:05,135 - mmdet - INFO - Saving checkpoint at 9 epochs
2021-12-29 17:51:19,673 - mmdet - INFO - Epoch [10][50/53]	lr: 1.316e-05, eta: 0:28:57, time: 1.323, data_time: 0.215, memory: 8608, stage0_loss_cls: 0.9895, stage0_pos_acc: 69.7500, stage0_loss_bbox: 0.3234, stage0_loss_iou: 0.5729, stage0_loss_global: 0.4440, stage0_loss_mask: 0.8383, stage1_loss_cls: 0.7446, stage1_pos_acc: 79.0000, stage1_loss_bbox: 0.2318, stage1_loss_iou: 0.4094, stage1_loss_global: 0.4479, stage1_loss_mask: 0.6962, stage2_loss_cls: 0.5517, stage2_pos_acc: 63.5000, stage2_loss_bbox: 0.2264, stage2_loss_iou: 0.4016, stage2_loss_global: 0.4403, stage2_loss_mask: 0.8726, stage3_loss_cls: 0.4766, stage3_pos_acc: 72.0000, stage3_loss_bbox: 0.2237, stage3_loss_iou: 0.3963, stage3_loss_global: 0.4356, stage3_loss_mask: 0.7337, stage4_loss_cls: 0.4019, stage4_pos_acc: 71.7500, stage4_loss_bbox: 0.2342, stage4_loss_iou: 0.4128, stage4_loss_global: 0.4234, stage4_loss_mask: 0.7300, stage5_loss_cls: 0.3747, stage5_pos_acc: 75.5000, stage5_loss_bbox: 0.2360, stage5_loss_iou: 0.4143, stage5_loss_global: 0.4182, stage5_loss_mask: 0.7635, loss: 14.8656, grad_norm: 137.7017
2021-12-29 17:51:23,395 - mmdet - INFO - Saving checkpoint at 10 epochs
2021-12-29 17:52:38,270 - mmdet - INFO - Epoch [11][50/53]	lr: 1.449e-05, eta: 0:27:49, time: 1.329, data_time: 0.215, memory: 8608, stage0_loss_cls: 0.9114, stage0_pos_acc: 72.5000, stage0_loss_bbox: 0.3248, stage0_loss_iou: 0.5777, stage0_loss_global: 0.4584, stage0_loss_mask: 0.7831, stage1_loss_cls: 0.7091, stage1_pos_acc: 77.0000, stage1_loss_bbox: 0.2175, stage1_loss_iou: 0.4006, stage1_loss_global: 0.4605, stage1_loss_mask: 0.6491, stage2_loss_cls: 0.5129, stage2_pos_acc: 68.5000, stage2_loss_bbox: 0.2218, stage2_loss_iou: 0.4084, stage2_loss_global: 0.4692, stage2_loss_mask: 0.8511, stage3_loss_cls: 0.4483, stage3_pos_acc: 71.2500, stage3_loss_bbox: 0.2199, stage3_loss_iou: 0.4026, stage3_loss_global: 0.4888, stage3_loss_mask: 0.6874, stage4_loss_cls: 0.4010, stage4_pos_acc: 74.5000, stage4_loss_bbox: 0.2214, stage4_loss_iou: 0.4055, stage4_loss_global: 0.4832, stage4_loss_mask: 0.6780, stage5_loss_cls: 0.3817, stage5_pos_acc: 77.5000, stage5_loss_bbox: 0.2242, stage5_loss_iou: 0.4063, stage5_loss_global: 0.5062, stage5_loss_mask: 0.6936, loss: 14.6035, grad_norm: 174.5077
2021-12-29 17:52:42,031 - mmdet - INFO - Saving checkpoint at 11 epochs
2021-12-29 17:53:56,664 - mmdet - INFO - Epoch [12][50/53]	lr: 1.581e-05, eta: 0:26:42, time: 1.323, data_time: 0.216, memory: 8608, stage0_loss_cls: 0.8603, stage0_pos_acc: 74.2500, stage0_loss_bbox: 0.3124, stage0_loss_iou: 0.5603, stage0_loss_global: 0.4002, stage0_loss_mask: 0.7285, stage1_loss_cls: 0.6411, stage1_pos_acc: 83.5000, stage1_loss_bbox: 0.2145, stage1_loss_iou: 0.3821, stage1_loss_global: 0.3861, stage1_loss_mask: 0.5957, stage2_loss_cls: 0.4567, stage2_pos_acc: 75.5000, stage2_loss_bbox: 0.2162, stage2_loss_iou: 0.3890, stage2_loss_global: 0.3598, stage2_loss_mask: 0.8215, stage3_loss_cls: 0.3915, stage3_pos_acc: 80.0000, stage3_loss_bbox: 0.2210, stage3_loss_iou: 0.3961, stage3_loss_global: 0.3504, stage3_loss_mask: 0.6599, stage4_loss_cls: 0.3354, stage4_pos_acc: 81.0000, stage4_loss_bbox: 0.2301, stage4_loss_iou: 0.4052, stage4_loss_global: 0.3353, stage4_loss_mask: 0.6383, stage5_loss_cls: 0.3388, stage5_pos_acc: 82.2500, stage5_loss_bbox: 0.2304, stage5_loss_iou: 0.4033, stage5_loss_global: 0.3324, stage5_loss_mask: 0.6440, loss: 13.2365, grad_norm: 171.1403
2021-12-29 17:54:00,381 - mmdet - INFO - Saving checkpoint at 12 epochs
2021-12-29 17:55:16,852 - mmdet - INFO - Epoch [13][50/53]	lr: 1.713e-05, eta: 0:25:37, time: 1.350, data_time: 0.220, memory: 8608, stage0_loss_cls: 0.8359, stage0_pos_acc: 74.2500, stage0_loss_bbox: 0.3169, stage0_loss_iou: 0.5680, stage0_loss_global: 0.3897, stage0_loss_mask: 0.6808, stage1_loss_cls: 0.6388, stage1_pos_acc: 81.7500, stage1_loss_bbox: 0.2316, stage1_loss_iou: 0.4058, stage1_loss_global: 0.3901, stage1_loss_mask: 0.5987, stage2_loss_cls: 0.4584, stage2_pos_acc: 78.7500, stage2_loss_bbox: 0.2261, stage2_loss_iou: 0.4042, stage2_loss_global: 0.3720, stage2_loss_mask: 0.7904, stage3_loss_cls: 0.4214, stage3_pos_acc: 76.5000, stage3_loss_bbox: 0.2222, stage3_loss_iou: 0.3982, stage3_loss_global: 0.3719, stage3_loss_mask: 0.6038, stage4_loss_cls: 0.3529, stage4_pos_acc: 80.7500, stage4_loss_bbox: 0.2346, stage4_loss_iou: 0.4127, stage4_loss_global: 0.3556, stage4_loss_mask: 0.6069, stage5_loss_cls: 0.3358, stage5_pos_acc: 79.7500, stage5_loss_bbox: 0.2350, stage5_loss_iou: 0.4130, stage5_loss_global: 0.3593, stage5_loss_mask: 0.6013, loss: 13.2319, grad_norm: 255.7862
2021-12-29 17:55:20,545 - mmdet - INFO - Saving checkpoint at 13 epochs
2021-12-29 17:56:35,055 - mmdet - INFO - Epoch [14][50/53]	lr: 1.846e-05, eta: 0:24:29, time: 1.323, data_time: 0.221, memory: 8608, stage0_loss_cls: 0.7692, stage0_pos_acc: 85.0000, stage0_loss_bbox: 0.3347, stage0_loss_iou: 0.6033, stage0_loss_global: 0.2865, stage0_loss_mask: 0.6777, stage1_loss_cls: 0.5882, stage1_pos_acc: 85.2500, stage1_loss_bbox: 0.2196, stage1_loss_iou: 0.3970, stage1_loss_global: 0.2697, stage1_loss_mask: 0.5736, stage2_loss_cls: 0.4133, stage2_pos_acc: 86.0000, stage2_loss_bbox: 0.2125, stage2_loss_iou: 0.3834, stage2_loss_global: 0.2580, stage2_loss_mask: 0.7703, stage3_loss_cls: 0.3687, stage3_pos_acc: 86.5000, stage3_loss_bbox: 0.2086, stage3_loss_iou: 0.3788, stage3_loss_global: 0.2524, stage3_loss_mask: 0.6054, stage4_loss_cls: 0.3028, stage4_pos_acc: 86.5000, stage4_loss_bbox: 0.2207, stage4_loss_iou: 0.3921, stage4_loss_global: 0.2553, stage4_loss_mask: 0.6036, stage5_loss_cls: 0.2980, stage5_pos_acc: 86.2500, stage5_loss_bbox: 0.2232, stage5_loss_iou: 0.3924, stage5_loss_global: 0.2499, stage5_loss_mask: 0.6107, loss: 12.1199, grad_norm: 232.0551
2021-12-29 17:56:38,880 - mmdet - INFO - Saving checkpoint at 14 epochs
2021-12-29 17:57:53,728 - mmdet - INFO - Epoch [15][50/53]	lr: 1.978e-05, eta: 0:23:23, time: 1.334, data_time: 0.219, memory: 8608, stage0_loss_cls: 0.7019, stage0_pos_acc: 86.2500, stage0_loss_bbox: 0.3277, stage0_loss_iou: 0.5853, stage0_loss_global: 0.2300, stage0_loss_mask: 0.6688, stage1_loss_cls: 0.5078, stage1_pos_acc: 89.0000, stage1_loss_bbox: 0.2253, stage1_loss_iou: 0.4027, stage1_loss_global: 0.2189, stage1_loss_mask: 0.5953, stage2_loss_cls: 0.3418, stage2_pos_acc: 86.7500, stage2_loss_bbox: 0.2267, stage2_loss_iou: 0.4053, stage2_loss_global: 0.2146, stage2_loss_mask: 0.8031, stage3_loss_cls: 0.2996, stage3_pos_acc: 87.2500, stage3_loss_bbox: 0.2248, stage3_loss_iou: 0.3996, stage3_loss_global: 0.2195, stage3_loss_mask: 0.6157, stage4_loss_cls: 0.2520, stage4_pos_acc: 89.2500, stage4_loss_bbox: 0.2293, stage4_loss_iou: 0.4034, stage4_loss_global: 0.2165, stage4_loss_mask: 0.6217, stage5_loss_cls: 0.2425, stage5_pos_acc: 89.5000, stage5_loss_bbox: 0.2339, stage5_loss_iou: 0.4052, stage5_loss_global: 0.2194, stage5_loss_mask: 0.6287, loss: 11.6668, grad_norm: 323.7800
2021-12-29 17:57:57,679 - mmdet - INFO - Saving checkpoint at 15 epochs
2021-12-29 17:59:12,508 - mmdet - INFO - Epoch [16][50/53]	lr: 2.110e-05, eta: 0:22:16, time: 1.329, data_time: 0.222, memory: 8608, stage0_loss_cls: 0.6681, stage0_pos_acc: 87.5000, stage0_loss_bbox: 0.3268, stage0_loss_iou: 0.5789, stage0_loss_global: 0.2158, stage0_loss_mask: 0.6384, stage1_loss_cls: 0.5020, stage1_pos_acc: 90.5000, stage1_loss_bbox: 0.2205, stage1_loss_iou: 0.3923, stage1_loss_global: 0.2035, stage1_loss_mask: 0.5723, stage2_loss_cls: 0.3256, stage2_pos_acc: 90.5000, stage2_loss_bbox: 0.2234, stage2_loss_iou: 0.3890, stage2_loss_global: 0.1994, stage2_loss_mask: 0.7839, stage3_loss_cls: 0.2773, stage3_pos_acc: 89.7500, stage3_loss_bbox: 0.2216, stage3_loss_iou: 0.3883, stage3_loss_global: 0.2066, stage3_loss_mask: 0.6021, stage4_loss_cls: 0.2412, stage4_pos_acc: 89.0000, stage4_loss_bbox: 0.2227, stage4_loss_iou: 0.3917, stage4_loss_global: 0.2000, stage4_loss_mask: 0.6059, stage5_loss_cls: 0.2267, stage5_pos_acc: 90.5000, stage5_loss_bbox: 0.2256, stage5_loss_iou: 0.3951, stage5_loss_global: 0.1971, stage5_loss_mask: 0.6029, loss: 11.2447, grad_norm: 210.7959
2021-12-29 17:59:16,214 - mmdet - INFO - Saving checkpoint at 16 epochs
2021-12-29 18:00:31,418 - mmdet - INFO - Epoch [17][50/53]	lr: 2.243e-05, eta: 0:21:09, time: 1.324, data_time: 0.218, memory: 8608, stage0_loss_cls: 0.6276, stage0_pos_acc: 88.0000, stage0_loss_bbox: 0.3400, stage0_loss_iou: 0.5957, stage0_loss_global: 0.2009, stage0_loss_mask: 0.6058, stage1_loss_cls: 0.4630, stage1_pos_acc: 89.7500, stage1_loss_bbox: 0.2246, stage1_loss_iou: 0.3883, stage1_loss_global: 0.2035, stage1_loss_mask: 0.5543, stage2_loss_cls: 0.3104, stage2_pos_acc: 90.0000, stage2_loss_bbox: 0.2203, stage2_loss_iou: 0.3821, stage2_loss_global: 0.2054, stage2_loss_mask: 0.7320, stage3_loss_cls: 0.2972, stage3_pos_acc: 89.2500, stage3_loss_bbox: 0.2132, stage3_loss_iou: 0.3723, stage3_loss_global: 0.2042, stage3_loss_mask: 0.5591, stage4_loss_cls: 0.2474, stage4_pos_acc: 90.7500, stage4_loss_bbox: 0.2186, stage4_loss_iou: 0.3794, stage4_loss_global: 0.2065, stage4_loss_mask: 0.5677, stage5_loss_cls: 0.2567, stage5_pos_acc: 88.7500, stage5_loss_bbox: 0.2195, stage5_loss_iou: 0.3796, stage5_loss_global: 0.2093, stage5_loss_mask: 0.5578, loss: 10.9425, grad_norm: 215.7343
2021-12-29 18:00:35,102 - mmdet - INFO - Saving checkpoint at 17 epochs
2021-12-29 18:01:49,383 - mmdet - INFO - Epoch [18][50/53]	lr: 2.375e-05, eta: 0:20:02, time: 1.324, data_time: 0.223, memory: 8608, stage0_loss_cls: 0.6017, stage0_pos_acc: 88.2500, stage0_loss_bbox: 0.3149, stage0_loss_iou: 0.5655, stage0_loss_global: 0.1730, stage0_loss_mask: 0.5763, stage1_loss_cls: 0.4114, stage1_pos_acc: 90.7500, stage1_loss_bbox: 0.2173, stage1_loss_iou: 0.3811, stage1_loss_global: 0.1683, stage1_loss_mask: 0.5395, stage2_loss_cls: 0.3060, stage2_pos_acc: 92.2500, stage2_loss_bbox: 0.2031, stage2_loss_iou: 0.3595, stage2_loss_global: 0.1701, stage2_loss_mask: 0.6677, stage3_loss_cls: 0.2417, stage3_pos_acc: 92.2500, stage3_loss_bbox: 0.2090, stage3_loss_iou: 0.3652, stage3_loss_global: 0.1677, stage3_loss_mask: 0.5308, stage4_loss_cls: 0.2218, stage4_pos_acc: 92.5000, stage4_loss_bbox: 0.2133, stage4_loss_iou: 0.3713, stage4_loss_global: 0.1680, stage4_loss_mask: 0.5369, stage5_loss_cls: 0.1996, stage5_pos_acc: 91.5000, stage5_loss_bbox: 0.2191, stage5_loss_iou: 0.3783, stage5_loss_global: 0.1700, stage5_loss_mask: 0.5348, loss: 10.1828, grad_norm: 248.2845
2021-12-29 18:01:53,061 - mmdet - INFO - Saving checkpoint at 18 epochs
2021-12-29 18:03:07,609 - mmdet - INFO - Epoch [19][50/53]	lr: 2.500e-05, eta: 0:18:55, time: 1.326, data_time: 0.221, memory: 8613, stage0_loss_cls: 0.5745, stage0_pos_acc: 91.7500, stage0_loss_bbox: 0.3318, stage0_loss_iou: 0.5824, stage0_loss_global: 0.1597, stage0_loss_mask: 0.5802, stage1_loss_cls: 0.3809, stage1_pos_acc: 93.0000, stage1_loss_bbox: 0.2354, stage1_loss_iou: 0.4045, stage1_loss_global: 0.1497, stage1_loss_mask: 0.5478, stage2_loss_cls: 0.2331, stage2_pos_acc: 93.7500, stage2_loss_bbox: 0.2214, stage2_loss_iou: 0.3867, stage2_loss_global: 0.1442, stage2_loss_mask: 0.6675, stage3_loss_cls: 0.1946, stage3_pos_acc: 93.2500, stage3_loss_bbox: 0.2190, stage3_loss_iou: 0.3795, stage3_loss_global: 0.1456, stage3_loss_mask: 0.5560, stage4_loss_cls: 0.1702, stage4_pos_acc: 93.5000, stage4_loss_bbox: 0.2207, stage4_loss_iou: 0.3824, stage4_loss_global: 0.1429, stage4_loss_mask: 0.5576, stage5_loss_cls: 0.1610, stage5_pos_acc: 94.0000, stage5_loss_bbox: 0.2213, stage5_loss_iou: 0.3830, stage5_loss_global: 0.1416, stage5_loss_mask: 0.5457, loss: 10.0210, grad_norm: 192.4003
2021-12-29 18:03:11,343 - mmdet - INFO - Saving checkpoint at 19 epochs
2021-12-29 18:04:26,243 - mmdet - INFO - Epoch [20][50/53]	lr: 2.500e-05, eta: 0:17:48, time: 1.333, data_time: 0.222, memory: 8613, stage0_loss_cls: 0.5720, stage0_pos_acc: 86.5000, stage0_loss_bbox: 0.3183, stage0_loss_iou: 0.5719, stage0_loss_global: 0.1872, stage0_loss_mask: 0.5890, stage1_loss_cls: 0.3834, stage1_pos_acc: 88.7500, stage1_loss_bbox: 0.2149, stage1_loss_iou: 0.3815, stage1_loss_global: 0.1820, stage1_loss_mask: 0.5392, stage2_loss_cls: 0.2727, stage2_pos_acc: 90.5000, stage2_loss_bbox: 0.2049, stage2_loss_iou: 0.3662, stage2_loss_global: 0.1794, stage2_loss_mask: 0.6166, stage3_loss_cls: 0.2433, stage3_pos_acc: 90.0000, stage3_loss_bbox: 0.2051, stage3_loss_iou: 0.3640, stage3_loss_global: 0.1830, stage3_loss_mask: 0.5355, stage4_loss_cls: 0.2052, stage4_pos_acc: 89.7500, stage4_loss_bbox: 0.2112, stage4_loss_iou: 0.3700, stage4_loss_global: 0.1809, stage4_loss_mask: 0.5365, stage5_loss_cls: 0.1999, stage5_pos_acc: 90.0000, stage5_loss_bbox: 0.2099, stage5_loss_iou: 0.3692, stage5_loss_global: 0.1815, stage5_loss_mask: 0.5336, loss: 10.1081, grad_norm: 294.4041
2021-12-29 18:04:30,076 - mmdet - INFO - Saving checkpoint at 20 epochs
2021-12-29 18:05:44,274 - mmdet - INFO - Epoch [21][50/53]	lr: 2.500e-05, eta: 0:16:41, time: 1.316, data_time: 0.216, memory: 8613, stage0_loss_cls: 0.5334, stage0_pos_acc: 90.7500, stage0_loss_bbox: 0.3524, stage0_loss_iou: 0.6129, stage0_loss_global: 0.1724, stage0_loss_mask: 0.5928, stage1_loss_cls: 0.3434, stage1_pos_acc: 93.2500, stage1_loss_bbox: 0.2431, stage1_loss_iou: 0.4242, stage1_loss_global: 0.1722, stage1_loss_mask: 0.5602, stage2_loss_cls: 0.2420, stage2_pos_acc: 92.7500, stage2_loss_bbox: 0.2238, stage2_loss_iou: 0.3953, stage2_loss_global: 0.1729, stage2_loss_mask: 0.6430, stage3_loss_cls: 0.2088, stage3_pos_acc: 93.0000, stage3_loss_bbox: 0.2170, stage3_loss_iou: 0.3834, stage3_loss_global: 0.1737, stage3_loss_mask: 0.5661, stage4_loss_cls: 0.1818, stage4_pos_acc: 92.7500, stage4_loss_bbox: 0.2231, stage4_loss_iou: 0.3870, stage4_loss_global: 0.1702, stage4_loss_mask: 0.5727, stage5_loss_cls: 0.1632, stage5_pos_acc: 92.5000, stage5_loss_bbox: 0.2290, stage5_loss_iou: 0.3955, stage5_loss_global: 0.1718, stage5_loss_mask: 0.5766, loss: 10.3040, grad_norm: 223.2290
2021-12-29 18:05:48,026 - mmdet - INFO - Saving checkpoint at 21 epochs
2021-12-29 18:07:02,220 - mmdet - INFO - Epoch [22][50/53]	lr: 2.500e-05, eta: 0:15:34, time: 1.317, data_time: 0.220, memory: 8613, stage0_loss_cls: 0.5467, stage0_pos_acc: 86.2500, stage0_loss_bbox: 0.3130, stage0_loss_iou: 0.5769, stage0_loss_global: 0.1737, stage0_loss_mask: 0.5554, stage1_loss_cls: 0.3394, stage1_pos_acc: 90.7500, stage1_loss_bbox: 0.2245, stage1_loss_iou: 0.3981, stage1_loss_global: 0.1660, stage1_loss_mask: 0.5189, stage2_loss_cls: 0.2369, stage2_pos_acc: 90.2500, stage2_loss_bbox: 0.2116, stage2_loss_iou: 0.3743, stage2_loss_global: 0.1653, stage2_loss_mask: 0.5856, stage3_loss_cls: 0.2014, stage3_pos_acc: 91.2500, stage3_loss_bbox: 0.2104, stage3_loss_iou: 0.3746, stage3_loss_global: 0.1635, stage3_loss_mask: 0.5334, stage4_loss_cls: 0.1846, stage4_pos_acc: 90.7500, stage4_loss_bbox: 0.2102, stage4_loss_iou: 0.3712, stage4_loss_global: 0.1661, stage4_loss_mask: 0.5298, stage5_loss_cls: 0.1776, stage5_pos_acc: 90.7500, stage5_loss_bbox: 0.2077, stage5_loss_iou: 0.3675, stage5_loss_global: 0.1666, stage5_loss_mask: 0.5224, loss: 9.7732, grad_norm: 315.0343
2021-12-29 18:07:05,918 - mmdet - INFO - Saving checkpoint at 22 epochs
2021-12-29 18:08:19,444 - mmdet - INFO - Epoch [23][50/53]	lr: 2.500e-05, eta: 0:14:27, time: 1.309, data_time: 0.219, memory: 8613, stage0_loss_cls: 0.5112, stage0_pos_acc: 92.5000, stage0_loss_bbox: 0.3076, stage0_loss_iou: 0.5653, stage0_loss_global: 0.1584, stage0_loss_mask: 0.5135, stage1_loss_cls: 0.2999, stage1_pos_acc: 93.5000, stage1_loss_bbox: 0.2136, stage1_loss_iou: 0.3887, stage1_loss_global: 0.1609, stage1_loss_mask: 0.5051, stage2_loss_cls: 0.1859, stage2_pos_acc: 94.7500, stage2_loss_bbox: 0.2098, stage2_loss_iou: 0.3803, stage2_loss_global: 0.1718, stage2_loss_mask: 0.5513, stage3_loss_cls: 0.1514, stage3_pos_acc: 93.2500, stage3_loss_bbox: 0.2117, stage3_loss_iou: 0.3787, stage3_loss_global: 0.1738, stage3_loss_mask: 0.5045, stage4_loss_cls: 0.1356, stage4_pos_acc: 93.0000, stage4_loss_bbox: 0.2147, stage4_loss_iou: 0.3804, stage4_loss_global: 0.1739, stage4_loss_mask: 0.5138, stage5_loss_cls: 0.1163, stage5_pos_acc: 93.2500, stage5_loss_bbox: 0.2176, stage5_loss_iou: 0.3837, stage5_loss_global: 0.1688, stage5_loss_mask: 0.5132, loss: 9.3616, grad_norm: 368.4424
2021-12-29 18:08:23,145 - mmdet - INFO - Saving checkpoint at 23 epochs
2021-12-29 18:09:36,827 - mmdet - INFO - Epoch [24][50/53]	lr: 2.500e-05, eta: 0:13:20, time: 1.314, data_time: 0.220, memory: 8613, stage0_loss_cls: 0.4950, stage0_pos_acc: 90.0000, stage0_loss_bbox: 0.3322, stage0_loss_iou: 0.5894, stage0_loss_global: 0.1432, stage0_loss_mask: 0.5680, stage1_loss_cls: 0.3144, stage1_pos_acc: 94.5000, stage1_loss_bbox: 0.2230, stage1_loss_iou: 0.3971, stage1_loss_global: 0.1424, stage1_loss_mask: 0.5262, stage2_loss_cls: 0.1959, stage2_pos_acc: 94.2500, stage2_loss_bbox: 0.2258, stage2_loss_iou: 0.3922, stage2_loss_global: 0.1480, stage2_loss_mask: 0.5780, stage3_loss_cls: 0.1837, stage3_pos_acc: 93.5000, stage3_loss_bbox: 0.2154, stage3_loss_iou: 0.3817, stage3_loss_global: 0.1518, stage3_loss_mask: 0.5279, stage4_loss_cls: 0.1629, stage4_pos_acc: 94.0000, stage4_loss_bbox: 0.2150, stage4_loss_iou: 0.3795, stage4_loss_global: 0.1456, stage4_loss_mask: 0.5308, stage5_loss_cls: 0.1525, stage5_pos_acc: 94.7500, stage5_loss_bbox: 0.2171, stage5_loss_iou: 0.3829, stage5_loss_global: 0.1450, stage5_loss_mask: 0.5176, loss: 9.5801, grad_norm: 287.7656
2021-12-29 18:09:40,598 - mmdet - INFO - Saving checkpoint at 24 epochs
2021-12-29 18:10:54,356 - mmdet - INFO - Epoch [25][50/53]	lr: 2.500e-05, eta: 0:12:14, time: 1.317, data_time: 0.218, memory: 8613, stage0_loss_cls: 0.4971, stage0_pos_acc: 92.0000, stage0_loss_bbox: 0.3422, stage0_loss_iou: 0.6126, stage0_loss_global: 0.1823, stage0_loss_mask: 0.5330, stage1_loss_cls: 0.3182, stage1_pos_acc: 93.2500, stage1_loss_bbox: 0.2232, stage1_loss_iou: 0.3986, stage1_loss_global: 0.1844, stage1_loss_mask: 0.5120, stage2_loss_cls: 0.2320, stage2_pos_acc: 92.0000, stage2_loss_bbox: 0.2103, stage2_loss_iou: 0.3756, stage2_loss_global: 0.1796, stage2_loss_mask: 0.5500, stage3_loss_cls: 0.1937, stage3_pos_acc: 91.2500, stage3_loss_bbox: 0.2160, stage3_loss_iou: 0.3803, stage3_loss_global: 0.1754, stage3_loss_mask: 0.5230, stage4_loss_cls: 0.1726, stage4_pos_acc: 92.5000, stage4_loss_bbox: 0.2155, stage4_loss_iou: 0.3794, stage4_loss_global: 0.1733, stage4_loss_mask: 0.5274, stage5_loss_cls: 0.1723, stage5_pos_acc: 93.0000, stage5_loss_bbox: 0.2132, stage5_loss_iou: 0.3767, stage5_loss_global: 0.1782, stage5_loss_mask: 0.5212, loss: 9.7692, grad_norm: 238.9602
2021-12-29 18:10:58,126 - mmdet - INFO - Saving checkpoint at 25 epochs
2021-12-29 18:12:13,202 - mmdet - INFO - Epoch [26][50/53]	lr: 2.500e-05, eta: 0:11:07, time: 1.330, data_time: 0.219, memory: 8613, stage0_loss_cls: 0.4755, stage0_pos_acc: 90.5000, stage0_loss_bbox: 0.3282, stage0_loss_iou: 0.5887, stage0_loss_global: 0.1440, stage0_loss_mask: 0.4982, stage1_loss_cls: 0.2921, stage1_pos_acc: 92.2500, stage1_loss_bbox: 0.2230, stage1_loss_iou: 0.3858, stage1_loss_global: 0.1513, stage1_loss_mask: 0.5067, stage2_loss_cls: 0.2185, stage2_pos_acc: 94.2500, stage2_loss_bbox: 0.2020, stage2_loss_iou: 0.3557, stage2_loss_global: 0.1503, stage2_loss_mask: 0.5232, stage3_loss_cls: 0.1651, stage3_pos_acc: 93.5000, stage3_loss_bbox: 0.2054, stage3_loss_iou: 0.3560, stage3_loss_global: 0.1561, stage3_loss_mask: 0.4954, stage4_loss_cls: 0.1422, stage4_pos_acc: 94.0000, stage4_loss_bbox: 0.2110, stage4_loss_iou: 0.3606, stage4_loss_global: 0.1630, stage4_loss_mask: 0.5104, stage5_loss_cls: 0.1345, stage5_pos_acc: 93.2500, stage5_loss_bbox: 0.2134, stage5_loss_iou: 0.3606, stage5_loss_global: 0.1663, stage5_loss_mask: 0.5063, loss: 9.1895, grad_norm: 305.4032
2021-12-29 18:12:17,051 - mmdet - INFO - Saving checkpoint at 26 epochs
2021-12-29 18:13:30,451 - mmdet - INFO - Epoch [27][50/53]	lr: 2.500e-05, eta: 0:10:01, time: 1.306, data_time: 0.213, memory: 8613, stage0_loss_cls: 0.5155, stage0_pos_acc: 87.5000, stage0_loss_bbox: 0.3160, stage0_loss_iou: 0.5634, stage0_loss_global: 0.3067, stage0_loss_mask: 0.5245, stage1_loss_cls: 0.3638, stage1_pos_acc: 88.7500, stage1_loss_bbox: 0.2109, stage1_loss_iou: 0.3778, stage1_loss_global: 0.3334, stage1_loss_mask: 0.5029, stage2_loss_cls: 0.2745, stage2_pos_acc: 87.7500, stage2_loss_bbox: 0.2006, stage2_loss_iou: 0.3636, stage2_loss_global: 0.3449, stage2_loss_mask: 0.5173, stage3_loss_cls: 0.2546, stage3_pos_acc: 89.0000, stage3_loss_bbox: 0.2004, stage3_loss_iou: 0.3651, stage3_loss_global: 0.3381, stage3_loss_mask: 0.4947, stage4_loss_cls: 0.2456, stage4_pos_acc: 88.2500, stage4_loss_bbox: 0.2072, stage4_loss_iou: 0.3717, stage4_loss_global: 0.3289, stage4_loss_mask: 0.5023, stage5_loss_cls: 0.2290, stage5_pos_acc: 89.2500, stage5_loss_bbox: 0.2096, stage5_loss_iou: 0.3729, stage5_loss_global: 0.3502, stage5_loss_mask: 0.4946, loss: 10.6806, grad_norm: 440.0069
2021-12-29 18:13:34,097 - mmdet - INFO - Saving checkpoint at 27 epochs
2021-12-29 18:14:48,018 - mmdet - INFO - Epoch [28][50/53]	lr: 2.500e-06, eta: 0:08:54, time: 1.317, data_time: 0.219, memory: 8613, stage0_loss_cls: 0.4008, stage0_pos_acc: 94.5000, stage0_loss_bbox: 0.3167, stage0_loss_iou: 0.5769, stage0_loss_global: 0.1135, stage0_loss_mask: 0.5203, stage1_loss_cls: 0.2657, stage1_pos_acc: 95.0000, stage1_loss_bbox: 0.2186, stage1_loss_iou: 0.3864, stage1_loss_global: 0.1083, stage1_loss_mask: 0.5037, stage2_loss_cls: 0.1646, stage2_pos_acc: 94.7500, stage2_loss_bbox: 0.1976, stage2_loss_iou: 0.3550, stage2_loss_global: 0.1051, stage2_loss_mask: 0.5186, stage3_loss_cls: 0.1346, stage3_pos_acc: 95.5000, stage3_loss_bbox: 0.1952, stage3_loss_iou: 0.3513, stage3_loss_global: 0.1036, stage3_loss_mask: 0.5091, stage4_loss_cls: 0.1215, stage4_pos_acc: 96.5000, stage4_loss_bbox: 0.1996, stage4_loss_iou: 0.3529, stage4_loss_global: 0.0967, stage4_loss_mask: 0.5208, stage5_loss_cls: 0.1218, stage5_pos_acc: 96.2500, stage5_loss_bbox: 0.1943, stage5_loss_iou: 0.3466, stage5_loss_global: 0.0980, stage5_loss_mask: 0.5068, loss: 8.6044, grad_norm: 142.4185
2021-12-29 18:14:51,800 - mmdet - INFO - Saving checkpoint at 28 epochs
2021-12-29 18:16:06,110 - mmdet - INFO - Epoch [29][50/53]	lr: 2.500e-06, eta: 0:07:48, time: 1.330, data_time: 0.223, memory: 8613, stage0_loss_cls: 0.3690, stage0_pos_acc: 95.2500, stage0_loss_bbox: 0.2966, stage0_loss_iou: 0.5335, stage0_loss_global: 0.1051, stage0_loss_mask: 0.5075, stage1_loss_cls: 0.2147, stage1_pos_acc: 96.2500, stage1_loss_bbox: 0.2037, stage1_loss_iou: 0.3629, stage1_loss_global: 0.0979, stage1_loss_mask: 0.4746, stage2_loss_cls: 0.1313, stage2_pos_acc: 95.7500, stage2_loss_bbox: 0.1919, stage2_loss_iou: 0.3435, stage2_loss_global: 0.0948, stage2_loss_mask: 0.4856, stage3_loss_cls: 0.0959, stage3_pos_acc: 96.2500, stage3_loss_bbox: 0.1913, stage3_loss_iou: 0.3419, stage3_loss_global: 0.0923, stage3_loss_mask: 0.4697, stage4_loss_cls: 0.0767, stage4_pos_acc: 96.2500, stage4_loss_bbox: 0.1940, stage4_loss_iou: 0.3461, stage4_loss_global: 0.0883, stage4_loss_mask: 0.4716, stage5_loss_cls: 0.0765, stage5_pos_acc: 96.0000, stage5_loss_bbox: 0.1917, stage5_loss_iou: 0.3424, stage5_loss_global: 0.0884, stage5_loss_mask: 0.4585, loss: 7.9381, grad_norm: 265.4783
2021-12-29 18:16:09,840 - mmdet - INFO - Saving checkpoint at 29 epochs
2021-12-29 18:17:24,368 - mmdet - INFO - Epoch [30][50/53]	lr: 2.500e-06, eta: 0:06:41, time: 1.333, data_time: 0.225, memory: 8613, stage0_loss_cls: 0.3738, stage0_pos_acc: 96.2500, stage0_loss_bbox: 0.2814, stage0_loss_iou: 0.5155, stage0_loss_global: 0.1019, stage0_loss_mask: 0.5005, stage1_loss_cls: 0.2141, stage1_pos_acc: 96.5000, stage1_loss_bbox: 0.1999, stage1_loss_iou: 0.3624, stage1_loss_global: 0.0980, stage1_loss_mask: 0.4910, stage2_loss_cls: 0.1203, stage2_pos_acc: 96.2500, stage2_loss_bbox: 0.1930, stage2_loss_iou: 0.3492, stage2_loss_global: 0.0949, stage2_loss_mask: 0.5046, stage3_loss_cls: 0.0943, stage3_pos_acc: 96.7500, stage3_loss_bbox: 0.1927, stage3_loss_iou: 0.3442, stage3_loss_global: 0.0899, stage3_loss_mask: 0.4834, stage4_loss_cls: 0.0795, stage4_pos_acc: 96.7500, stage4_loss_bbox: 0.1903, stage4_loss_iou: 0.3421, stage4_loss_global: 0.0862, stage4_loss_mask: 0.4800, stage5_loss_cls: 0.0786, stage5_pos_acc: 96.5000, stage5_loss_bbox: 0.1894, stage5_loss_iou: 0.3392, stage5_loss_global: 0.0844, stage5_loss_mask: 0.4731, loss: 7.9476, grad_norm: 233.9165
2021-12-29 18:17:28,273 - mmdet - INFO - Saving checkpoint at 30 epochs
2021-12-29 18:18:43,043 - mmdet - INFO - Epoch [31][50/53]	lr: 2.500e-06, eta: 0:05:35, time: 1.335, data_time: 0.219, memory: 8613, stage0_loss_cls: 0.3487, stage0_pos_acc: 95.0000, stage0_loss_bbox: 0.2802, stage0_loss_iou: 0.5063, stage0_loss_global: 0.1047, stage0_loss_mask: 0.4872, stage1_loss_cls: 0.2117, stage1_pos_acc: 97.0000, stage1_loss_bbox: 0.2019, stage1_loss_iou: 0.3581, stage1_loss_global: 0.0982, stage1_loss_mask: 0.4871, stage2_loss_cls: 0.1069, stage2_pos_acc: 97.2500, stage2_loss_bbox: 0.1943, stage2_loss_iou: 0.3444, stage2_loss_global: 0.0939, stage2_loss_mask: 0.4930, stage3_loss_cls: 0.0887, stage3_pos_acc: 96.5000, stage3_loss_bbox: 0.1888, stage3_loss_iou: 0.3365, stage3_loss_global: 0.0898, stage3_loss_mask: 0.4717, stage4_loss_cls: 0.0791, stage4_pos_acc: 96.5000, stage4_loss_bbox: 0.1892, stage4_loss_iou: 0.3341, stage4_loss_global: 0.0820, stage4_loss_mask: 0.4717, stage5_loss_cls: 0.0756, stage5_pos_acc: 96.2500, stage5_loss_bbox: 0.1915, stage5_loss_iou: 0.3362, stage5_loss_global: 0.0822, stage5_loss_mask: 0.4569, loss: 7.7904, grad_norm: 155.0865
2021-12-29 18:18:46,797 - mmdet - INFO - Saving checkpoint at 31 epochs
2021-12-29 18:20:00,975 - mmdet - INFO - Epoch [32][50/53]	lr: 2.500e-06, eta: 0:04:29, time: 1.326, data_time: 0.220, memory: 8613, stage0_loss_cls: 0.3635, stage0_pos_acc: 95.0000, stage0_loss_bbox: 0.2817, stage0_loss_iou: 0.5166, stage0_loss_global: 0.1032, stage0_loss_mask: 0.4869, stage1_loss_cls: 0.1929, stage1_pos_acc: 97.7500, stage1_loss_bbox: 0.1990, stage1_loss_iou: 0.3612, stage1_loss_global: 0.0961, stage1_loss_mask: 0.4700, stage2_loss_cls: 0.1112, stage2_pos_acc: 97.5000, stage2_loss_bbox: 0.1907, stage2_loss_iou: 0.3469, stage2_loss_global: 0.0873, stage2_loss_mask: 0.4815, stage3_loss_cls: 0.0835, stage3_pos_acc: 98.0000, stage3_loss_bbox: 0.1906, stage3_loss_iou: 0.3429, stage3_loss_global: 0.0835, stage3_loss_mask: 0.4673, stage4_loss_cls: 0.0724, stage4_pos_acc: 98.2500, stage4_loss_bbox: 0.1881, stage4_loss_iou: 0.3380, stage4_loss_global: 0.0741, stage4_loss_mask: 0.4636, stage5_loss_cls: 0.0722, stage5_pos_acc: 98.2500, stage5_loss_bbox: 0.1882, stage5_loss_iou: 0.3366, stage5_loss_global: 0.0723, stage5_loss_mask: 0.4570, loss: 7.7193, grad_norm: 332.3146
2021-12-29 18:20:04,913 - mmdet - INFO - Saving checkpoint at 32 epochs
2021-12-29 18:21:19,072 - mmdet - INFO - Epoch [33][50/53]	lr: 2.500e-06, eta: 0:03:22, time: 1.325, data_time: 0.223, memory: 8613, stage0_loss_cls: 0.3330, stage0_pos_acc: 95.7500, stage0_loss_bbox: 0.2815, stage0_loss_iou: 0.5167, stage0_loss_global: 0.0990, stage0_loss_mask: 0.4843, stage1_loss_cls: 0.1934, stage1_pos_acc: 96.2500, stage1_loss_bbox: 0.2039, stage1_loss_iou: 0.3657, stage1_loss_global: 0.0915, stage1_loss_mask: 0.5008, stage2_loss_cls: 0.1131, stage2_pos_acc: 97.7500, stage2_loss_bbox: 0.1953, stage2_loss_iou: 0.3531, stage2_loss_global: 0.0883, stage2_loss_mask: 0.5068, stage3_loss_cls: 0.0853, stage3_pos_acc: 97.5000, stage3_loss_bbox: 0.1947, stage3_loss_iou: 0.3507, stage3_loss_global: 0.0835, stage3_loss_mask: 0.4914, stage4_loss_cls: 0.0664, stage4_pos_acc: 98.0000, stage4_loss_bbox: 0.1965, stage4_loss_iou: 0.3510, stage4_loss_global: 0.0757, stage4_loss_mask: 0.4981, stage5_loss_cls: 0.0579, stage5_pos_acc: 98.2500, stage5_loss_bbox: 0.2006, stage5_loss_iou: 0.3542, stage5_loss_global: 0.0729, stage5_loss_mask: 0.4908, loss: 7.8960, grad_norm: 151.1926
2021-12-29 18:21:23,021 - mmdet - INFO - Saving checkpoint at 33 epochs
2021-12-29 18:22:37,919 - mmdet - INFO - Epoch [34][50/53]	lr: 2.500e-07, eta: 0:02:16, time: 1.341, data_time: 0.223, memory: 8613, stage0_loss_cls: 0.3307, stage0_pos_acc: 95.7500, stage0_loss_bbox: 0.2713, stage0_loss_iou: 0.4939, stage0_loss_global: 0.1002, stage0_loss_mask: 0.5046, stage1_loss_cls: 0.1793, stage1_pos_acc: 96.2500, stage1_loss_bbox: 0.1919, stage1_loss_iou: 0.3530, stage1_loss_global: 0.0946, stage1_loss_mask: 0.4760, stage2_loss_cls: 0.1013, stage2_pos_acc: 96.2500, stage2_loss_bbox: 0.1838, stage2_loss_iou: 0.3368, stage2_loss_global: 0.0883, stage2_loss_mask: 0.4924, stage3_loss_cls: 0.0848, stage3_pos_acc: 96.7500, stage3_loss_bbox: 0.1813, stage3_loss_iou: 0.3316, stage3_loss_global: 0.0842, stage3_loss_mask: 0.4701, stage4_loss_cls: 0.0717, stage4_pos_acc: 96.2500, stage4_loss_bbox: 0.1842, stage4_loss_iou: 0.3337, stage4_loss_global: 0.0736, stage4_loss_mask: 0.4730, stage5_loss_cls: 0.0688, stage5_pos_acc: 96.5000, stage5_loss_bbox: 0.1852, stage5_loss_iou: 0.3332, stage5_loss_global: 0.0740, stage5_loss_mask: 0.4657, loss: 7.6132, grad_norm: 159.1171
2021-12-29 18:22:41,711 - mmdet - INFO - Saving checkpoint at 34 epochs
2021-12-29 18:23:55,927 - mmdet - INFO - Epoch [35][50/53]	lr: 2.500e-07, eta: 0:01:10, time: 1.328, data_time: 0.223, memory: 8613, stage0_loss_cls: 0.3489, stage0_pos_acc: 95.5000, stage0_loss_bbox: 0.2720, stage0_loss_iou: 0.5000, stage0_loss_global: 0.0998, stage0_loss_mask: 0.5087, stage1_loss_cls: 0.2071, stage1_pos_acc: 96.5000, stage1_loss_bbox: 0.1923, stage1_loss_iou: 0.3572, stage1_loss_global: 0.0935, stage1_loss_mask: 0.4683, stage2_loss_cls: 0.1220, stage2_pos_acc: 97.0000, stage2_loss_bbox: 0.1850, stage2_loss_iou: 0.3427, stage2_loss_global: 0.0895, stage2_loss_mask: 0.4867, stage3_loss_cls: 0.0896, stage3_pos_acc: 97.0000, stage3_loss_bbox: 0.1833, stage3_loss_iou: 0.3382, stage3_loss_global: 0.0854, stage3_loss_mask: 0.4687, stage4_loss_cls: 0.0759, stage4_pos_acc: 97.7500, stage4_loss_bbox: 0.1826, stage4_loss_iou: 0.3357, stage4_loss_global: 0.0797, stage4_loss_mask: 0.4728, stage5_loss_cls: 0.0740, stage5_pos_acc: 96.7500, stage5_loss_bbox: 0.1814, stage5_loss_iou: 0.3341, stage5_loss_global: 0.0798, stage5_loss_mask: 0.4600, loss: 7.7149, grad_norm: 151.8280
2021-12-29 18:23:59,727 - mmdet - INFO - Saving checkpoint at 35 epochs
2021-12-29 18:25:14,452 - mmdet - INFO - Epoch [36][50/53]	lr: 2.500e-07, eta: 0:00:03, time: 1.336, data_time: 0.219, memory: 8613, stage0_loss_cls: 0.3233, stage0_pos_acc: 96.5000, stage0_loss_bbox: 0.2651, stage0_loss_iou: 0.4856, stage0_loss_global: 0.0826, stage0_loss_mask: 0.4906, stage1_loss_cls: 0.1961, stage1_pos_acc: 96.5000, stage1_loss_bbox: 0.1982, stage1_loss_iou: 0.3595, stage1_loss_global: 0.0755, stage1_loss_mask: 0.4726, stage2_loss_cls: 0.1074, stage2_pos_acc: 96.5000, stage2_loss_bbox: 0.1913, stage2_loss_iou: 0.3424, stage2_loss_global: 0.0741, stage2_loss_mask: 0.4846, stage3_loss_cls: 0.0769, stage3_pos_acc: 96.5000, stage3_loss_bbox: 0.1914, stage3_loss_iou: 0.3407, stage3_loss_global: 0.0710, stage3_loss_mask: 0.4684, stage4_loss_cls: 0.0675, stage4_pos_acc: 97.0000, stage4_loss_bbox: 0.1877, stage4_loss_iou: 0.3346, stage4_loss_global: 0.0667, stage4_loss_mask: 0.4657, stage5_loss_cls: 0.0667, stage5_pos_acc: 96.7500, stage5_loss_bbox: 0.1862, stage5_loss_iou: 0.3319, stage5_loss_global: 0.0627, stage5_loss_mask: 0.4589, loss: 7.5259, grad_norm: 186.1941
2021-12-29 18:25:18,165 - mmdet - INFO - Saving checkpoint at 36 epochs
