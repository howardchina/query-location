2021-12-29 16:51:03,364 - mmdet - INFO - Environment info:
------------------------------------------------------------
sys.platform: linux
Python: 3.8.10 (default, Jun  4 2021, 15:09:15) [GCC 7.5.0]
CUDA available: True
GPU 0,1,2,3: NVIDIA TITAN Xp
CUDA_HOME: /usr/local/cuda
NVCC: Cuda compilation tools, release 10.2, V10.2.89
GCC: gcc (Ubuntu 5.4.0-6ubuntu1~16.04.12) 5.4.0 20160609
PyTorch: 1.7.0
PyTorch compiling details: PyTorch built with:
  - GCC 7.3
  - C++ Version: 201402
  - Intel(R) Math Kernel Library Version 2020.0.0 Product Build 20191122 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v1.6.0 (Git Hash 5ef631a030a6f73131c77892041042805a06064f)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 10.2
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75
  - CuDNN 7.6.5
  - Magma 2.5.2
  - Build settings: BLAS=MKL, BUILD_TYPE=Release, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DUSE_VULKAN_WRAPPER -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, USE_CUDA=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, 

TorchVision: 0.8.1
OpenCV: 4.5.3
MMCV: 1.3.18
MMCV Compiler: GCC 7.3
MMCV CUDA Compiler: 10.2
MMDetection: 2.12.0+170db93
------------------------------------------------------------

2021-12-29 16:51:06,339 - mmdet - INFO - Distributed training: True
2021-12-29 16:51:09,252 - mmdet - INFO - Config:
dataset_type = 'AnatomyDataset'
data_root = '/mnt/home1/workspace2/QueryInst/data/usd514_jpeg_roi'
split = 'split_3'
img_norm_cfg = dict(
    mean=[123.675, 116.28, 103.53], std=[58.395, 57.12, 57.375], to_rgb=True)
albu_train_transforms = [
    dict(
        type='OneOf',
        transforms=[
            dict(
                type='Affine',
                translate_percent=0.0,
                rotate=90,
                fit_output=True,
                p=0.25),
            dict(
                type='Affine',
                translate_percent=0.0,
                rotate=180,
                fit_output=True,
                p=0.25),
            dict(
                type='Affine',
                translate_percent=0.0,
                rotate=270,
                fit_output=True,
                p=0.25)
        ],
        p=0.75)
]
train_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(type='LoadAnnotations', with_bbox=True, with_mask=True),
    dict(type='LoadAnatomy'),
    dict(type='RandomFlip', flip_ratio=0.5),
    dict(
        type='Albu',
        transforms=[
            dict(
                type='OneOf',
                transforms=[
                    dict(
                        type='Affine',
                        translate_percent=0.0,
                        rotate=90,
                        fit_output=True,
                        p=0.25),
                    dict(
                        type='Affine',
                        translate_percent=0.0,
                        rotate=180,
                        fit_output=True,
                        p=0.25),
                    dict(
                        type='Affine',
                        translate_percent=0.0,
                        rotate=270,
                        fit_output=True,
                        p=0.25)
                ],
                p=0.75)
        ],
        bbox_params=dict(
            type='BboxParams',
            format='pascal_voc',
            label_fields=['gt_labels'],
            min_visibility=0.0,
            filter_lost_elements=True),
        keymap=dict(img='image', gt_masks='masks', gt_bboxes='bboxes'),
        update_pad_shape=False,
        skip_img_without_anno=True),
    dict(
        type='Resize',
        img_scale=[(1333, 480), (1333, 512), (1333, 544), (1333, 576),
                   (1333, 608), (1333, 640), (1333, 672), (1333, 704),
                   (1333, 736), (1333, 768), (1333, 800)],
        multiscale_mode='value',
        keep_ratio=True),
    dict(
        type='Normalize',
        mean=[123.675, 116.28, 103.53],
        std=[58.395, 57.12, 57.375],
        to_rgb=True),
    dict(type='Pad', size_divisor=32),
    dict(type='DefaultFormatBundle'),
    dict(type='FormatAnatomyBundle'),
    dict(
        type='Collect',
        keys=['img', 'anatomy', 'gt_bboxes', 'gt_labels', 'gt_masks'])
]
test_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(type='LoadAnatomy'),
    dict(
        type='MultiScaleFlipAug',
        img_scale=(1333, 800),
        flip=False,
        transforms=[
            dict(type='Resize', keep_ratio=True),
            dict(type='RandomFlip'),
            dict(
                type='Normalize',
                mean=[123.675, 116.28, 103.53],
                std=[58.395, 57.12, 57.375],
                to_rgb=True),
            dict(type='Pad', size_divisor=32),
            dict(type='ImageToTensor', keys=['img']),
            dict(type='FormatAnatomyBundle'),
            dict(type='Collect', keys=['img', 'anatomy'])
        ])
]
data = dict(
    samples_per_gpu=2,
    workers_per_gpu=2,
    train=dict(
        type='AnatomyDataset',
        ann_file=
        '/mnt/home1/workspace2/QueryInst/data/usd514_jpeg_roi/annotations/train_anno_crop_split_3.json',
        img_prefix=
        '/mnt/home1/workspace2/QueryInst/data/usd514_jpeg_roi/images/',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(type='LoadAnnotations', with_bbox=True, with_mask=True),
            dict(type='LoadAnatomy'),
            dict(type='RandomFlip', flip_ratio=0.5),
            dict(
                type='Albu',
                transforms=[
                    dict(
                        type='OneOf',
                        transforms=[
                            dict(
                                type='Affine',
                                translate_percent=0.0,
                                rotate=90,
                                fit_output=True,
                                p=0.25),
                            dict(
                                type='Affine',
                                translate_percent=0.0,
                                rotate=180,
                                fit_output=True,
                                p=0.25),
                            dict(
                                type='Affine',
                                translate_percent=0.0,
                                rotate=270,
                                fit_output=True,
                                p=0.25)
                        ],
                        p=0.75)
                ],
                bbox_params=dict(
                    type='BboxParams',
                    format='pascal_voc',
                    label_fields=['gt_labels'],
                    min_visibility=0.0,
                    filter_lost_elements=True),
                keymap=dict(img='image', gt_masks='masks', gt_bboxes='bboxes'),
                update_pad_shape=False,
                skip_img_without_anno=True),
            dict(
                type='Resize',
                img_scale=[(1333, 480), (1333, 512), (1333, 544), (1333, 576),
                           (1333, 608), (1333, 640), (1333, 672), (1333, 704),
                           (1333, 736), (1333, 768), (1333, 800)],
                multiscale_mode='value',
                keep_ratio=True),
            dict(
                type='Normalize',
                mean=[123.675, 116.28, 103.53],
                std=[58.395, 57.12, 57.375],
                to_rgb=True),
            dict(type='Pad', size_divisor=32),
            dict(type='DefaultFormatBundle'),
            dict(type='FormatAnatomyBundle'),
            dict(
                type='Collect',
                keys=['img', 'anatomy', 'gt_bboxes', 'gt_labels', 'gt_masks'])
        ],
        classes=('lmym', 'GIST')),
    val=dict(
        type='AnatomyDataset',
        ann_file=
        '/mnt/home1/workspace2/QueryInst/data/usd514_jpeg_roi/annotations/val_anno_crop_split_3.json',
        img_prefix=
        '/mnt/home1/workspace2/QueryInst/data/usd514_jpeg_roi/images/',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(type='LoadAnatomy'),
            dict(
                type='MultiScaleFlipAug',
                img_scale=(1333, 800),
                flip=False,
                transforms=[
                    dict(type='Resize', keep_ratio=True),
                    dict(type='RandomFlip'),
                    dict(
                        type='Normalize',
                        mean=[123.675, 116.28, 103.53],
                        std=[58.395, 57.12, 57.375],
                        to_rgb=True),
                    dict(type='Pad', size_divisor=32),
                    dict(type='ImageToTensor', keys=['img']),
                    dict(type='FormatAnatomyBundle'),
                    dict(type='Collect', keys=['img', 'anatomy'])
                ])
        ],
        classes=('lmym', 'GIST')),
    test=dict(
        type='AnatomyDataset',
        ann_file=
        '/mnt/home1/workspace2/QueryInst/data/usd514_jpeg_roi/annotations/val_anno_crop_split_3.json',
        img_prefix=
        '/mnt/home1/workspace2/QueryInst/data/usd514_jpeg_roi/images/',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(type='LoadAnatomy'),
            dict(
                type='MultiScaleFlipAug',
                img_scale=(1333, 800),
                flip=False,
                transforms=[
                    dict(type='Resize', keep_ratio=True),
                    dict(type='RandomFlip'),
                    dict(
                        type='Normalize',
                        mean=[123.675, 116.28, 103.53],
                        std=[58.395, 57.12, 57.375],
                        to_rgb=True),
                    dict(type='Pad', size_divisor=32),
                    dict(type='ImageToTensor', keys=['img']),
                    dict(type='FormatAnatomyBundle'),
                    dict(type='Collect', keys=['img', 'anatomy'])
                ])
        ],
        classes=('lmym', 'GIST')))
evaluation = dict(metric=['bbox', 'segm', 'glob'])
optimizer = dict(type='AdamW', lr=2.5e-05, weight_decay=0.0001)
optimizer_config = dict(grad_clip=dict(max_norm=1, norm_type=2))
lr_config = dict(
    policy='step',
    warmup='linear',
    warmup_iters=1000,
    warmup_ratio=0.001,
    step=[27, 33])
runner = dict(type='EpochBasedRunner', max_epochs=36)
checkpoint_config = dict(interval=1)
log_config = dict(interval=50, hooks=[dict(type='TextLoggerHook')])
custom_hooks = [dict(type='NumClassCheckHook')]
dist_params = dict(backend='nccl')
log_level = 'INFO'
load_from = 'work_dirs/pretrained/queryInst/queryinst_r101_300_queries-860dc5d5.pth'
resume_from = None
workflow = [('train', 1)]
num_stages = 6
num_proposals = 300
model = dict(
    type='QueryGlob',
    pretrained='torchvision://resnet101',
    backbone=dict(
        type='ResNet',
        depth=101,
        num_stages=4,
        out_indices=(0, 1, 2, 3),
        frozen_stages=1,
        norm_cfg=dict(type='BN', requires_grad=True),
        norm_eval=True,
        style='pytorch'),
    neck=dict(
        type='FPN',
        in_channels=[256, 512, 1024, 2048],
        out_channels=256,
        start_level=0,
        add_extra_convs='on_input',
        num_outs=4),
    rpn_head=dict(
        type='GlobalEmbeddingRPNHead',
        num_proposals=300,
        dim_global=7,
        proposal_feature_channel=256),
    roi_head=dict(
        type='QueryGlobRoIHead',
        num_stages=6,
        stage_loss_weights=[1, 1, 1, 1, 1, 1],
        proposal_feature_channel=256,
        bbox_roi_extractor=dict(
            type='SingleRoIExtractor',
            roi_layer=dict(type='RoIAlign', output_size=7, sampling_ratio=2),
            out_channels=256,
            featmap_strides=[4, 8, 16, 32]),
        mask_roi_extractor=dict(
            type='SingleRoIExtractor',
            roi_layer=dict(type='RoIAlign', output_size=14, sampling_ratio=2),
            out_channels=256,
            featmap_strides=[4, 8, 16, 32]),
        bbox_head=[
            dict(
                type='GlobDIIHead',
                num_classes=2,
                num_ffn_fcs=2,
                num_heads=8,
                num_cls_fcs=2,
                num_glb_fcs=2,
                num_reg_fcs=3,
                feedforward_channels=2048,
                in_channels=256,
                dropout=0.0,
                ffn_act_cfg=dict(type='ReLU', inplace=True),
                dynamic_conv_cfg=dict(
                    type='DynamicConv',
                    in_channels=256,
                    feat_channels=64,
                    out_channels=256,
                    input_feat_shape=7,
                    with_proj=True,
                    act_cfg=dict(type='ReLU', inplace=True),
                    norm_cfg=dict(type='LN')),
                loss_bbox=dict(type='L1Loss', loss_weight=5.0),
                loss_iou=dict(type='GIoULoss', loss_weight=2.0),
                loss_cls=dict(
                    type='FocalLoss',
                    use_sigmoid=True,
                    gamma=2.0,
                    alpha=0.25,
                    loss_weight=2.0),
                loss_global=dict(type='CrossEntropyLoss', loss_weight=1.0),
                bbox_coder=dict(
                    type='DeltaXYWHBBoxCoder',
                    clip_border=False,
                    target_means=[0.0, 0.0, 0.0, 0.0],
                    target_stds=[0.5, 0.5, 1.0, 1.0])),
            dict(
                type='GlobDIIHead',
                num_classes=2,
                num_ffn_fcs=2,
                num_heads=8,
                num_cls_fcs=2,
                num_glb_fcs=2,
                num_reg_fcs=3,
                feedforward_channels=2048,
                in_channels=256,
                dropout=0.0,
                ffn_act_cfg=dict(type='ReLU', inplace=True),
                dynamic_conv_cfg=dict(
                    type='DynamicConv',
                    in_channels=256,
                    feat_channels=64,
                    out_channels=256,
                    input_feat_shape=7,
                    with_proj=True,
                    act_cfg=dict(type='ReLU', inplace=True),
                    norm_cfg=dict(type='LN')),
                loss_bbox=dict(type='L1Loss', loss_weight=5.0),
                loss_iou=dict(type='GIoULoss', loss_weight=2.0),
                loss_cls=dict(
                    type='FocalLoss',
                    use_sigmoid=True,
                    gamma=2.0,
                    alpha=0.25,
                    loss_weight=2.0),
                loss_global=dict(type='CrossEntropyLoss', loss_weight=1.0),
                bbox_coder=dict(
                    type='DeltaXYWHBBoxCoder',
                    clip_border=False,
                    target_means=[0.0, 0.0, 0.0, 0.0],
                    target_stds=[0.5, 0.5, 1.0, 1.0])),
            dict(
                type='GlobDIIHead',
                num_classes=2,
                num_ffn_fcs=2,
                num_heads=8,
                num_cls_fcs=2,
                num_glb_fcs=2,
                num_reg_fcs=3,
                feedforward_channels=2048,
                in_channels=256,
                dropout=0.0,
                ffn_act_cfg=dict(type='ReLU', inplace=True),
                dynamic_conv_cfg=dict(
                    type='DynamicConv',
                    in_channels=256,
                    feat_channels=64,
                    out_channels=256,
                    input_feat_shape=7,
                    with_proj=True,
                    act_cfg=dict(type='ReLU', inplace=True),
                    norm_cfg=dict(type='LN')),
                loss_bbox=dict(type='L1Loss', loss_weight=5.0),
                loss_iou=dict(type='GIoULoss', loss_weight=2.0),
                loss_cls=dict(
                    type='FocalLoss',
                    use_sigmoid=True,
                    gamma=2.0,
                    alpha=0.25,
                    loss_weight=2.0),
                loss_global=dict(type='CrossEntropyLoss', loss_weight=1.0),
                bbox_coder=dict(
                    type='DeltaXYWHBBoxCoder',
                    clip_border=False,
                    target_means=[0.0, 0.0, 0.0, 0.0],
                    target_stds=[0.5, 0.5, 1.0, 1.0])),
            dict(
                type='GlobDIIHead',
                num_classes=2,
                num_ffn_fcs=2,
                num_heads=8,
                num_cls_fcs=2,
                num_glb_fcs=2,
                num_reg_fcs=3,
                feedforward_channels=2048,
                in_channels=256,
                dropout=0.0,
                ffn_act_cfg=dict(type='ReLU', inplace=True),
                dynamic_conv_cfg=dict(
                    type='DynamicConv',
                    in_channels=256,
                    feat_channels=64,
                    out_channels=256,
                    input_feat_shape=7,
                    with_proj=True,
                    act_cfg=dict(type='ReLU', inplace=True),
                    norm_cfg=dict(type='LN')),
                loss_bbox=dict(type='L1Loss', loss_weight=5.0),
                loss_iou=dict(type='GIoULoss', loss_weight=2.0),
                loss_cls=dict(
                    type='FocalLoss',
                    use_sigmoid=True,
                    gamma=2.0,
                    alpha=0.25,
                    loss_weight=2.0),
                loss_global=dict(type='CrossEntropyLoss', loss_weight=1.0),
                bbox_coder=dict(
                    type='DeltaXYWHBBoxCoder',
                    clip_border=False,
                    target_means=[0.0, 0.0, 0.0, 0.0],
                    target_stds=[0.5, 0.5, 1.0, 1.0])),
            dict(
                type='GlobDIIHead',
                num_classes=2,
                num_ffn_fcs=2,
                num_heads=8,
                num_cls_fcs=2,
                num_glb_fcs=2,
                num_reg_fcs=3,
                feedforward_channels=2048,
                in_channels=256,
                dropout=0.0,
                ffn_act_cfg=dict(type='ReLU', inplace=True),
                dynamic_conv_cfg=dict(
                    type='DynamicConv',
                    in_channels=256,
                    feat_channels=64,
                    out_channels=256,
                    input_feat_shape=7,
                    with_proj=True,
                    act_cfg=dict(type='ReLU', inplace=True),
                    norm_cfg=dict(type='LN')),
                loss_bbox=dict(type='L1Loss', loss_weight=5.0),
                loss_iou=dict(type='GIoULoss', loss_weight=2.0),
                loss_cls=dict(
                    type='FocalLoss',
                    use_sigmoid=True,
                    gamma=2.0,
                    alpha=0.25,
                    loss_weight=2.0),
                loss_global=dict(type='CrossEntropyLoss', loss_weight=1.0),
                bbox_coder=dict(
                    type='DeltaXYWHBBoxCoder',
                    clip_border=False,
                    target_means=[0.0, 0.0, 0.0, 0.0],
                    target_stds=[0.5, 0.5, 1.0, 1.0])),
            dict(
                type='GlobDIIHead',
                num_classes=2,
                num_ffn_fcs=2,
                num_heads=8,
                num_cls_fcs=2,
                num_glb_fcs=2,
                num_reg_fcs=3,
                feedforward_channels=2048,
                in_channels=256,
                dropout=0.0,
                ffn_act_cfg=dict(type='ReLU', inplace=True),
                dynamic_conv_cfg=dict(
                    type='DynamicConv',
                    in_channels=256,
                    feat_channels=64,
                    out_channels=256,
                    input_feat_shape=7,
                    with_proj=True,
                    act_cfg=dict(type='ReLU', inplace=True),
                    norm_cfg=dict(type='LN')),
                loss_bbox=dict(type='L1Loss', loss_weight=5.0),
                loss_iou=dict(type='GIoULoss', loss_weight=2.0),
                loss_cls=dict(
                    type='FocalLoss',
                    use_sigmoid=True,
                    gamma=2.0,
                    alpha=0.25,
                    loss_weight=2.0),
                loss_global=dict(type='CrossEntropyLoss', loss_weight=1.0),
                bbox_coder=dict(
                    type='DeltaXYWHBBoxCoder',
                    clip_border=False,
                    target_means=[0.0, 0.0, 0.0, 0.0],
                    target_stds=[0.5, 0.5, 1.0, 1.0]))
        ],
        mask_head=[
            dict(
                type='DynamicMaskHead',
                num_classes=2,
                dynamic_conv_cfg=dict(
                    type='DynamicConv',
                    in_channels=256,
                    feat_channels=64,
                    out_channels=256,
                    input_feat_shape=14,
                    with_proj=False,
                    act_cfg=dict(type='ReLU', inplace=True),
                    norm_cfg=dict(type='LN')),
                dropout=0.0,
                num_convs=4,
                roi_feat_size=14,
                in_channels=256,
                conv_kernel_size=3,
                conv_out_channels=256,
                class_agnostic=False,
                norm_cfg=dict(type='BN'),
                upsample_cfg=dict(type='deconv', scale_factor=2),
                loss_dice=dict(type='DiceLoss', loss_weight=8.0)),
            dict(
                type='DynamicMaskHead',
                num_classes=2,
                dynamic_conv_cfg=dict(
                    type='DynamicConv',
                    in_channels=256,
                    feat_channels=64,
                    out_channels=256,
                    input_feat_shape=14,
                    with_proj=False,
                    act_cfg=dict(type='ReLU', inplace=True),
                    norm_cfg=dict(type='LN')),
                dropout=0.0,
                num_convs=4,
                roi_feat_size=14,
                in_channels=256,
                conv_kernel_size=3,
                conv_out_channels=256,
                class_agnostic=False,
                norm_cfg=dict(type='BN'),
                upsample_cfg=dict(type='deconv', scale_factor=2),
                loss_dice=dict(type='DiceLoss', loss_weight=8.0)),
            dict(
                type='DynamicMaskHead',
                num_classes=2,
                dynamic_conv_cfg=dict(
                    type='DynamicConv',
                    in_channels=256,
                    feat_channels=64,
                    out_channels=256,
                    input_feat_shape=14,
                    with_proj=False,
                    act_cfg=dict(type='ReLU', inplace=True),
                    norm_cfg=dict(type='LN')),
                dropout=0.0,
                num_convs=4,
                roi_feat_size=14,
                in_channels=256,
                conv_kernel_size=3,
                conv_out_channels=256,
                class_agnostic=False,
                norm_cfg=dict(type='BN'),
                upsample_cfg=dict(type='deconv', scale_factor=2),
                loss_dice=dict(type='DiceLoss', loss_weight=8.0)),
            dict(
                type='DynamicMaskHead',
                num_classes=2,
                dynamic_conv_cfg=dict(
                    type='DynamicConv',
                    in_channels=256,
                    feat_channels=64,
                    out_channels=256,
                    input_feat_shape=14,
                    with_proj=False,
                    act_cfg=dict(type='ReLU', inplace=True),
                    norm_cfg=dict(type='LN')),
                dropout=0.0,
                num_convs=4,
                roi_feat_size=14,
                in_channels=256,
                conv_kernel_size=3,
                conv_out_channels=256,
                class_agnostic=False,
                norm_cfg=dict(type='BN'),
                upsample_cfg=dict(type='deconv', scale_factor=2),
                loss_dice=dict(type='DiceLoss', loss_weight=8.0)),
            dict(
                type='DynamicMaskHead',
                num_classes=2,
                dynamic_conv_cfg=dict(
                    type='DynamicConv',
                    in_channels=256,
                    feat_channels=64,
                    out_channels=256,
                    input_feat_shape=14,
                    with_proj=False,
                    act_cfg=dict(type='ReLU', inplace=True),
                    norm_cfg=dict(type='LN')),
                dropout=0.0,
                num_convs=4,
                roi_feat_size=14,
                in_channels=256,
                conv_kernel_size=3,
                conv_out_channels=256,
                class_agnostic=False,
                norm_cfg=dict(type='BN'),
                upsample_cfg=dict(type='deconv', scale_factor=2),
                loss_dice=dict(type='DiceLoss', loss_weight=8.0)),
            dict(
                type='DynamicMaskHead',
                num_classes=2,
                dynamic_conv_cfg=dict(
                    type='DynamicConv',
                    in_channels=256,
                    feat_channels=64,
                    out_channels=256,
                    input_feat_shape=14,
                    with_proj=False,
                    act_cfg=dict(type='ReLU', inplace=True),
                    norm_cfg=dict(type='LN')),
                dropout=0.0,
                num_convs=4,
                roi_feat_size=14,
                in_channels=256,
                conv_kernel_size=3,
                conv_out_channels=256,
                class_agnostic=False,
                norm_cfg=dict(type='BN'),
                upsample_cfg=dict(type='deconv', scale_factor=2),
                loss_dice=dict(type='DiceLoss', loss_weight=8.0))
        ]),
    train_cfg=dict(
        rpn=None,
        rcnn=[
            dict(
                assigner=dict(
                    type='HungarianAssigner',
                    cls_cost=dict(type='FocalLossCost', weight=2.0),
                    reg_cost=dict(type='BBoxL1Cost', weight=5.0),
                    iou_cost=dict(type='IoUCost', iou_mode='giou',
                                  weight=2.0)),
                sampler=dict(type='PseudoSampler'),
                pos_weight=1,
                mask_size=28,
                debug=False),
            dict(
                assigner=dict(
                    type='HungarianAssigner',
                    cls_cost=dict(type='FocalLossCost', weight=2.0),
                    reg_cost=dict(type='BBoxL1Cost', weight=5.0),
                    iou_cost=dict(type='IoUCost', iou_mode='giou',
                                  weight=2.0)),
                sampler=dict(type='PseudoSampler'),
                pos_weight=1,
                mask_size=28,
                debug=False),
            dict(
                assigner=dict(
                    type='HungarianAssigner',
                    cls_cost=dict(type='FocalLossCost', weight=2.0),
                    reg_cost=dict(type='BBoxL1Cost', weight=5.0),
                    iou_cost=dict(type='IoUCost', iou_mode='giou',
                                  weight=2.0)),
                sampler=dict(type='PseudoSampler'),
                pos_weight=1,
                mask_size=28,
                debug=False),
            dict(
                assigner=dict(
                    type='HungarianAssigner',
                    cls_cost=dict(type='FocalLossCost', weight=2.0),
                    reg_cost=dict(type='BBoxL1Cost', weight=5.0),
                    iou_cost=dict(type='IoUCost', iou_mode='giou',
                                  weight=2.0)),
                sampler=dict(type='PseudoSampler'),
                pos_weight=1,
                mask_size=28,
                debug=False),
            dict(
                assigner=dict(
                    type='HungarianAssigner',
                    cls_cost=dict(type='FocalLossCost', weight=2.0),
                    reg_cost=dict(type='BBoxL1Cost', weight=5.0),
                    iou_cost=dict(type='IoUCost', iou_mode='giou',
                                  weight=2.0)),
                sampler=dict(type='PseudoSampler'),
                pos_weight=1,
                mask_size=28,
                debug=False),
            dict(
                assigner=dict(
                    type='HungarianAssigner',
                    cls_cost=dict(type='FocalLossCost', weight=2.0),
                    reg_cost=dict(type='BBoxL1Cost', weight=5.0),
                    iou_cost=dict(type='IoUCost', iou_mode='giou',
                                  weight=2.0)),
                sampler=dict(type='PseudoSampler'),
                pos_weight=1,
                mask_size=28,
                debug=False)
        ]),
    test_cfg=dict(
        rpn=None,
        rcnn=dict(
            max_per_img=300,
            mask_thr_binary=0.5,
            nms=dict(type='nms', iou_threshold=0.7))))
total_epochs = 36
min_values = (480, 512, 544, 576, 608, 640, 672, 704, 736, 768, 800)
classes = ('lmym', 'GIST')
gpu_ids = range(0, 4)
work_dir = './work_dirs/queryglob_usdanno514roi_B_2_7_split3'

2021-12-29 16:51:11,206 - mmdet - INFO - initialize ResNet with init_cfg {'type': 'Pretrained', 'checkpoint': 'torchvision://resnet101'}
2021-12-29 16:51:11,730 - mmdet - INFO - initialize FPN with init_cfg {'type': 'Xavier', 'layer': 'Conv2d', 'distribution': 'uniform'}
2021-12-29 16:51:11,756 - mmdet - INFO - initialize GlobDIIHead with init_cfg [{'type': 'Normal', 'std': 0.01, 'override': {'name': 'fc_cls'}}, {'type': 'Normal', 'std': 0.001, 'override': {'name': 'fc_reg'}}]
2021-12-29 16:51:11,875 - mmdet - INFO - initialize GlobDIIHead with init_cfg [{'type': 'Normal', 'std': 0.01, 'override': {'name': 'fc_cls'}}, {'type': 'Normal', 'std': 0.001, 'override': {'name': 'fc_reg'}}]
2021-12-29 16:51:11,998 - mmdet - INFO - initialize GlobDIIHead with init_cfg [{'type': 'Normal', 'std': 0.01, 'override': {'name': 'fc_cls'}}, {'type': 'Normal', 'std': 0.001, 'override': {'name': 'fc_reg'}}]
2021-12-29 16:51:12,116 - mmdet - INFO - initialize GlobDIIHead with init_cfg [{'type': 'Normal', 'std': 0.01, 'override': {'name': 'fc_cls'}}, {'type': 'Normal', 'std': 0.001, 'override': {'name': 'fc_reg'}}]
2021-12-29 16:51:12,236 - mmdet - INFO - initialize GlobDIIHead with init_cfg [{'type': 'Normal', 'std': 0.01, 'override': {'name': 'fc_cls'}}, {'type': 'Normal', 'std': 0.001, 'override': {'name': 'fc_reg'}}]
2021-12-29 16:51:12,354 - mmdet - INFO - initialize GlobDIIHead with init_cfg [{'type': 'Normal', 'std': 0.01, 'override': {'name': 'fc_cls'}}, {'type': 'Normal', 'std': 0.001, 'override': {'name': 'fc_reg'}}]
Name of parameter - Initialization information

backbone.conv1.weight - torch.Size([64, 3, 7, 7]): 
PretrainedInit: load from torchvision://resnet101 

backbone.bn1.weight - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet101 

backbone.bn1.bias - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer1.0.conv1.weight - torch.Size([64, 64, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer1.0.bn1.weight - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer1.0.bn1.bias - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer1.0.conv2.weight - torch.Size([64, 64, 3, 3]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer1.0.bn2.weight - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer1.0.bn2.bias - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer1.0.conv3.weight - torch.Size([256, 64, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer1.0.bn3.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer1.0.bn3.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer1.0.downsample.0.weight - torch.Size([256, 64, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer1.0.downsample.1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer1.0.downsample.1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer1.1.conv1.weight - torch.Size([64, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer1.1.bn1.weight - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer1.1.bn1.bias - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer1.1.conv2.weight - torch.Size([64, 64, 3, 3]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer1.1.bn2.weight - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer1.1.bn2.bias - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer1.1.conv3.weight - torch.Size([256, 64, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer1.1.bn3.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer1.1.bn3.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer1.2.conv1.weight - torch.Size([64, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer1.2.bn1.weight - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer1.2.bn1.bias - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer1.2.conv2.weight - torch.Size([64, 64, 3, 3]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer1.2.bn2.weight - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer1.2.bn2.bias - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer1.2.conv3.weight - torch.Size([256, 64, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer1.2.bn3.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer1.2.bn3.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer2.0.conv1.weight - torch.Size([128, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer2.0.bn1.weight - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer2.0.bn1.bias - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer2.0.conv2.weight - torch.Size([128, 128, 3, 3]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer2.0.bn2.weight - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer2.0.bn2.bias - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer2.0.conv3.weight - torch.Size([512, 128, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer2.0.bn3.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer2.0.bn3.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer2.0.downsample.0.weight - torch.Size([512, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer2.0.downsample.1.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer2.0.downsample.1.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer2.1.conv1.weight - torch.Size([128, 512, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer2.1.bn1.weight - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer2.1.bn1.bias - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer2.1.conv2.weight - torch.Size([128, 128, 3, 3]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer2.1.bn2.weight - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer2.1.bn2.bias - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer2.1.conv3.weight - torch.Size([512, 128, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer2.1.bn3.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer2.1.bn3.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer2.2.conv1.weight - torch.Size([128, 512, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer2.2.bn1.weight - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer2.2.bn1.bias - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer2.2.conv2.weight - torch.Size([128, 128, 3, 3]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer2.2.bn2.weight - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer2.2.bn2.bias - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer2.2.conv3.weight - torch.Size([512, 128, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer2.2.bn3.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer2.2.bn3.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer2.3.conv1.weight - torch.Size([128, 512, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer2.3.bn1.weight - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer2.3.bn1.bias - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer2.3.conv2.weight - torch.Size([128, 128, 3, 3]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer2.3.bn2.weight - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer2.3.bn2.bias - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer2.3.conv3.weight - torch.Size([512, 128, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer2.3.bn3.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer2.3.bn3.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.0.conv1.weight - torch.Size([256, 512, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.0.bn1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.0.bn1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.0.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.0.bn2.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.0.bn2.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.0.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.0.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.0.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.0.downsample.0.weight - torch.Size([1024, 512, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.0.downsample.1.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.0.downsample.1.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.1.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.1.bn1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.1.bn1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.1.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.1.bn2.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.1.bn2.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.1.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.1.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.1.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.2.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.2.bn1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.2.bn1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.2.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.2.bn2.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.2.bn2.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.2.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.2.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.2.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.3.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.3.bn1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.3.bn1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.3.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.3.bn2.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.3.bn2.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.3.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.3.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.3.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.4.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.4.bn1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.4.bn1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.4.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.4.bn2.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.4.bn2.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.4.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.4.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.4.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.5.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.5.bn1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.5.bn1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.5.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.5.bn2.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.5.bn2.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.5.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.5.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.5.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.6.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.6.bn1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.6.bn1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.6.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.6.bn2.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.6.bn2.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.6.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.6.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.6.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.7.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.7.bn1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.7.bn1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.7.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.7.bn2.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.7.bn2.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.7.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.7.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.7.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.8.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.8.bn1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.8.bn1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.8.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.8.bn2.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.8.bn2.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.8.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.8.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.8.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.9.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.9.bn1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.9.bn1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.9.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.9.bn2.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.9.bn2.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.9.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.9.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.9.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.10.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.10.bn1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.10.bn1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.10.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.10.bn2.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.10.bn2.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.10.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.10.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.10.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.11.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.11.bn1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.11.bn1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.11.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.11.bn2.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.11.bn2.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.11.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.11.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.11.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.12.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.12.bn1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.12.bn1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.12.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.12.bn2.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.12.bn2.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.12.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.12.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.12.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.13.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.13.bn1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.13.bn1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.13.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.13.bn2.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.13.bn2.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.13.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.13.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.13.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.14.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.14.bn1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.14.bn1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.14.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.14.bn2.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.14.bn2.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.14.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.14.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.14.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.15.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.15.bn1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.15.bn1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.15.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.15.bn2.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.15.bn2.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.15.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.15.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.15.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.16.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.16.bn1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.16.bn1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.16.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.16.bn2.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.16.bn2.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.16.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.16.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.16.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.17.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.17.bn1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.17.bn1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.17.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.17.bn2.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.17.bn2.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.17.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.17.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.17.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.18.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.18.bn1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.18.bn1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.18.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.18.bn2.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.18.bn2.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.18.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.18.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.18.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.19.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.19.bn1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.19.bn1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.19.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.19.bn2.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.19.bn2.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.19.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.19.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.19.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.20.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.20.bn1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.20.bn1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.20.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.20.bn2.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.20.bn2.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.20.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.20.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.20.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.21.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.21.bn1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.21.bn1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.21.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.21.bn2.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.21.bn2.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.21.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.21.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.21.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.22.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.22.bn1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.22.bn1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.22.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.22.bn2.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.22.bn2.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.22.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.22.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.22.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer4.0.conv1.weight - torch.Size([512, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer4.0.bn1.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer4.0.bn1.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer4.0.conv2.weight - torch.Size([512, 512, 3, 3]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer4.0.bn2.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer4.0.bn2.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer4.0.conv3.weight - torch.Size([2048, 512, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer4.0.bn3.weight - torch.Size([2048]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer4.0.bn3.bias - torch.Size([2048]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer4.0.downsample.0.weight - torch.Size([2048, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer4.0.downsample.1.weight - torch.Size([2048]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer4.0.downsample.1.bias - torch.Size([2048]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer4.1.conv1.weight - torch.Size([512, 2048, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer4.1.bn1.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer4.1.bn1.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer4.1.conv2.weight - torch.Size([512, 512, 3, 3]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer4.1.bn2.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer4.1.bn2.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer4.1.conv3.weight - torch.Size([2048, 512, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer4.1.bn3.weight - torch.Size([2048]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer4.1.bn3.bias - torch.Size([2048]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer4.2.conv1.weight - torch.Size([512, 2048, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer4.2.bn1.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer4.2.bn1.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer4.2.conv2.weight - torch.Size([512, 512, 3, 3]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer4.2.bn2.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer4.2.bn2.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer4.2.conv3.weight - torch.Size([2048, 512, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer4.2.bn3.weight - torch.Size([2048]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer4.2.bn3.bias - torch.Size([2048]): 
PretrainedInit: load from torchvision://resnet101 

neck.lateral_convs.0.conv.weight - torch.Size([256, 256, 1, 1]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.lateral_convs.0.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

neck.lateral_convs.1.conv.weight - torch.Size([256, 512, 1, 1]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.lateral_convs.1.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

neck.lateral_convs.2.conv.weight - torch.Size([256, 1024, 1, 1]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.lateral_convs.2.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

neck.lateral_convs.3.conv.weight - torch.Size([256, 2048, 1, 1]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.lateral_convs.3.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

neck.fpn_convs.0.conv.weight - torch.Size([256, 256, 3, 3]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.fpn_convs.0.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

neck.fpn_convs.1.conv.weight - torch.Size([256, 256, 3, 3]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.fpn_convs.1.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

neck.fpn_convs.2.conv.weight - torch.Size([256, 256, 3, 3]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.fpn_convs.2.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

neck.fpn_convs.3.conv.weight - torch.Size([256, 256, 3, 3]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.fpn_convs.3.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

rpn_head.init_proposal_bboxes.weight - torch.Size([300, 4]): 
Initialized by user-defined `init_weights` in GlobalEmbeddingRPNHead  

rpn_head.init_proposal_features.weight - torch.Size([300, 256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

rpn_head.global_features_embed.weight - torch.Size([7, 256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.0.fc_cls.weight - torch.Size([2, 256]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.0.fc_cls.bias - torch.Size([2]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.0.fc_reg.weight - torch.Size([4, 256]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.0.fc_reg.bias - torch.Size([4]): 
NormalInit: mean=0, std=0.001, bias=0 

roi_head.bbox_head.0.attention.attn.in_proj_weight - torch.Size([768, 256]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.0.attention.attn.in_proj_bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.0.attention.attn.out_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.0.attention.attn.out_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.0.attention_norm.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.0.attention_norm.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.0.global_attention.attn.in_proj_weight - torch.Size([768, 256]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.0.global_attention.attn.in_proj_bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.0.global_attention.attn.out_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.0.global_attention.attn.out_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.0.global_attention_norm.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.0.global_attention_norm.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.0.instance_interactive_conv.dynamic_layer.weight - torch.Size([32768, 256]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.0.instance_interactive_conv.dynamic_layer.bias - torch.Size([32768]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.0.instance_interactive_conv.norm_in.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.0.instance_interactive_conv.norm_in.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.0.instance_interactive_conv.norm_out.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.0.instance_interactive_conv.norm_out.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.0.instance_interactive_conv.fc_layer.weight - torch.Size([256, 12544]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.0.instance_interactive_conv.fc_layer.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.0.instance_interactive_conv.fc_norm.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.0.instance_interactive_conv.fc_norm.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.0.instance_interactive_conv_norm.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.0.instance_interactive_conv_norm.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.0.ffn.layers.0.0.weight - torch.Size([2048, 256]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.0.ffn.layers.0.0.bias - torch.Size([2048]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.0.ffn.layers.1.weight - torch.Size([256, 2048]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.0.ffn.layers.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.0.ffn_norm.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.0.ffn_norm.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.0.global_ffn.layers.0.0.weight - torch.Size([2048, 256]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.0.global_ffn.layers.0.0.bias - torch.Size([2048]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.0.global_ffn.layers.1.weight - torch.Size([256, 2048]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.0.global_ffn.layers.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.0.global_ffn_norm.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.0.global_ffn_norm.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.0.cls_fcs.0.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.0.cls_fcs.1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.0.cls_fcs.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.0.cls_fcs.3.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.0.cls_fcs.4.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.0.cls_fcs.4.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.0.reg_fcs.0.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.0.reg_fcs.1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.0.reg_fcs.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.0.reg_fcs.3.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.0.reg_fcs.4.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.0.reg_fcs.4.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.0.reg_fcs.6.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.0.reg_fcs.7.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.0.reg_fcs.7.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.0.glb_fcs.0.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.0.glb_fcs.1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.0.glb_fcs.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.0.glb_fcs.3.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.0.glb_fcs.4.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.0.glb_fcs.4.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.0.fc_glb.weight - torch.Size([2, 256]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.0.fc_glb.bias - torch.Size([2]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.1.fc_cls.weight - torch.Size([2, 256]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.1.fc_cls.bias - torch.Size([2]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.1.fc_reg.weight - torch.Size([4, 256]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.1.fc_reg.bias - torch.Size([4]): 
NormalInit: mean=0, std=0.001, bias=0 

roi_head.bbox_head.1.attention.attn.in_proj_weight - torch.Size([768, 256]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.1.attention.attn.in_proj_bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.1.attention.attn.out_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.1.attention.attn.out_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.1.attention_norm.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.1.attention_norm.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.1.global_attention.attn.in_proj_weight - torch.Size([768, 256]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.1.global_attention.attn.in_proj_bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.1.global_attention.attn.out_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.1.global_attention.attn.out_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.1.global_attention_norm.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.1.global_attention_norm.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.1.instance_interactive_conv.dynamic_layer.weight - torch.Size([32768, 256]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.1.instance_interactive_conv.dynamic_layer.bias - torch.Size([32768]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.1.instance_interactive_conv.norm_in.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.1.instance_interactive_conv.norm_in.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.1.instance_interactive_conv.norm_out.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.1.instance_interactive_conv.norm_out.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.1.instance_interactive_conv.fc_layer.weight - torch.Size([256, 12544]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.1.instance_interactive_conv.fc_layer.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.1.instance_interactive_conv.fc_norm.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.1.instance_interactive_conv.fc_norm.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.1.instance_interactive_conv_norm.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.1.instance_interactive_conv_norm.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.1.ffn.layers.0.0.weight - torch.Size([2048, 256]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.1.ffn.layers.0.0.bias - torch.Size([2048]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.1.ffn.layers.1.weight - torch.Size([256, 2048]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.1.ffn.layers.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.1.ffn_norm.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.1.ffn_norm.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.1.global_ffn.layers.0.0.weight - torch.Size([2048, 256]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.1.global_ffn.layers.0.0.bias - torch.Size([2048]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.1.global_ffn.layers.1.weight - torch.Size([256, 2048]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.1.global_ffn.layers.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.1.global_ffn_norm.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.1.global_ffn_norm.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.1.cls_fcs.0.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.1.cls_fcs.1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.1.cls_fcs.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.1.cls_fcs.3.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.1.cls_fcs.4.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.1.cls_fcs.4.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.1.reg_fcs.0.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.1.reg_fcs.1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.1.reg_fcs.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.1.reg_fcs.3.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.1.reg_fcs.4.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.1.reg_fcs.4.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.1.reg_fcs.6.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.1.reg_fcs.7.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.1.reg_fcs.7.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.1.glb_fcs.0.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.1.glb_fcs.1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.1.glb_fcs.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.1.glb_fcs.3.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.1.glb_fcs.4.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.1.glb_fcs.4.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.1.fc_glb.weight - torch.Size([2, 256]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.1.fc_glb.bias - torch.Size([2]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.2.fc_cls.weight - torch.Size([2, 256]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.2.fc_cls.bias - torch.Size([2]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.2.fc_reg.weight - torch.Size([4, 256]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.2.fc_reg.bias - torch.Size([4]): 
NormalInit: mean=0, std=0.001, bias=0 

roi_head.bbox_head.2.attention.attn.in_proj_weight - torch.Size([768, 256]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.2.attention.attn.in_proj_bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.2.attention.attn.out_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.2.attention.attn.out_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.2.attention_norm.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.2.attention_norm.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.2.global_attention.attn.in_proj_weight - torch.Size([768, 256]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.2.global_attention.attn.in_proj_bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.2.global_attention.attn.out_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.2.global_attention.attn.out_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.2.global_attention_norm.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.2.global_attention_norm.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.2.instance_interactive_conv.dynamic_layer.weight - torch.Size([32768, 256]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.2.instance_interactive_conv.dynamic_layer.bias - torch.Size([32768]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.2.instance_interactive_conv.norm_in.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.2.instance_interactive_conv.norm_in.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.2.instance_interactive_conv.norm_out.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.2.instance_interactive_conv.norm_out.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.2.instance_interactive_conv.fc_layer.weight - torch.Size([256, 12544]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.2.instance_interactive_conv.fc_layer.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.2.instance_interactive_conv.fc_norm.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.2.instance_interactive_conv.fc_norm.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.2.instance_interactive_conv_norm.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.2.instance_interactive_conv_norm.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.2.ffn.layers.0.0.weight - torch.Size([2048, 256]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.2.ffn.layers.0.0.bias - torch.Size([2048]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.2.ffn.layers.1.weight - torch.Size([256, 2048]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.2.ffn.layers.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.2.ffn_norm.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.2.ffn_norm.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.2.global_ffn.layers.0.0.weight - torch.Size([2048, 256]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.2.global_ffn.layers.0.0.bias - torch.Size([2048]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.2.global_ffn.layers.1.weight - torch.Size([256, 2048]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.2.global_ffn.layers.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.2.global_ffn_norm.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.2.global_ffn_norm.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.2.cls_fcs.0.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.2.cls_fcs.1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.2.cls_fcs.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.2.cls_fcs.3.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.2.cls_fcs.4.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.2.cls_fcs.4.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.2.reg_fcs.0.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.2.reg_fcs.1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.2.reg_fcs.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.2.reg_fcs.3.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.2.reg_fcs.4.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.2.reg_fcs.4.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.2.reg_fcs.6.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.2.reg_fcs.7.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.2.reg_fcs.7.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.2.glb_fcs.0.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.2.glb_fcs.1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.2.glb_fcs.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.2.glb_fcs.3.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.2.glb_fcs.4.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.2.glb_fcs.4.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.2.fc_glb.weight - torch.Size([2, 256]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.2.fc_glb.bias - torch.Size([2]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.3.fc_cls.weight - torch.Size([2, 256]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.3.fc_cls.bias - torch.Size([2]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.3.fc_reg.weight - torch.Size([4, 256]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.3.fc_reg.bias - torch.Size([4]): 
NormalInit: mean=0, std=0.001, bias=0 

roi_head.bbox_head.3.attention.attn.in_proj_weight - torch.Size([768, 256]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.3.attention.attn.in_proj_bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.3.attention.attn.out_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.3.attention.attn.out_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.3.attention_norm.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.3.attention_norm.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.3.global_attention.attn.in_proj_weight - torch.Size([768, 256]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.3.global_attention.attn.in_proj_bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.3.global_attention.attn.out_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.3.global_attention.attn.out_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.3.global_attention_norm.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.3.global_attention_norm.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.3.instance_interactive_conv.dynamic_layer.weight - torch.Size([32768, 256]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.3.instance_interactive_conv.dynamic_layer.bias - torch.Size([32768]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.3.instance_interactive_conv.norm_in.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.3.instance_interactive_conv.norm_in.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.3.instance_interactive_conv.norm_out.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.3.instance_interactive_conv.norm_out.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.3.instance_interactive_conv.fc_layer.weight - torch.Size([256, 12544]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.3.instance_interactive_conv.fc_layer.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.3.instance_interactive_conv.fc_norm.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.3.instance_interactive_conv.fc_norm.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.3.instance_interactive_conv_norm.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.3.instance_interactive_conv_norm.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.3.ffn.layers.0.0.weight - torch.Size([2048, 256]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.3.ffn.layers.0.0.bias - torch.Size([2048]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.3.ffn.layers.1.weight - torch.Size([256, 2048]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.3.ffn.layers.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.3.ffn_norm.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.3.ffn_norm.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.3.global_ffn.layers.0.0.weight - torch.Size([2048, 256]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.3.global_ffn.layers.0.0.bias - torch.Size([2048]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.3.global_ffn.layers.1.weight - torch.Size([256, 2048]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.3.global_ffn.layers.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.3.global_ffn_norm.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.3.global_ffn_norm.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.3.cls_fcs.0.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.3.cls_fcs.1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.3.cls_fcs.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.3.cls_fcs.3.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.3.cls_fcs.4.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.3.cls_fcs.4.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.3.reg_fcs.0.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.3.reg_fcs.1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.3.reg_fcs.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.3.reg_fcs.3.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.3.reg_fcs.4.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.3.reg_fcs.4.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.3.reg_fcs.6.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.3.reg_fcs.7.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.3.reg_fcs.7.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.3.glb_fcs.0.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.3.glb_fcs.1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.3.glb_fcs.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.3.glb_fcs.3.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.3.glb_fcs.4.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.3.glb_fcs.4.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.3.fc_glb.weight - torch.Size([2, 256]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.3.fc_glb.bias - torch.Size([2]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.4.fc_cls.weight - torch.Size([2, 256]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.4.fc_cls.bias - torch.Size([2]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.4.fc_reg.weight - torch.Size([4, 256]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.4.fc_reg.bias - torch.Size([4]): 
NormalInit: mean=0, std=0.001, bias=0 

roi_head.bbox_head.4.attention.attn.in_proj_weight - torch.Size([768, 256]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.4.attention.attn.in_proj_bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.4.attention.attn.out_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.4.attention.attn.out_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.4.attention_norm.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.4.attention_norm.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.4.global_attention.attn.in_proj_weight - torch.Size([768, 256]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.4.global_attention.attn.in_proj_bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.4.global_attention.attn.out_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.4.global_attention.attn.out_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.4.global_attention_norm.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.4.global_attention_norm.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.4.instance_interactive_conv.dynamic_layer.weight - torch.Size([32768, 256]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.4.instance_interactive_conv.dynamic_layer.bias - torch.Size([32768]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.4.instance_interactive_conv.norm_in.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.4.instance_interactive_conv.norm_in.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.4.instance_interactive_conv.norm_out.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.4.instance_interactive_conv.norm_out.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.4.instance_interactive_conv.fc_layer.weight - torch.Size([256, 12544]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.4.instance_interactive_conv.fc_layer.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.4.instance_interactive_conv.fc_norm.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.4.instance_interactive_conv.fc_norm.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.4.instance_interactive_conv_norm.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.4.instance_interactive_conv_norm.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.4.ffn.layers.0.0.weight - torch.Size([2048, 256]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.4.ffn.layers.0.0.bias - torch.Size([2048]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.4.ffn.layers.1.weight - torch.Size([256, 2048]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.4.ffn.layers.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.4.ffn_norm.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.4.ffn_norm.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.4.global_ffn.layers.0.0.weight - torch.Size([2048, 256]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.4.global_ffn.layers.0.0.bias - torch.Size([2048]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.4.global_ffn.layers.1.weight - torch.Size([256, 2048]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.4.global_ffn.layers.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.4.global_ffn_norm.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.4.global_ffn_norm.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.4.cls_fcs.0.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.4.cls_fcs.1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.4.cls_fcs.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.4.cls_fcs.3.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.4.cls_fcs.4.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.4.cls_fcs.4.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.4.reg_fcs.0.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.4.reg_fcs.1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.4.reg_fcs.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.4.reg_fcs.3.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.4.reg_fcs.4.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.4.reg_fcs.4.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.4.reg_fcs.6.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.4.reg_fcs.7.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.4.reg_fcs.7.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.4.glb_fcs.0.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.4.glb_fcs.1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.4.glb_fcs.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.4.glb_fcs.3.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.4.glb_fcs.4.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.4.glb_fcs.4.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.4.fc_glb.weight - torch.Size([2, 256]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.4.fc_glb.bias - torch.Size([2]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.5.fc_cls.weight - torch.Size([2, 256]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.5.fc_cls.bias - torch.Size([2]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.5.fc_reg.weight - torch.Size([4, 256]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.5.fc_reg.bias - torch.Size([4]): 
NormalInit: mean=0, std=0.001, bias=0 

roi_head.bbox_head.5.attention.attn.in_proj_weight - torch.Size([768, 256]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.5.attention.attn.in_proj_bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.5.attention.attn.out_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.5.attention.attn.out_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.5.attention_norm.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.5.attention_norm.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.5.global_attention.attn.in_proj_weight - torch.Size([768, 256]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.5.global_attention.attn.in_proj_bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.5.global_attention.attn.out_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.5.global_attention.attn.out_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.5.global_attention_norm.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.5.global_attention_norm.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.5.instance_interactive_conv.dynamic_layer.weight - torch.Size([32768, 256]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.5.instance_interactive_conv.dynamic_layer.bias - torch.Size([32768]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.5.instance_interactive_conv.norm_in.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.5.instance_interactive_conv.norm_in.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.5.instance_interactive_conv.norm_out.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.5.instance_interactive_conv.norm_out.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.5.instance_interactive_conv.fc_layer.weight - torch.Size([256, 12544]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.5.instance_interactive_conv.fc_layer.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.5.instance_interactive_conv.fc_norm.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.5.instance_interactive_conv.fc_norm.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.5.instance_interactive_conv_norm.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.5.instance_interactive_conv_norm.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.5.ffn.layers.0.0.weight - torch.Size([2048, 256]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.5.ffn.layers.0.0.bias - torch.Size([2048]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.5.ffn.layers.1.weight - torch.Size([256, 2048]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.5.ffn.layers.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.5.ffn_norm.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.5.ffn_norm.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.5.global_ffn.layers.0.0.weight - torch.Size([2048, 256]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.5.global_ffn.layers.0.0.bias - torch.Size([2048]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.5.global_ffn.layers.1.weight - torch.Size([256, 2048]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.5.global_ffn.layers.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.5.global_ffn_norm.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.5.global_ffn_norm.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.5.cls_fcs.0.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.5.cls_fcs.1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.5.cls_fcs.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.5.cls_fcs.3.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.5.cls_fcs.4.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.5.cls_fcs.4.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.5.reg_fcs.0.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.5.reg_fcs.1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.5.reg_fcs.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.5.reg_fcs.3.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.5.reg_fcs.4.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.5.reg_fcs.4.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.5.reg_fcs.6.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.5.reg_fcs.7.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.5.reg_fcs.7.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.5.glb_fcs.0.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.5.glb_fcs.1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.5.glb_fcs.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.5.glb_fcs.3.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.5.glb_fcs.4.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.5.glb_fcs.4.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.5.fc_glb.weight - torch.Size([2, 256]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.5.fc_glb.bias - torch.Size([2]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.0.convs.0.conv.weight - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.0.convs.0.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.0.convs.0.bn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.0.convs.0.bn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.0.convs.1.conv.weight - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.0.convs.1.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.0.convs.1.bn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.0.convs.1.bn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.0.convs.2.conv.weight - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.0.convs.2.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.0.convs.2.bn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.0.convs.2.bn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.0.convs.3.conv.weight - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.0.convs.3.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.0.convs.3.bn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.0.convs.3.bn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.0.upsample.weight - torch.Size([256, 256, 2, 2]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.0.upsample.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.0.conv_logits.weight - torch.Size([2, 256, 1, 1]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.0.conv_logits.bias - torch.Size([2]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.0.instance_interactive_conv.dynamic_layer.weight - torch.Size([32768, 256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.0.instance_interactive_conv.dynamic_layer.bias - torch.Size([32768]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.0.instance_interactive_conv.norm_in.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.0.instance_interactive_conv.norm_in.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.0.instance_interactive_conv.norm_out.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.0.instance_interactive_conv.norm_out.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.1.convs.0.conv.weight - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.1.convs.0.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.1.convs.0.bn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.1.convs.0.bn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.1.convs.1.conv.weight - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.1.convs.1.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.1.convs.1.bn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.1.convs.1.bn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.1.convs.2.conv.weight - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.1.convs.2.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.1.convs.2.bn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.1.convs.2.bn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.1.convs.3.conv.weight - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.1.convs.3.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.1.convs.3.bn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.1.convs.3.bn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.1.upsample.weight - torch.Size([256, 256, 2, 2]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.1.upsample.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.1.conv_logits.weight - torch.Size([2, 256, 1, 1]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.1.conv_logits.bias - torch.Size([2]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.1.instance_interactive_conv.dynamic_layer.weight - torch.Size([32768, 256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.1.instance_interactive_conv.dynamic_layer.bias - torch.Size([32768]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.1.instance_interactive_conv.norm_in.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.1.instance_interactive_conv.norm_in.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.1.instance_interactive_conv.norm_out.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.1.instance_interactive_conv.norm_out.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.2.convs.0.conv.weight - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.2.convs.0.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.2.convs.0.bn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.2.convs.0.bn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.2.convs.1.conv.weight - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.2.convs.1.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.2.convs.1.bn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.2.convs.1.bn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.2.convs.2.conv.weight - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.2.convs.2.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.2.convs.2.bn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.2.convs.2.bn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.2.convs.3.conv.weight - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.2.convs.3.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.2.convs.3.bn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.2.convs.3.bn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.2.upsample.weight - torch.Size([256, 256, 2, 2]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.2.upsample.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.2.conv_logits.weight - torch.Size([2, 256, 1, 1]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.2.conv_logits.bias - torch.Size([2]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.2.instance_interactive_conv.dynamic_layer.weight - torch.Size([32768, 256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.2.instance_interactive_conv.dynamic_layer.bias - torch.Size([32768]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.2.instance_interactive_conv.norm_in.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.2.instance_interactive_conv.norm_in.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.2.instance_interactive_conv.norm_out.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.2.instance_interactive_conv.norm_out.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.3.convs.0.conv.weight - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.3.convs.0.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.3.convs.0.bn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.3.convs.0.bn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.3.convs.1.conv.weight - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.3.convs.1.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.3.convs.1.bn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.3.convs.1.bn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.3.convs.2.conv.weight - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.3.convs.2.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.3.convs.2.bn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.3.convs.2.bn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.3.convs.3.conv.weight - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.3.convs.3.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.3.convs.3.bn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.3.convs.3.bn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.3.upsample.weight - torch.Size([256, 256, 2, 2]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.3.upsample.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.3.conv_logits.weight - torch.Size([2, 256, 1, 1]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.3.conv_logits.bias - torch.Size([2]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.3.instance_interactive_conv.dynamic_layer.weight - torch.Size([32768, 256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.3.instance_interactive_conv.dynamic_layer.bias - torch.Size([32768]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.3.instance_interactive_conv.norm_in.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.3.instance_interactive_conv.norm_in.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.3.instance_interactive_conv.norm_out.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.3.instance_interactive_conv.norm_out.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.4.convs.0.conv.weight - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.4.convs.0.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.4.convs.0.bn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.4.convs.0.bn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.4.convs.1.conv.weight - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.4.convs.1.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.4.convs.1.bn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.4.convs.1.bn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.4.convs.2.conv.weight - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.4.convs.2.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.4.convs.2.bn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.4.convs.2.bn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.4.convs.3.conv.weight - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.4.convs.3.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.4.convs.3.bn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.4.convs.3.bn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.4.upsample.weight - torch.Size([256, 256, 2, 2]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.4.upsample.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.4.conv_logits.weight - torch.Size([2, 256, 1, 1]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.4.conv_logits.bias - torch.Size([2]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.4.instance_interactive_conv.dynamic_layer.weight - torch.Size([32768, 256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.4.instance_interactive_conv.dynamic_layer.bias - torch.Size([32768]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.4.instance_interactive_conv.norm_in.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.4.instance_interactive_conv.norm_in.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.4.instance_interactive_conv.norm_out.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.4.instance_interactive_conv.norm_out.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.5.convs.0.conv.weight - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.5.convs.0.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.5.convs.0.bn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.5.convs.0.bn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.5.convs.1.conv.weight - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.5.convs.1.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.5.convs.1.bn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.5.convs.1.bn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.5.convs.2.conv.weight - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.5.convs.2.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.5.convs.2.bn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.5.convs.2.bn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.5.convs.3.conv.weight - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.5.convs.3.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.5.convs.3.bn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.5.convs.3.bn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.5.upsample.weight - torch.Size([256, 256, 2, 2]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.5.upsample.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.5.conv_logits.weight - torch.Size([2, 256, 1, 1]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.5.conv_logits.bias - torch.Size([2]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.5.instance_interactive_conv.dynamic_layer.weight - torch.Size([32768, 256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.5.instance_interactive_conv.dynamic_layer.bias - torch.Size([32768]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.5.instance_interactive_conv.norm_in.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.5.instance_interactive_conv.norm_in.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.5.instance_interactive_conv.norm_out.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.5.instance_interactive_conv.norm_out.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  
2021-12-29 16:51:14,384 - mmdet - INFO - load checkpoint from local path: work_dirs/pretrained/queryInst/queryinst_r101_300_queries-860dc5d5.pth
2021-12-29 16:51:15,288 - mmdet - WARNING - The model and loaded state dict do not match exactly

size mismatch for roi_head.bbox_head.0.fc_cls.weight: copying a param with shape torch.Size([80, 256]) from checkpoint, the shape in current model is torch.Size([2, 256]).
size mismatch for roi_head.bbox_head.0.fc_cls.bias: copying a param with shape torch.Size([80]) from checkpoint, the shape in current model is torch.Size([2]).
size mismatch for roi_head.bbox_head.1.fc_cls.weight: copying a param with shape torch.Size([80, 256]) from checkpoint, the shape in current model is torch.Size([2, 256]).
size mismatch for roi_head.bbox_head.1.fc_cls.bias: copying a param with shape torch.Size([80]) from checkpoint, the shape in current model is torch.Size([2]).
size mismatch for roi_head.bbox_head.2.fc_cls.weight: copying a param with shape torch.Size([80, 256]) from checkpoint, the shape in current model is torch.Size([2, 256]).
size mismatch for roi_head.bbox_head.2.fc_cls.bias: copying a param with shape torch.Size([80]) from checkpoint, the shape in current model is torch.Size([2]).
size mismatch for roi_head.bbox_head.3.fc_cls.weight: copying a param with shape torch.Size([80, 256]) from checkpoint, the shape in current model is torch.Size([2, 256]).
size mismatch for roi_head.bbox_head.3.fc_cls.bias: copying a param with shape torch.Size([80]) from checkpoint, the shape in current model is torch.Size([2]).
size mismatch for roi_head.bbox_head.4.fc_cls.weight: copying a param with shape torch.Size([80, 256]) from checkpoint, the shape in current model is torch.Size([2, 256]).
size mismatch for roi_head.bbox_head.4.fc_cls.bias: copying a param with shape torch.Size([80]) from checkpoint, the shape in current model is torch.Size([2]).
size mismatch for roi_head.bbox_head.5.fc_cls.weight: copying a param with shape torch.Size([80, 256]) from checkpoint, the shape in current model is torch.Size([2, 256]).
size mismatch for roi_head.bbox_head.5.fc_cls.bias: copying a param with shape torch.Size([80]) from checkpoint, the shape in current model is torch.Size([2]).
size mismatch for roi_head.mask_head.0.conv_logits.weight: copying a param with shape torch.Size([80, 256, 1, 1]) from checkpoint, the shape in current model is torch.Size([2, 256, 1, 1]).
size mismatch for roi_head.mask_head.0.conv_logits.bias: copying a param with shape torch.Size([80]) from checkpoint, the shape in current model is torch.Size([2]).
size mismatch for roi_head.mask_head.1.conv_logits.weight: copying a param with shape torch.Size([80, 256, 1, 1]) from checkpoint, the shape in current model is torch.Size([2, 256, 1, 1]).
size mismatch for roi_head.mask_head.1.conv_logits.bias: copying a param with shape torch.Size([80]) from checkpoint, the shape in current model is torch.Size([2]).
size mismatch for roi_head.mask_head.2.conv_logits.weight: copying a param with shape torch.Size([80, 256, 1, 1]) from checkpoint, the shape in current model is torch.Size([2, 256, 1, 1]).
size mismatch for roi_head.mask_head.2.conv_logits.bias: copying a param with shape torch.Size([80]) from checkpoint, the shape in current model is torch.Size([2]).
size mismatch for roi_head.mask_head.3.conv_logits.weight: copying a param with shape torch.Size([80, 256, 1, 1]) from checkpoint, the shape in current model is torch.Size([2, 256, 1, 1]).
size mismatch for roi_head.mask_head.3.conv_logits.bias: copying a param with shape torch.Size([80]) from checkpoint, the shape in current model is torch.Size([2]).
size mismatch for roi_head.mask_head.4.conv_logits.weight: copying a param with shape torch.Size([80, 256, 1, 1]) from checkpoint, the shape in current model is torch.Size([2, 256, 1, 1]).
size mismatch for roi_head.mask_head.4.conv_logits.bias: copying a param with shape torch.Size([80]) from checkpoint, the shape in current model is torch.Size([2]).
size mismatch for roi_head.mask_head.5.conv_logits.weight: copying a param with shape torch.Size([80, 256, 1, 1]) from checkpoint, the shape in current model is torch.Size([2, 256, 1, 1]).
size mismatch for roi_head.mask_head.5.conv_logits.bias: copying a param with shape torch.Size([80]) from checkpoint, the shape in current model is torch.Size([2]).
missing keys in source state_dict: rpn_head.global_features_embed.weight, roi_head.bbox_head.0.global_attention.attn.in_proj_weight, roi_head.bbox_head.0.global_attention.attn.in_proj_bias, roi_head.bbox_head.0.global_attention.attn.out_proj.weight, roi_head.bbox_head.0.global_attention.attn.out_proj.bias, roi_head.bbox_head.0.global_attention_norm.weight, roi_head.bbox_head.0.global_attention_norm.bias, roi_head.bbox_head.0.global_ffn.layers.0.0.weight, roi_head.bbox_head.0.global_ffn.layers.0.0.bias, roi_head.bbox_head.0.global_ffn.layers.1.weight, roi_head.bbox_head.0.global_ffn.layers.1.bias, roi_head.bbox_head.0.global_ffn_norm.weight, roi_head.bbox_head.0.global_ffn_norm.bias, roi_head.bbox_head.0.cls_fcs.3.weight, roi_head.bbox_head.0.cls_fcs.4.weight, roi_head.bbox_head.0.cls_fcs.4.bias, roi_head.bbox_head.0.glb_fcs.0.weight, roi_head.bbox_head.0.glb_fcs.1.weight, roi_head.bbox_head.0.glb_fcs.1.bias, roi_head.bbox_head.0.glb_fcs.3.weight, roi_head.bbox_head.0.glb_fcs.4.weight, roi_head.bbox_head.0.glb_fcs.4.bias, roi_head.bbox_head.0.fc_glb.weight, roi_head.bbox_head.0.fc_glb.bias, roi_head.bbox_head.1.global_attention.attn.in_proj_weight, roi_head.bbox_head.1.global_attention.attn.in_proj_bias, roi_head.bbox_head.1.global_attention.attn.out_proj.weight, roi_head.bbox_head.1.global_attention.attn.out_proj.bias, roi_head.bbox_head.1.global_attention_norm.weight, roi_head.bbox_head.1.global_attention_norm.bias, roi_head.bbox_head.1.global_ffn.layers.0.0.weight, roi_head.bbox_head.1.global_ffn.layers.0.0.bias, roi_head.bbox_head.1.global_ffn.layers.1.weight, roi_head.bbox_head.1.global_ffn.layers.1.bias, roi_head.bbox_head.1.global_ffn_norm.weight, roi_head.bbox_head.1.global_ffn_norm.bias, roi_head.bbox_head.1.cls_fcs.3.weight, roi_head.bbox_head.1.cls_fcs.4.weight, roi_head.bbox_head.1.cls_fcs.4.bias, roi_head.bbox_head.1.glb_fcs.0.weight, roi_head.bbox_head.1.glb_fcs.1.weight, roi_head.bbox_head.1.glb_fcs.1.bias, roi_head.bbox_head.1.glb_fcs.3.weight, roi_head.bbox_head.1.glb_fcs.4.weight, roi_head.bbox_head.1.glb_fcs.4.bias, roi_head.bbox_head.1.fc_glb.weight, roi_head.bbox_head.1.fc_glb.bias, roi_head.bbox_head.2.global_attention.attn.in_proj_weight, roi_head.bbox_head.2.global_attention.attn.in_proj_bias, roi_head.bbox_head.2.global_attention.attn.out_proj.weight, roi_head.bbox_head.2.global_attention.attn.out_proj.bias, roi_head.bbox_head.2.global_attention_norm.weight, roi_head.bbox_head.2.global_attention_norm.bias, roi_head.bbox_head.2.global_ffn.layers.0.0.weight, roi_head.bbox_head.2.global_ffn.layers.0.0.bias, roi_head.bbox_head.2.global_ffn.layers.1.weight, roi_head.bbox_head.2.global_ffn.layers.1.bias, roi_head.bbox_head.2.global_ffn_norm.weight, roi_head.bbox_head.2.global_ffn_norm.bias, roi_head.bbox_head.2.cls_fcs.3.weight, roi_head.bbox_head.2.cls_fcs.4.weight, roi_head.bbox_head.2.cls_fcs.4.bias, roi_head.bbox_head.2.glb_fcs.0.weight, roi_head.bbox_head.2.glb_fcs.1.weight, roi_head.bbox_head.2.glb_fcs.1.bias, roi_head.bbox_head.2.glb_fcs.3.weight, roi_head.bbox_head.2.glb_fcs.4.weight, roi_head.bbox_head.2.glb_fcs.4.bias, roi_head.bbox_head.2.fc_glb.weight, roi_head.bbox_head.2.fc_glb.bias, roi_head.bbox_head.3.global_attention.attn.in_proj_weight, roi_head.bbox_head.3.global_attention.attn.in_proj_bias, roi_head.bbox_head.3.global_attention.attn.out_proj.weight, roi_head.bbox_head.3.global_attention.attn.out_proj.bias, roi_head.bbox_head.3.global_attention_norm.weight, roi_head.bbox_head.3.global_attention_norm.bias, roi_head.bbox_head.3.global_ffn.layers.0.0.weight, roi_head.bbox_head.3.global_ffn.layers.0.0.bias, roi_head.bbox_head.3.global_ffn.layers.1.weight, roi_head.bbox_head.3.global_ffn.layers.1.bias, roi_head.bbox_head.3.global_ffn_norm.weight, roi_head.bbox_head.3.global_ffn_norm.bias, roi_head.bbox_head.3.cls_fcs.3.weight, roi_head.bbox_head.3.cls_fcs.4.weight, roi_head.bbox_head.3.cls_fcs.4.bias, roi_head.bbox_head.3.glb_fcs.0.weight, roi_head.bbox_head.3.glb_fcs.1.weight, roi_head.bbox_head.3.glb_fcs.1.bias, roi_head.bbox_head.3.glb_fcs.3.weight, roi_head.bbox_head.3.glb_fcs.4.weight, roi_head.bbox_head.3.glb_fcs.4.bias, roi_head.bbox_head.3.fc_glb.weight, roi_head.bbox_head.3.fc_glb.bias, roi_head.bbox_head.4.global_attention.attn.in_proj_weight, roi_head.bbox_head.4.global_attention.attn.in_proj_bias, roi_head.bbox_head.4.global_attention.attn.out_proj.weight, roi_head.bbox_head.4.global_attention.attn.out_proj.bias, roi_head.bbox_head.4.global_attention_norm.weight, roi_head.bbox_head.4.global_attention_norm.bias, roi_head.bbox_head.4.global_ffn.layers.0.0.weight, roi_head.bbox_head.4.global_ffn.layers.0.0.bias, roi_head.bbox_head.4.global_ffn.layers.1.weight, roi_head.bbox_head.4.global_ffn.layers.1.bias, roi_head.bbox_head.4.global_ffn_norm.weight, roi_head.bbox_head.4.global_ffn_norm.bias, roi_head.bbox_head.4.cls_fcs.3.weight, roi_head.bbox_head.4.cls_fcs.4.weight, roi_head.bbox_head.4.cls_fcs.4.bias, roi_head.bbox_head.4.glb_fcs.0.weight, roi_head.bbox_head.4.glb_fcs.1.weight, roi_head.bbox_head.4.glb_fcs.1.bias, roi_head.bbox_head.4.glb_fcs.3.weight, roi_head.bbox_head.4.glb_fcs.4.weight, roi_head.bbox_head.4.glb_fcs.4.bias, roi_head.bbox_head.4.fc_glb.weight, roi_head.bbox_head.4.fc_glb.bias, roi_head.bbox_head.5.global_attention.attn.in_proj_weight, roi_head.bbox_head.5.global_attention.attn.in_proj_bias, roi_head.bbox_head.5.global_attention.attn.out_proj.weight, roi_head.bbox_head.5.global_attention.attn.out_proj.bias, roi_head.bbox_head.5.global_attention_norm.weight, roi_head.bbox_head.5.global_attention_norm.bias, roi_head.bbox_head.5.global_ffn.layers.0.0.weight, roi_head.bbox_head.5.global_ffn.layers.0.0.bias, roi_head.bbox_head.5.global_ffn.layers.1.weight, roi_head.bbox_head.5.global_ffn.layers.1.bias, roi_head.bbox_head.5.global_ffn_norm.weight, roi_head.bbox_head.5.global_ffn_norm.bias, roi_head.bbox_head.5.cls_fcs.3.weight, roi_head.bbox_head.5.cls_fcs.4.weight, roi_head.bbox_head.5.cls_fcs.4.bias, roi_head.bbox_head.5.glb_fcs.0.weight, roi_head.bbox_head.5.glb_fcs.1.weight, roi_head.bbox_head.5.glb_fcs.1.bias, roi_head.bbox_head.5.glb_fcs.3.weight, roi_head.bbox_head.5.glb_fcs.4.weight, roi_head.bbox_head.5.glb_fcs.4.bias, roi_head.bbox_head.5.fc_glb.weight, roi_head.bbox_head.5.fc_glb.bias

2021-12-29 16:51:15,320 - mmdet - INFO - Start running, host: user@ubuntu, work_dir: /mnt/home1/workspace2/QueryInst/work_dirs/queryglob_usdanno514roi_B_2_7_split3
2021-12-29 16:51:15,321 - mmdet - INFO - Hooks will be executed in the following order:
before_run:
(VERY_HIGH   ) StepLrUpdaterHook                  
(NORMAL      ) CheckpointHook                     
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_train_epoch:
(VERY_HIGH   ) StepLrUpdaterHook                  
(NORMAL      ) DistSamplerSeedHook                
(NORMAL      ) NumClassCheckHook                  
(LOW         ) IterTimerHook                      
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_train_iter:
(VERY_HIGH   ) StepLrUpdaterHook                  
(LOW         ) IterTimerHook                      
 -------------------- 
after_train_iter:
(ABOVE_NORMAL) OptimizerHook                      
(NORMAL      ) CheckpointHook                     
(LOW         ) IterTimerHook                      
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
after_train_epoch:
(NORMAL      ) CheckpointHook                     
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_val_epoch:
(NORMAL      ) DistSamplerSeedHook                
(NORMAL      ) NumClassCheckHook                  
(LOW         ) IterTimerHook                      
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_val_iter:
(LOW         ) IterTimerHook                      
 -------------------- 
after_val_iter:
(LOW         ) IterTimerHook                      
 -------------------- 
after_val_epoch:
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
after_run:
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
2021-12-29 16:51:15,321 - mmdet - INFO - workflow: [('train', 1)], max: 36 epochs
2021-12-29 16:51:15,321 - mmdet - INFO - Checkpoints will be saved to /mnt/home1/workspace2/QueryInst/work_dirs/queryglob_usdanno514roi_B_2_7_split3 by HardDiskBackend.
2021-12-29 16:52:23,019 - mmdet - INFO - Epoch [1][50/52]	lr: 1.249e-06, eta: 0:41:04, time: 1.353, data_time: 0.220, memory: 8081, stage0_loss_cls: 1.8378, stage0_pos_acc: 53.5000, stage0_loss_bbox: 0.6626, stage0_loss_iou: 1.0178, stage0_loss_global: 0.9704, stage0_loss_mask: 3.1996, stage1_loss_cls: 2.8785, stage1_pos_acc: 58.5000, stage1_loss_bbox: 0.5464, stage1_loss_iou: 0.8950, stage1_loss_global: 0.6188, stage1_loss_mask: 2.7464, stage2_loss_cls: 2.0967, stage2_pos_acc: 56.2500, stage2_loss_bbox: 0.5656, stage2_loss_iou: 0.9002, stage2_loss_global: 1.6182, stage2_loss_mask: 2.3346, stage3_loss_cls: 2.4394, stage3_pos_acc: 55.0000, stage3_loss_bbox: 0.5684, stage3_loss_iou: 0.9054, stage3_loss_global: 0.5477, stage3_loss_mask: 2.8466, stage4_loss_cls: 2.3734, stage4_pos_acc: 48.7500, stage4_loss_bbox: 0.5767, stage4_loss_iou: 0.8941, stage4_loss_global: 0.6744, stage4_loss_mask: 2.5508, stage5_loss_cls: 2.3650, stage5_pos_acc: 48.7500, stage5_loss_bbox: 0.5842, stage5_loss_iou: 0.9060, stage5_loss_global: 0.7750, stage5_loss_mask: 3.0241, loss: 44.9199, grad_norm: 221.3190
2021-12-29 16:52:25,835 - mmdet - INFO - Saving checkpoint at 1 epochs
2021-12-29 16:53:41,254 - mmdet - INFO - Epoch [2][50/52]	lr: 2.547e-06, eta: 0:38:41, time: 1.323, data_time: 0.217, memory: 8501, stage0_loss_cls: 1.6518, stage0_pos_acc: 53.7500, stage0_loss_bbox: 0.5921, stage0_loss_iou: 0.9279, stage0_loss_global: 0.7955, stage0_loss_mask: 3.0299, stage1_loss_cls: 2.6311, stage1_pos_acc: 53.0000, stage1_loss_bbox: 0.4170, stage1_loss_iou: 0.7090, stage1_loss_global: 0.5485, stage1_loss_mask: 2.5141, stage2_loss_cls: 1.7938, stage2_pos_acc: 56.2500, stage2_loss_bbox: 0.3950, stage2_loss_iou: 0.6665, stage2_loss_global: 0.9103, stage2_loss_mask: 1.9515, stage3_loss_cls: 2.2387, stage3_pos_acc: 54.5000, stage3_loss_bbox: 0.3996, stage3_loss_iou: 0.6621, stage3_loss_global: 0.5312, stage3_loss_mask: 2.3823, stage4_loss_cls: 2.0186, stage4_pos_acc: 48.2500, stage4_loss_bbox: 0.3827, stage4_loss_iou: 0.6334, stage4_loss_global: 0.5454, stage4_loss_mask: 2.0473, stage5_loss_cls: 2.0857, stage5_pos_acc: 48.7500, stage5_loss_bbox: 0.3808, stage5_loss_iou: 0.6401, stage5_loss_global: 0.6181, stage5_loss_mask: 2.5175, loss: 37.6173, grad_norm: 193.3194
2021-12-29 16:53:43,860 - mmdet - INFO - Saving checkpoint at 2 epochs
2021-12-29 16:54:59,562 - mmdet - INFO - Epoch [3][50/52]	lr: 3.846e-06, eta: 0:37:13, time: 1.328, data_time: 0.218, memory: 8501, stage0_loss_cls: 1.4527, stage0_pos_acc: 54.7500, stage0_loss_bbox: 0.5096, stage0_loss_iou: 0.8539, stage0_loss_global: 0.5460, stage0_loss_mask: 2.5932, stage1_loss_cls: 2.0923, stage1_pos_acc: 58.5000, stage1_loss_bbox: 0.3502, stage1_loss_iou: 0.6197, stage1_loss_global: 0.5007, stage1_loss_mask: 2.1820, stage2_loss_cls: 1.4965, stage2_pos_acc: 54.0000, stage2_loss_bbox: 0.3212, stage2_loss_iou: 0.5730, stage2_loss_global: 0.5382, stage2_loss_mask: 1.6895, stage3_loss_cls: 1.8065, stage3_pos_acc: 57.7500, stage3_loss_bbox: 0.3231, stage3_loss_iou: 0.5658, stage3_loss_global: 0.5034, stage3_loss_mask: 2.0183, stage4_loss_cls: 1.5071, stage4_pos_acc: 51.2500, stage4_loss_bbox: 0.3149, stage4_loss_iou: 0.5542, stage4_loss_global: 0.5038, stage4_loss_mask: 1.6951, stage5_loss_cls: 1.6023, stage5_pos_acc: 52.7500, stage5_loss_bbox: 0.3192, stage5_loss_iou: 0.5605, stage5_loss_global: 0.5349, stage5_loss_mask: 2.0980, loss: 31.2258, grad_norm: 173.7875
2021-12-29 16:55:02,326 - mmdet - INFO - Saving checkpoint at 3 epochs
2021-12-29 16:56:17,476 - mmdet - INFO - Epoch [4][50/52]	lr: 5.145e-06, eta: 0:35:52, time: 1.319, data_time: 0.214, memory: 8501, stage0_loss_cls: 1.3314, stage0_pos_acc: 57.7500, stage0_loss_bbox: 0.4767, stage0_loss_iou: 0.8095, stage0_loss_global: 0.4779, stage0_loss_mask: 2.1805, stage1_loss_cls: 1.5019, stage1_pos_acc: 62.0000, stage1_loss_bbox: 0.3040, stage1_loss_iou: 0.5467, stage1_loss_global: 0.4662, stage1_loss_mask: 1.8646, stage2_loss_cls: 1.2948, stage2_pos_acc: 57.7500, stage2_loss_bbox: 0.2768, stage2_loss_iou: 0.4995, stage2_loss_global: 0.4730, stage2_loss_mask: 1.4691, stage3_loss_cls: 1.4001, stage3_pos_acc: 58.2500, stage3_loss_bbox: 0.2735, stage3_loss_iou: 0.4921, stage3_loss_global: 0.4756, stage3_loss_mask: 1.6494, stage4_loss_cls: 1.2455, stage4_pos_acc: 62.7500, stage4_loss_bbox: 0.2627, stage4_loss_iou: 0.4688, stage4_loss_global: 0.4702, stage4_loss_mask: 1.4462, stage5_loss_cls: 1.1954, stage5_pos_acc: 72.2500, stage5_loss_bbox: 0.2665, stage5_loss_iou: 0.4744, stage5_loss_global: 0.4778, stage5_loss_mask: 1.8057, loss: 26.3768, grad_norm: 159.2393
2021-12-29 16:56:20,155 - mmdet - INFO - Saving checkpoint at 4 epochs
2021-12-29 16:57:36,353 - mmdet - INFO - Epoch [5][50/52]	lr: 6.444e-06, eta: 0:34:43, time: 1.338, data_time: 0.219, memory: 8501, stage0_loss_cls: 1.2469, stage0_pos_acc: 62.2500, stage0_loss_bbox: 0.4361, stage0_loss_iou: 0.7383, stage0_loss_global: 0.4624, stage0_loss_mask: 1.7602, stage1_loss_cls: 1.2865, stage1_pos_acc: 64.5000, stage1_loss_bbox: 0.2686, stage1_loss_iou: 0.4767, stage1_loss_global: 0.4618, stage1_loss_mask: 1.5014, stage2_loss_cls: 1.0924, stage2_pos_acc: 63.5000, stage2_loss_bbox: 0.2633, stage2_loss_iou: 0.4661, stage2_loss_global: 0.4557, stage2_loss_mask: 1.2266, stage3_loss_cls: 1.1559, stage3_pos_acc: 54.5000, stage3_loss_bbox: 0.2526, stage3_loss_iou: 0.4408, stage3_loss_global: 0.4658, stage3_loss_mask: 1.3000, stage4_loss_cls: 1.0506, stage4_pos_acc: 59.0000, stage4_loss_bbox: 0.2439, stage4_loss_iou: 0.4265, stage4_loss_global: 0.4637, stage4_loss_mask: 1.1852, stage5_loss_cls: 0.9587, stage5_pos_acc: 87.7500, stage5_loss_bbox: 0.2557, stage5_loss_iou: 0.4420, stage5_loss_global: 0.4539, stage5_loss_mask: 1.4454, loss: 22.6838, grad_norm: 143.5441
2021-12-29 16:57:39,000 - mmdet - INFO - Saving checkpoint at 5 epochs
2021-12-29 16:58:54,711 - mmdet - INFO - Epoch [6][50/52]	lr: 7.742e-06, eta: 0:33:31, time: 1.320, data_time: 0.214, memory: 8501, stage0_loss_cls: 1.1701, stage0_pos_acc: 63.2500, stage0_loss_bbox: 0.3970, stage0_loss_iou: 0.6983, stage0_loss_global: 0.4427, stage0_loss_mask: 1.4071, stage1_loss_cls: 1.1162, stage1_pos_acc: 71.0000, stage1_loss_bbox: 0.2365, stage1_loss_iou: 0.4240, stage1_loss_global: 0.4370, stage1_loss_mask: 1.2356, stage2_loss_cls: 0.8914, stage2_pos_acc: 60.7500, stage2_loss_bbox: 0.2411, stage2_loss_iou: 0.4302, stage2_loss_global: 0.4369, stage2_loss_mask: 1.0744, stage3_loss_cls: 0.8570, stage3_pos_acc: 58.2500, stage3_loss_bbox: 0.2441, stage3_loss_iou: 0.4326, stage3_loss_global: 0.4391, stage3_loss_mask: 1.1001, stage4_loss_cls: 0.7509, stage4_pos_acc: 62.7500, stage4_loss_bbox: 0.2492, stage4_loss_iou: 0.4381, stage4_loss_global: 0.4409, stage4_loss_mask: 1.0654, stage5_loss_cls: 0.7775, stage5_pos_acc: 90.0000, stage5_loss_bbox: 0.2377, stage5_loss_iou: 0.4218, stage5_loss_global: 0.4327, stage5_loss_mask: 1.1980, loss: 19.7236, grad_norm: 154.9794
2021-12-29 16:58:57,371 - mmdet - INFO - Saving checkpoint at 6 epochs
2021-12-29 17:00:12,682 - mmdet - INFO - Epoch [7][50/52]	lr: 9.041e-06, eta: 0:32:20, time: 1.323, data_time: 0.214, memory: 8586, stage0_loss_cls: 1.1284, stage0_pos_acc: 61.2500, stage0_loss_bbox: 0.3755, stage0_loss_iou: 0.6504, stage0_loss_global: 0.4444, stage0_loss_mask: 1.2169, stage1_loss_cls: 0.9655, stage1_pos_acc: 74.5000, stage1_loss_bbox: 0.2318, stage1_loss_iou: 0.4231, stage1_loss_global: 0.4388, stage1_loss_mask: 1.0851, stage2_loss_cls: 0.7046, stage2_pos_acc: 67.0000, stage2_loss_bbox: 0.2482, stage2_loss_iou: 0.4402, stage2_loss_global: 0.4218, stage2_loss_mask: 0.9791, stage3_loss_cls: 0.7171, stage3_pos_acc: 64.5000, stage3_loss_bbox: 0.2399, stage3_loss_iou: 0.4220, stage3_loss_global: 0.4109, stage3_loss_mask: 0.9915, stage4_loss_cls: 0.6112, stage4_pos_acc: 66.7500, stage4_loss_bbox: 0.2565, stage4_loss_iou: 0.4481, stage4_loss_global: 0.4138, stage4_loss_mask: 0.9806, stage5_loss_cls: 0.6230, stage5_pos_acc: 82.5000, stage5_loss_bbox: 0.2510, stage5_loss_iou: 0.4332, stage5_loss_global: 0.4033, stage5_loss_mask: 1.1556, loss: 18.1114, grad_norm: 236.3190
2021-12-29 17:00:15,295 - mmdet - INFO - Saving checkpoint at 7 epochs
2021-12-29 17:01:32,615 - mmdet - INFO - Epoch [8][50/52]	lr: 1.034e-05, eta: 0:31:15, time: 1.346, data_time: 0.216, memory: 8586, stage0_loss_cls: 1.0070, stage0_pos_acc: 66.2500, stage0_loss_bbox: 0.3479, stage0_loss_iou: 0.6129, stage0_loss_global: 0.4335, stage0_loss_mask: 1.0257, stage1_loss_cls: 0.8704, stage1_pos_acc: 77.7500, stage1_loss_bbox: 0.2171, stage1_loss_iou: 0.3974, stage1_loss_global: 0.4253, stage1_loss_mask: 0.9161, stage2_loss_cls: 0.6118, stage2_pos_acc: 67.2500, stage2_loss_bbox: 0.2422, stage2_loss_iou: 0.4360, stage2_loss_global: 0.4088, stage2_loss_mask: 0.8716, stage3_loss_cls: 0.5988, stage3_pos_acc: 68.5000, stage3_loss_bbox: 0.2289, stage3_loss_iou: 0.4145, stage3_loss_global: 0.3842, stage3_loss_mask: 0.8941, stage4_loss_cls: 0.5323, stage4_pos_acc: 73.7500, stage4_loss_bbox: 0.2350, stage4_loss_iou: 0.4272, stage4_loss_global: 0.3700, stage4_loss_mask: 0.8747, stage5_loss_cls: 0.5366, stage5_pos_acc: 84.7500, stage5_loss_bbox: 0.2331, stage5_loss_iou: 0.4209, stage5_loss_global: 0.3610, stage5_loss_mask: 1.0061, loss: 16.3411, grad_norm: 252.6395
2021-12-29 17:01:35,525 - mmdet - INFO - Saving checkpoint at 8 epochs
2021-12-29 17:02:51,578 - mmdet - INFO - Epoch [9][50/52]	lr: 1.164e-05, eta: 0:30:07, time: 1.332, data_time: 0.213, memory: 8586, stage0_loss_cls: 0.9863, stage0_pos_acc: 67.7500, stage0_loss_bbox: 0.3399, stage0_loss_iou: 0.6034, stage0_loss_global: 0.4399, stage0_loss_mask: 0.9025, stage1_loss_cls: 0.7909, stage1_pos_acc: 76.7500, stage1_loss_bbox: 0.2288, stage1_loss_iou: 0.4128, stage1_loss_global: 0.4152, stage1_loss_mask: 0.8689, stage2_loss_cls: 0.5602, stage2_pos_acc: 73.2500, stage2_loss_bbox: 0.2435, stage2_loss_iou: 0.4330, stage2_loss_global: 0.3538, stage2_loss_mask: 0.8561, stage3_loss_cls: 0.5094, stage3_pos_acc: 79.0000, stage3_loss_bbox: 0.2256, stage3_loss_iou: 0.4047, stage3_loss_global: 0.2915, stage3_loss_mask: 0.8552, stage4_loss_cls: 0.4492, stage4_pos_acc: 83.7500, stage4_loss_bbox: 0.2281, stage4_loss_iou: 0.4073, stage4_loss_global: 0.2673, stage4_loss_mask: 0.8687, stage5_loss_cls: 0.4433, stage5_pos_acc: 86.2500, stage5_loss_bbox: 0.2292, stage5_loss_iou: 0.4061, stage5_loss_global: 0.2615, stage5_loss_mask: 0.9719, loss: 15.2542, grad_norm: 217.3547
2021-12-29 17:02:54,309 - mmdet - INFO - Saving checkpoint at 9 epochs
2021-12-29 17:04:09,707 - mmdet - INFO - Epoch [10][50/52]	lr: 1.294e-05, eta: 0:28:59, time: 1.330, data_time: 0.219, memory: 8586, stage0_loss_cls: 0.9047, stage0_pos_acc: 68.5000, stage0_loss_bbox: 0.3472, stage0_loss_iou: 0.6056, stage0_loss_global: 0.4056, stage0_loss_mask: 0.8495, stage1_loss_cls: 0.7011, stage1_pos_acc: 81.5000, stage1_loss_bbox: 0.2352, stage1_loss_iou: 0.4178, stage1_loss_global: 0.3578, stage1_loss_mask: 0.7676, stage2_loss_cls: 0.4592, stage2_pos_acc: 84.0000, stage2_loss_bbox: 0.2474, stage2_loss_iou: 0.4360, stage2_loss_global: 0.2692, stage2_loss_mask: 0.7941, stage3_loss_cls: 0.3968, stage3_pos_acc: 87.5000, stage3_loss_bbox: 0.2411, stage3_loss_iou: 0.4213, stage3_loss_global: 0.2331, stage3_loss_mask: 0.7644, stage4_loss_cls: 0.3541, stage4_pos_acc: 88.0000, stage4_loss_bbox: 0.2442, stage4_loss_iou: 0.4233, stage4_loss_global: 0.2381, stage4_loss_mask: 0.8105, stage5_loss_cls: 0.3544, stage5_pos_acc: 89.0000, stage5_loss_bbox: 0.2438, stage5_loss_iou: 0.4214, stage5_loss_global: 0.2324, stage5_loss_mask: 0.8307, loss: 14.0073, grad_norm: 225.0455
2021-12-29 17:04:12,537 - mmdet - INFO - Saving checkpoint at 10 epochs
2021-12-29 17:05:27,529 - mmdet - INFO - Epoch [11][50/52]	lr: 1.424e-05, eta: 0:27:51, time: 1.318, data_time: 0.217, memory: 8586, stage0_loss_cls: 0.8776, stage0_pos_acc: 75.2500, stage0_loss_bbox: 0.3322, stage0_loss_iou: 0.6025, stage0_loss_global: 0.3369, stage0_loss_mask: 0.7767, stage1_loss_cls: 0.6447, stage1_pos_acc: 89.0000, stage1_loss_bbox: 0.2320, stage1_loss_iou: 0.4177, stage1_loss_global: 0.2534, stage1_loss_mask: 0.7090, stage2_loss_cls: 0.4360, stage2_pos_acc: 89.2500, stage2_loss_bbox: 0.2422, stage2_loss_iou: 0.4293, stage2_loss_global: 0.1808, stage2_loss_mask: 0.7587, stage3_loss_cls: 0.3637, stage3_pos_acc: 89.7500, stage3_loss_bbox: 0.2393, stage3_loss_iou: 0.4257, stage3_loss_global: 0.1756, stage3_loss_mask: 0.7491, stage4_loss_cls: 0.3261, stage4_pos_acc: 91.5000, stage4_loss_bbox: 0.2432, stage4_loss_iou: 0.4240, stage4_loss_global: 0.1714, stage4_loss_mask: 0.8145, stage5_loss_cls: 0.3361, stage5_pos_acc: 90.5000, stage5_loss_bbox: 0.2377, stage5_loss_iou: 0.4163, stage5_loss_global: 0.1744, stage5_loss_mask: 0.7944, loss: 13.1212, grad_norm: 236.5468
2021-12-29 17:05:30,360 - mmdet - INFO - Saving checkpoint at 11 epochs
2021-12-29 17:06:45,340 - mmdet - INFO - Epoch [12][50/52]	lr: 1.553e-05, eta: 0:26:43, time: 1.323, data_time: 0.219, memory: 8586, stage0_loss_cls: 0.7795, stage0_pos_acc: 81.7500, stage0_loss_bbox: 0.3492, stage0_loss_iou: 0.6121, stage0_loss_global: 0.2326, stage0_loss_mask: 0.7155, stage1_loss_cls: 0.5598, stage1_pos_acc: 91.7500, stage1_loss_bbox: 0.2316, stage1_loss_iou: 0.4143, stage1_loss_global: 0.1779, stage1_loss_mask: 0.6588, stage2_loss_cls: 0.3639, stage2_pos_acc: 92.5000, stage2_loss_bbox: 0.2352, stage2_loss_iou: 0.4117, stage2_loss_global: 0.1488, stage2_loss_mask: 0.7084, stage3_loss_cls: 0.2988, stage3_pos_acc: 91.7500, stage3_loss_bbox: 0.2332, stage3_loss_iou: 0.4048, stage3_loss_global: 0.1467, stage3_loss_mask: 0.6725, stage4_loss_cls: 0.2725, stage4_pos_acc: 92.0000, stage4_loss_bbox: 0.2295, stage4_loss_iou: 0.4008, stage4_loss_global: 0.1500, stage4_loss_mask: 0.7332, stage5_loss_cls: 0.2774, stage5_pos_acc: 91.7500, stage5_loss_bbox: 0.2305, stage5_loss_iou: 0.3995, stage5_loss_global: 0.1521, stage5_loss_mask: 0.7140, loss: 11.9147, grad_norm: 267.5874
2021-12-29 17:06:48,032 - mmdet - INFO - Saving checkpoint at 12 epochs
2021-12-29 17:08:03,220 - mmdet - INFO - Epoch [13][50/52]	lr: 1.683e-05, eta: 0:25:36, time: 1.330, data_time: 0.216, memory: 8608, stage0_loss_cls: 0.7312, stage0_pos_acc: 84.0000, stage0_loss_bbox: 0.3277, stage0_loss_iou: 0.5678, stage0_loss_global: 0.1783, stage0_loss_mask: 0.6540, stage1_loss_cls: 0.4962, stage1_pos_acc: 91.0000, stage1_loss_bbox: 0.2437, stage1_loss_iou: 0.4171, stage1_loss_global: 0.1579, stage1_loss_mask: 0.6312, stage2_loss_cls: 0.3316, stage2_pos_acc: 93.5000, stage2_loss_bbox: 0.2392, stage2_loss_iou: 0.4080, stage2_loss_global: 0.1425, stage2_loss_mask: 0.6512, stage3_loss_cls: 0.3008, stage3_pos_acc: 93.0000, stage3_loss_bbox: 0.2323, stage3_loss_iou: 0.3976, stage3_loss_global: 0.1413, stage3_loss_mask: 0.6496, stage4_loss_cls: 0.2788, stage4_pos_acc: 93.5000, stage4_loss_bbox: 0.2296, stage4_loss_iou: 0.3950, stage4_loss_global: 0.1442, stage4_loss_mask: 0.7150, stage5_loss_cls: 0.2769, stage5_pos_acc: 92.7500, stage5_loss_bbox: 0.2287, stage5_loss_iou: 0.3962, stage5_loss_global: 0.1404, stage5_loss_mask: 0.6725, loss: 11.3766, grad_norm: 223.1413
2021-12-29 17:08:06,097 - mmdet - INFO - Saving checkpoint at 13 epochs
2021-12-29 17:09:21,188 - mmdet - INFO - Epoch [14][50/52]	lr: 1.813e-05, eta: 0:24:28, time: 1.324, data_time: 0.216, memory: 8608, stage0_loss_cls: 0.7381, stage0_pos_acc: 84.7500, stage0_loss_bbox: 0.3621, stage0_loss_iou: 0.6341, stage0_loss_global: 0.1840, stage0_loss_mask: 0.6576, stage1_loss_cls: 0.5535, stage1_pos_acc: 91.2500, stage1_loss_bbox: 0.2327, stage1_loss_iou: 0.4125, stage1_loss_global: 0.1762, stage1_loss_mask: 0.6202, stage2_loss_cls: 0.3832, stage2_pos_acc: 91.2500, stage2_loss_bbox: 0.2295, stage2_loss_iou: 0.4048, stage2_loss_global: 0.1799, stage2_loss_mask: 0.6362, stage3_loss_cls: 0.3025, stage3_pos_acc: 91.2500, stage3_loss_bbox: 0.2253, stage3_loss_iou: 0.3939, stage3_loss_global: 0.1831, stage3_loss_mask: 0.6189, stage4_loss_cls: 0.2734, stage4_pos_acc: 91.7500, stage4_loss_bbox: 0.2254, stage4_loss_iou: 0.3922, stage4_loss_global: 0.1910, stage4_loss_mask: 0.6685, stage5_loss_cls: 0.2756, stage5_pos_acc: 92.2500, stage5_loss_bbox: 0.2228, stage5_loss_iou: 0.3884, stage5_loss_global: 0.1878, stage5_loss_mask: 0.6299, loss: 11.5834, grad_norm: 330.6865
2021-12-29 17:09:23,780 - mmdet - INFO - Saving checkpoint at 14 epochs
2021-12-29 17:10:37,442 - mmdet - INFO - Epoch [15][50/52]	lr: 1.943e-05, eta: 0:23:19, time: 1.299, data_time: 0.212, memory: 8608, stage0_loss_cls: 0.7269, stage0_pos_acc: 90.5000, stage0_loss_bbox: 0.3353, stage0_loss_iou: 0.5818, stage0_loss_global: 0.1854, stage0_loss_mask: 0.6422, stage1_loss_cls: 0.5452, stage1_pos_acc: 94.0000, stage1_loss_bbox: 0.2179, stage1_loss_iou: 0.3884, stage1_loss_global: 0.1929, stage1_loss_mask: 0.5883, stage2_loss_cls: 0.3447, stage2_pos_acc: 91.0000, stage2_loss_bbox: 0.2247, stage2_loss_iou: 0.3917, stage2_loss_global: 0.1940, stage2_loss_mask: 0.6078, stage3_loss_cls: 0.2968, stage3_pos_acc: 91.0000, stage3_loss_bbox: 0.2195, stage3_loss_iou: 0.3861, stage3_loss_global: 0.1975, stage3_loss_mask: 0.5835, stage4_loss_cls: 0.2605, stage4_pos_acc: 90.7500, stage4_loss_bbox: 0.2194, stage4_loss_iou: 0.3843, stage4_loss_global: 0.1992, stage4_loss_mask: 0.6265, stage5_loss_cls: 0.2581, stage5_pos_acc: 90.0000, stage5_loss_bbox: 0.2218, stage5_loss_iou: 0.3854, stage5_loss_global: 0.2023, stage5_loss_mask: 0.6033, loss: 11.2115, grad_norm: 417.7769
2021-12-29 17:10:40,269 - mmdet - INFO - Saving checkpoint at 15 epochs
2021-12-29 17:11:55,071 - mmdet - INFO - Epoch [16][50/52]	lr: 2.073e-05, eta: 0:22:12, time: 1.326, data_time: 0.217, memory: 8608, stage0_loss_cls: 0.6918, stage0_pos_acc: 89.7500, stage0_loss_bbox: 0.3275, stage0_loss_iou: 0.5789, stage0_loss_global: 0.1292, stage0_loss_mask: 0.5926, stage1_loss_cls: 0.4966, stage1_pos_acc: 92.0000, stage1_loss_bbox: 0.2298, stage1_loss_iou: 0.4063, stage1_loss_global: 0.1284, stage1_loss_mask: 0.5939, stage2_loss_cls: 0.3264, stage2_pos_acc: 93.7500, stage2_loss_bbox: 0.2219, stage2_loss_iou: 0.3959, stage2_loss_global: 0.1248, stage2_loss_mask: 0.6087, stage3_loss_cls: 0.2585, stage3_pos_acc: 93.7500, stage3_loss_bbox: 0.2197, stage3_loss_iou: 0.3934, stage3_loss_global: 0.1285, stage3_loss_mask: 0.6034, stage4_loss_cls: 0.2142, stage4_pos_acc: 93.2500, stage4_loss_bbox: 0.2224, stage4_loss_iou: 0.3940, stage4_loss_global: 0.1290, stage4_loss_mask: 0.6346, stage5_loss_cls: 0.2288, stage5_pos_acc: 93.2500, stage5_loss_bbox: 0.2235, stage5_loss_iou: 0.3958, stage5_loss_global: 0.1256, stage5_loss_mask: 0.6127, loss: 10.6368, grad_norm: 279.0592
2021-12-29 17:11:57,785 - mmdet - INFO - Saving checkpoint at 16 epochs
2021-12-29 17:13:12,950 - mmdet - INFO - Epoch [17][50/52]	lr: 2.203e-05, eta: 0:21:06, time: 1.328, data_time: 0.215, memory: 8608, stage0_loss_cls: 0.6756, stage0_pos_acc: 92.5000, stage0_loss_bbox: 0.3265, stage0_loss_iou: 0.5767, stage0_loss_global: 0.1490, stage0_loss_mask: 0.5975, stage1_loss_cls: 0.4568, stage1_pos_acc: 93.2500, stage1_loss_bbox: 0.2331, stage1_loss_iou: 0.4083, stage1_loss_global: 0.1524, stage1_loss_mask: 0.5643, stage2_loss_cls: 0.2902, stage2_pos_acc: 93.0000, stage2_loss_bbox: 0.2244, stage2_loss_iou: 0.3947, stage2_loss_global: 0.1613, stage2_loss_mask: 0.5736, stage3_loss_cls: 0.2663, stage3_pos_acc: 94.2500, stage3_loss_bbox: 0.2179, stage3_loss_iou: 0.3826, stage3_loss_global: 0.1614, stage3_loss_mask: 0.5579, stage4_loss_cls: 0.2288, stage4_pos_acc: 94.5000, stage4_loss_bbox: 0.2177, stage4_loss_iou: 0.3825, stage4_loss_global: 0.1683, stage4_loss_mask: 0.5825, stage5_loss_cls: 0.2382, stage5_pos_acc: 94.0000, stage5_loss_bbox: 0.2158, stage5_loss_iou: 0.3802, stage5_loss_global: 0.1692, stage5_loss_mask: 0.5737, loss: 10.5274, grad_norm: 653.1728
2021-12-29 17:13:15,643 - mmdet - INFO - Saving checkpoint at 17 epochs
2021-12-29 17:14:30,487 - mmdet - INFO - Epoch [18][50/52]	lr: 2.333e-05, eta: 0:19:59, time: 1.328, data_time: 0.219, memory: 8608, stage0_loss_cls: 0.6262, stage0_pos_acc: 92.7500, stage0_loss_bbox: 0.3242, stage0_loss_iou: 0.5804, stage0_loss_global: 0.1178, stage0_loss_mask: 0.5818, stage1_loss_cls: 0.4368, stage1_pos_acc: 95.7500, stage1_loss_bbox: 0.2311, stage1_loss_iou: 0.4022, stage1_loss_global: 0.1156, stage1_loss_mask: 0.5753, stage2_loss_cls: 0.2733, stage2_pos_acc: 96.0000, stage2_loss_bbox: 0.2280, stage2_loss_iou: 0.3965, stage2_loss_global: 0.1180, stage2_loss_mask: 0.5758, stage3_loss_cls: 0.2237, stage3_pos_acc: 96.5000, stage3_loss_bbox: 0.2244, stage3_loss_iou: 0.3902, stage3_loss_global: 0.1212, stage3_loss_mask: 0.5756, stage4_loss_cls: 0.2034, stage4_pos_acc: 95.5000, stage4_loss_bbox: 0.2213, stage4_loss_iou: 0.3875, stage4_loss_global: 0.1232, stage4_loss_mask: 0.5949, stage5_loss_cls: 0.2028, stage5_pos_acc: 96.2500, stage5_loss_bbox: 0.2222, stage5_loss_iou: 0.3880, stage5_loss_global: 0.1188, stage5_loss_mask: 0.5791, loss: 10.1593, grad_norm: 268.4341
2021-12-29 17:14:33,164 - mmdet - INFO - Saving checkpoint at 18 epochs
2021-12-29 17:15:48,464 - mmdet - INFO - Epoch [19][50/52]	lr: 2.463e-05, eta: 0:18:53, time: 1.336, data_time: 0.221, memory: 8608, stage0_loss_cls: 0.6035, stage0_pos_acc: 90.2500, stage0_loss_bbox: 0.3349, stage0_loss_iou: 0.5950, stage0_loss_global: 0.1883, stage0_loss_mask: 0.5877, stage1_loss_cls: 0.4261, stage1_pos_acc: 92.5000, stage1_loss_bbox: 0.2369, stage1_loss_iou: 0.4148, stage1_loss_global: 0.1988, stage1_loss_mask: 0.5729, stage2_loss_cls: 0.2907, stage2_pos_acc: 92.0000, stage2_loss_bbox: 0.2296, stage2_loss_iou: 0.3963, stage2_loss_global: 0.2100, stage2_loss_mask: 0.5622, stage3_loss_cls: 0.2470, stage3_pos_acc: 91.7500, stage3_loss_bbox: 0.2286, stage3_loss_iou: 0.3947, stage3_loss_global: 0.2188, stage3_loss_mask: 0.5604, stage4_loss_cls: 0.2296, stage4_pos_acc: 90.7500, stage4_loss_bbox: 0.2273, stage4_loss_iou: 0.3951, stage4_loss_global: 0.2217, stage4_loss_mask: 0.5863, stage5_loss_cls: 0.2265, stage5_pos_acc: 91.5000, stage5_loss_bbox: 0.2301, stage5_loss_iou: 0.4007, stage5_loss_global: 0.2220, stage5_loss_mask: 0.5716, loss: 10.8079, grad_norm: 323.6686
2021-12-29 17:15:51,146 - mmdet - INFO - Saving checkpoint at 19 epochs
2021-12-29 17:17:06,197 - mmdet - INFO - Epoch [20][50/52]	lr: 2.500e-05, eta: 0:17:46, time: 1.323, data_time: 0.219, memory: 8608, stage0_loss_cls: 0.5567, stage0_pos_acc: 89.2500, stage0_loss_bbox: 0.3282, stage0_loss_iou: 0.5740, stage0_loss_global: 0.1595, stage0_loss_mask: 0.5699, stage1_loss_cls: 0.3803, stage1_pos_acc: 91.0000, stage1_loss_bbox: 0.2274, stage1_loss_iou: 0.4063, stage1_loss_global: 0.1668, stage1_loss_mask: 0.5583, stage2_loss_cls: 0.2939, stage2_pos_acc: 92.5000, stage2_loss_bbox: 0.2116, stage2_loss_iou: 0.3821, stage2_loss_global: 0.1793, stage2_loss_mask: 0.5394, stage3_loss_cls: 0.2414, stage3_pos_acc: 92.2500, stage3_loss_bbox: 0.2143, stage3_loss_iou: 0.3796, stage3_loss_global: 0.2019, stage3_loss_mask: 0.5465, stage4_loss_cls: 0.2305, stage4_pos_acc: 93.0000, stage4_loss_bbox: 0.2149, stage4_loss_iou: 0.3800, stage4_loss_global: 0.2036, stage4_loss_mask: 0.5710, stage5_loss_cls: 0.2392, stage5_pos_acc: 93.5000, stage5_loss_bbox: 0.2161, stage5_loss_iou: 0.3832, stage5_loss_global: 0.2106, stage5_loss_mask: 0.5606, loss: 10.3268, grad_norm: 335.5898
2021-12-29 17:17:08,895 - mmdet - INFO - Saving checkpoint at 20 epochs
2021-12-29 17:18:22,694 - mmdet - INFO - Epoch [21][50/52]	lr: 2.500e-05, eta: 0:16:39, time: 1.306, data_time: 0.213, memory: 8608, stage0_loss_cls: 0.5168, stage0_pos_acc: 88.5000, stage0_loss_bbox: 0.3228, stage0_loss_iou: 0.5775, stage0_loss_global: 0.1845, stage0_loss_mask: 0.5369, stage1_loss_cls: 0.3521, stage1_pos_acc: 91.7500, stage1_loss_bbox: 0.2219, stage1_loss_iou: 0.3930, stage1_loss_global: 0.1958, stage1_loss_mask: 0.5235, stage2_loss_cls: 0.2537, stage2_pos_acc: 92.0000, stage2_loss_bbox: 0.2174, stage2_loss_iou: 0.3793, stage2_loss_global: 0.2080, stage2_loss_mask: 0.5248, stage3_loss_cls: 0.2005, stage3_pos_acc: 91.0000, stage3_loss_bbox: 0.2163, stage3_loss_iou: 0.3769, stage3_loss_global: 0.2116, stage3_loss_mask: 0.5229, stage4_loss_cls: 0.1963, stage4_pos_acc: 91.5000, stage4_loss_bbox: 0.2134, stage4_loss_iou: 0.3740, stage4_loss_global: 0.2177, stage4_loss_mask: 0.5324, stage5_loss_cls: 0.1885, stage5_pos_acc: 91.5000, stage5_loss_bbox: 0.2132, stage5_loss_iou: 0.3739, stage5_loss_global: 0.2175, stage5_loss_mask: 0.5300, loss: 9.9933, grad_norm: 256.1414
2021-12-29 17:18:25,329 - mmdet - INFO - Saving checkpoint at 21 epochs
2021-12-29 17:19:39,962 - mmdet - INFO - Epoch [22][50/52]	lr: 2.500e-05, eta: 0:15:32, time: 1.319, data_time: 0.220, memory: 8624, stage0_loss_cls: 0.4836, stage0_pos_acc: 90.5000, stage0_loss_bbox: 0.3054, stage0_loss_iou: 0.5531, stage0_loss_global: 0.1673, stage0_loss_mask: 0.5316, stage1_loss_cls: 0.3358, stage1_pos_acc: 91.0000, stage1_loss_bbox: 0.2199, stage1_loss_iou: 0.3813, stage1_loss_global: 0.1687, stage1_loss_mask: 0.5212, stage2_loss_cls: 0.2475, stage2_pos_acc: 90.7500, stage2_loss_bbox: 0.2104, stage2_loss_iou: 0.3673, stage2_loss_global: 0.1695, stage2_loss_mask: 0.5269, stage3_loss_cls: 0.1948, stage3_pos_acc: 90.5000, stage3_loss_bbox: 0.2135, stage3_loss_iou: 0.3713, stage3_loss_global: 0.1702, stage3_loss_mask: 0.5327, stage4_loss_cls: 0.1818, stage4_pos_acc: 90.7500, stage4_loss_bbox: 0.2110, stage4_loss_iou: 0.3670, stage4_loss_global: 0.1785, stage4_loss_mask: 0.5351, stage5_loss_cls: 0.1796, stage5_pos_acc: 91.0000, stage5_loss_bbox: 0.2118, stage5_loss_iou: 0.3675, stage5_loss_global: 0.1770, stage5_loss_mask: 0.5307, loss: 9.6118, grad_norm: 291.7319
2021-12-29 17:19:42,645 - mmdet - INFO - Saving checkpoint at 22 epochs
2021-12-29 17:20:57,234 - mmdet - INFO - Epoch [23][50/52]	lr: 2.500e-05, eta: 0:14:25, time: 1.322, data_time: 0.217, memory: 8624, stage0_loss_cls: 0.5049, stage0_pos_acc: 90.7500, stage0_loss_bbox: 0.3370, stage0_loss_iou: 0.6165, stage0_loss_global: 0.2133, stage0_loss_mask: 0.5349, stage1_loss_cls: 0.3682, stage1_pos_acc: 91.0000, stage1_loss_bbox: 0.2219, stage1_loss_iou: 0.3949, stage1_loss_global: 0.2187, stage1_loss_mask: 0.5344, stage2_loss_cls: 0.2498, stage2_pos_acc: 90.5000, stage2_loss_bbox: 0.2120, stage2_loss_iou: 0.3746, stage2_loss_global: 0.2363, stage2_loss_mask: 0.5282, stage3_loss_cls: 0.2286, stage3_pos_acc: 90.5000, stage3_loss_bbox: 0.2102, stage3_loss_iou: 0.3722, stage3_loss_global: 0.2333, stage3_loss_mask: 0.5282, stage4_loss_cls: 0.1968, stage4_pos_acc: 90.5000, stage4_loss_bbox: 0.2139, stage4_loss_iou: 0.3725, stage4_loss_global: 0.2424, stage4_loss_mask: 0.5266, stage5_loss_cls: 0.1918, stage5_pos_acc: 90.2500, stage5_loss_bbox: 0.2133, stage5_loss_iou: 0.3726, stage5_loss_global: 0.2348, stage5_loss_mask: 0.5205, loss: 10.2033, grad_norm: 380.8131
2021-12-29 17:20:59,832 - mmdet - INFO - Saving checkpoint at 23 epochs
2021-12-29 17:22:14,035 - mmdet - INFO - Epoch [24][50/52]	lr: 2.500e-05, eta: 0:13:19, time: 1.315, data_time: 0.218, memory: 8624, stage0_loss_cls: 0.4676, stage0_pos_acc: 94.5000, stage0_loss_bbox: 0.3534, stage0_loss_iou: 0.6275, stage0_loss_global: 0.0860, stage0_loss_mask: 0.5296, stage1_loss_cls: 0.3067, stage1_pos_acc: 95.5000, stage1_loss_bbox: 0.2174, stage1_loss_iou: 0.3789, stage1_loss_global: 0.0844, stage1_loss_mask: 0.4988, stage2_loss_cls: 0.1766, stage2_pos_acc: 96.0000, stage2_loss_bbox: 0.2098, stage2_loss_iou: 0.3655, stage2_loss_global: 0.0888, stage2_loss_mask: 0.4932, stage3_loss_cls: 0.1518, stage3_pos_acc: 96.2500, stage3_loss_bbox: 0.2010, stage3_loss_iou: 0.3507, stage3_loss_global: 0.0893, stage3_loss_mask: 0.4892, stage4_loss_cls: 0.1367, stage4_pos_acc: 95.7500, stage4_loss_bbox: 0.2008, stage4_loss_iou: 0.3487, stage4_loss_global: 0.0908, stage4_loss_mask: 0.4919, stage5_loss_cls: 0.1323, stage5_pos_acc: 96.0000, stage5_loss_bbox: 0.2055, stage5_loss_iou: 0.3544, stage5_loss_global: 0.0946, stage5_loss_mask: 0.5068, loss: 8.7287, grad_norm: 272.8006
2021-12-29 17:22:16,617 - mmdet - INFO - Saving checkpoint at 24 epochs
2021-12-29 17:23:31,883 - mmdet - INFO - Epoch [25][50/52]	lr: 2.500e-05, eta: 0:12:12, time: 1.332, data_time: 0.217, memory: 8624, stage0_loss_cls: 0.4831, stage0_pos_acc: 92.2500, stage0_loss_bbox: 0.3371, stage0_loss_iou: 0.6007, stage0_loss_global: 0.1370, stage0_loss_mask: 0.4907, stage1_loss_cls: 0.3293, stage1_pos_acc: 93.7500, stage1_loss_bbox: 0.2209, stage1_loss_iou: 0.3891, stage1_loss_global: 0.1488, stage1_loss_mask: 0.5027, stage2_loss_cls: 0.2332, stage2_pos_acc: 92.2500, stage2_loss_bbox: 0.2094, stage2_loss_iou: 0.3668, stage2_loss_global: 0.1487, stage2_loss_mask: 0.4974, stage3_loss_cls: 0.1961, stage3_pos_acc: 92.7500, stage3_loss_bbox: 0.2023, stage3_loss_iou: 0.3553, stage3_loss_global: 0.1515, stage3_loss_mask: 0.4933, stage4_loss_cls: 0.1766, stage4_pos_acc: 92.0000, stage4_loss_bbox: 0.2046, stage4_loss_iou: 0.3583, stage4_loss_global: 0.1555, stage4_loss_mask: 0.5187, stage5_loss_cls: 0.1776, stage5_pos_acc: 92.2500, stage5_loss_bbox: 0.2033, stage5_loss_iou: 0.3572, stage5_loss_global: 0.1522, stage5_loss_mask: 0.5124, loss: 9.3097, grad_norm: 367.1840
2021-12-29 17:23:34,472 - mmdet - INFO - Saving checkpoint at 25 epochs
2021-12-29 17:24:48,801 - mmdet - INFO - Epoch [26][50/52]	lr: 2.500e-05, eta: 0:11:06, time: 1.310, data_time: 0.217, memory: 8624, stage0_loss_cls: 0.4333, stage0_pos_acc: 94.5000, stage0_loss_bbox: 0.3458, stage0_loss_iou: 0.6126, stage0_loss_global: 0.0885, stage0_loss_mask: 0.5252, stage1_loss_cls: 0.2955, stage1_pos_acc: 96.2500, stage1_loss_bbox: 0.2206, stage1_loss_iou: 0.3834, stage1_loss_global: 0.0902, stage1_loss_mask: 0.5105, stage2_loss_cls: 0.1906, stage2_pos_acc: 95.5000, stage2_loss_bbox: 0.2201, stage2_loss_iou: 0.3746, stage2_loss_global: 0.0906, stage2_loss_mask: 0.5045, stage3_loss_cls: 0.1485, stage3_pos_acc: 96.2500, stage3_loss_bbox: 0.2200, stage3_loss_iou: 0.3730, stage3_loss_global: 0.0883, stage3_loss_mask: 0.5130, stage4_loss_cls: 0.1425, stage4_pos_acc: 95.7500, stage4_loss_bbox: 0.2162, stage4_loss_iou: 0.3711, stage4_loss_global: 0.0885, stage4_loss_mask: 0.5126, stage5_loss_cls: 0.1409, stage5_pos_acc: 95.5000, stage5_loss_bbox: 0.2192, stage5_loss_iou: 0.3723, stage5_loss_global: 0.0905, stage5_loss_mask: 0.5203, loss: 8.9027, grad_norm: 250.1809
2021-12-29 17:24:51,498 - mmdet - INFO - Saving checkpoint at 26 epochs
2021-12-29 17:26:06,887 - mmdet - INFO - Epoch [27][50/52]	lr: 2.500e-05, eta: 0:09:59, time: 1.339, data_time: 0.221, memory: 8624, stage0_loss_cls: 0.4242, stage0_pos_acc: 92.0000, stage0_loss_bbox: 0.3332, stage0_loss_iou: 0.6117, stage0_loss_global: 0.1035, stage0_loss_mask: 0.4966, stage1_loss_cls: 0.2948, stage1_pos_acc: 95.7500, stage1_loss_bbox: 0.2140, stage1_loss_iou: 0.3877, stage1_loss_global: 0.1052, stage1_loss_mask: 0.4917, stage2_loss_cls: 0.1864, stage2_pos_acc: 95.5000, stage2_loss_bbox: 0.2080, stage2_loss_iou: 0.3728, stage2_loss_global: 0.1075, stage2_loss_mask: 0.4888, stage3_loss_cls: 0.1323, stage3_pos_acc: 96.0000, stage3_loss_bbox: 0.2056, stage3_loss_iou: 0.3661, stage3_loss_global: 0.1101, stage3_loss_mask: 0.4903, stage4_loss_cls: 0.1261, stage4_pos_acc: 96.0000, stage4_loss_bbox: 0.2094, stage4_loss_iou: 0.3692, stage4_loss_global: 0.1106, stage4_loss_mask: 0.4952, stage5_loss_cls: 0.1245, stage5_pos_acc: 96.0000, stage5_loss_bbox: 0.2092, stage5_loss_iou: 0.3684, stage5_loss_global: 0.1122, stage5_loss_mask: 0.4962, loss: 8.7515, grad_norm: 237.7897
2021-12-29 17:26:09,569 - mmdet - INFO - Saving checkpoint at 27 epochs
2021-12-29 17:27:25,033 - mmdet - INFO - Epoch [28][50/52]	lr: 2.500e-06, eta: 0:08:53, time: 1.333, data_time: 0.220, memory: 8624, stage0_loss_cls: 0.3828, stage0_pos_acc: 94.7500, stage0_loss_bbox: 0.3146, stage0_loss_iou: 0.5667, stage0_loss_global: 0.0841, stage0_loss_mask: 0.4867, stage1_loss_cls: 0.2408, stage1_pos_acc: 96.5000, stage1_loss_bbox: 0.2058, stage1_loss_iou: 0.3642, stage1_loss_global: 0.0875, stage1_loss_mask: 0.4695, stage2_loss_cls: 0.1698, stage2_pos_acc: 96.0000, stage2_loss_bbox: 0.2049, stage2_loss_iou: 0.3522, stage2_loss_global: 0.0859, stage2_loss_mask: 0.4706, stage3_loss_cls: 0.1206, stage3_pos_acc: 96.2500, stage3_loss_bbox: 0.1999, stage3_loss_iou: 0.3436, stage3_loss_global: 0.0906, stage3_loss_mask: 0.4761, stage4_loss_cls: 0.1063, stage4_pos_acc: 96.7500, stage4_loss_bbox: 0.2012, stage4_loss_iou: 0.3426, stage4_loss_global: 0.0934, stage4_loss_mask: 0.4745, stage5_loss_cls: 0.0995, stage5_pos_acc: 97.5000, stage5_loss_bbox: 0.1973, stage5_loss_iou: 0.3396, stage5_loss_global: 0.0950, stage5_loss_mask: 0.4790, loss: 8.1455, grad_norm: 587.1142
2021-12-29 17:27:27,676 - mmdet - INFO - Saving checkpoint at 28 epochs
2021-12-29 17:28:42,380 - mmdet - INFO - Epoch [29][50/52]	lr: 2.500e-06, eta: 0:07:47, time: 1.326, data_time: 0.215, memory: 8624, stage0_loss_cls: 0.3441, stage0_pos_acc: 96.0000, stage0_loss_bbox: 0.2948, stage0_loss_iou: 0.5317, stage0_loss_global: 0.0602, stage0_loss_mask: 0.5005, stage1_loss_cls: 0.1961, stage1_pos_acc: 97.0000, stage1_loss_bbox: 0.2005, stage1_loss_iou: 0.3583, stage1_loss_global: 0.0603, stage1_loss_mask: 0.4755, stage2_loss_cls: 0.1284, stage2_pos_acc: 97.2500, stage2_loss_bbox: 0.1954, stage2_loss_iou: 0.3485, stage2_loss_global: 0.0608, stage2_loss_mask: 0.4746, stage3_loss_cls: 0.0920, stage3_pos_acc: 97.2500, stage3_loss_bbox: 0.1926, stage3_loss_iou: 0.3452, stage3_loss_global: 0.0619, stage3_loss_mask: 0.4781, stage4_loss_cls: 0.0826, stage4_pos_acc: 97.2500, stage4_loss_bbox: 0.1927, stage4_loss_iou: 0.3432, stage4_loss_global: 0.0628, stage4_loss_mask: 0.4759, stage5_loss_cls: 0.0825, stage5_pos_acc: 97.5000, stage5_loss_bbox: 0.1903, stage5_loss_iou: 0.3405, stage5_loss_global: 0.0643, stage5_loss_mask: 0.4779, loss: 7.7123, grad_norm: 215.4341
2021-12-29 17:28:45,074 - mmdet - INFO - Saving checkpoint at 29 epochs
2021-12-29 17:30:00,748 - mmdet - INFO - Epoch [30][50/52]	lr: 2.500e-06, eta: 0:06:40, time: 1.331, data_time: 0.222, memory: 8624, stage0_loss_cls: 0.3368, stage0_pos_acc: 94.7500, stage0_loss_bbox: 0.2989, stage0_loss_iou: 0.5335, stage0_loss_global: 0.0799, stage0_loss_mask: 0.4829, stage1_loss_cls: 0.2161, stage1_pos_acc: 96.7500, stage1_loss_bbox: 0.2015, stage1_loss_iou: 0.3590, stage1_loss_global: 0.0815, stage1_loss_mask: 0.4575, stage2_loss_cls: 0.1239, stage2_pos_acc: 96.2500, stage2_loss_bbox: 0.2053, stage2_loss_iou: 0.3581, stage2_loss_global: 0.0803, stage2_loss_mask: 0.4569, stage3_loss_cls: 0.0955, stage3_pos_acc: 96.5000, stage3_loss_bbox: 0.1968, stage3_loss_iou: 0.3457, stage3_loss_global: 0.0832, stage3_loss_mask: 0.4375, stage4_loss_cls: 0.0828, stage4_pos_acc: 97.0000, stage4_loss_bbox: 0.1974, stage4_loss_iou: 0.3454, stage4_loss_global: 0.0855, stage4_loss_mask: 0.4461, stage5_loss_cls: 0.0773, stage5_pos_acc: 96.7500, stage5_loss_bbox: 0.1957, stage5_loss_iou: 0.3435, stage5_loss_global: 0.0836, stage5_loss_mask: 0.4476, loss: 7.7357, grad_norm: 498.5025
2021-12-29 17:30:03,371 - mmdet - INFO - Saving checkpoint at 30 epochs
2021-12-29 17:31:18,913 - mmdet - INFO - Epoch [31][50/52]	lr: 2.500e-06, eta: 0:05:34, time: 1.340, data_time: 0.220, memory: 8624, stage0_loss_cls: 0.3429, stage0_pos_acc: 96.7500, stage0_loss_bbox: 0.2922, stage0_loss_iou: 0.5244, stage0_loss_global: 0.0830, stage0_loss_mask: 0.4861, stage1_loss_cls: 0.2101, stage1_pos_acc: 96.5000, stage1_loss_bbox: 0.2030, stage1_loss_iou: 0.3571, stage1_loss_global: 0.0829, stage1_loss_mask: 0.4768, stage2_loss_cls: 0.1372, stage2_pos_acc: 96.0000, stage2_loss_bbox: 0.1941, stage2_loss_iou: 0.3472, stage2_loss_global: 0.0855, stage2_loss_mask: 0.4606, stage3_loss_cls: 0.0978, stage3_pos_acc: 96.0000, stage3_loss_bbox: 0.1921, stage3_loss_iou: 0.3402, stage3_loss_global: 0.0839, stage3_loss_mask: 0.4599, stage4_loss_cls: 0.0866, stage4_pos_acc: 96.2500, stage4_loss_bbox: 0.1880, stage4_loss_iou: 0.3328, stage4_loss_global: 0.0823, stage4_loss_mask: 0.4598, stage5_loss_cls: 0.0795, stage5_pos_acc: 96.7500, stage5_loss_bbox: 0.1875, stage5_loss_iou: 0.3314, stage5_loss_global: 0.0799, stage5_loss_mask: 0.4618, loss: 7.7468, grad_norm: 222.8779
2021-12-29 17:31:21,554 - mmdet - INFO - Saving checkpoint at 31 epochs
2021-12-29 17:32:36,407 - mmdet - INFO - Epoch [32][50/52]	lr: 2.500e-06, eta: 0:04:28, time: 1.322, data_time: 0.218, memory: 8624, stage0_loss_cls: 0.3222, stage0_pos_acc: 96.7500, stage0_loss_bbox: 0.2934, stage0_loss_iou: 0.5240, stage0_loss_global: 0.0461, stage0_loss_mask: 0.4867, stage1_loss_cls: 0.2015, stage1_pos_acc: 98.0000, stage1_loss_bbox: 0.2035, stage1_loss_iou: 0.3575, stage1_loss_global: 0.0451, stage1_loss_mask: 0.4646, stage2_loss_cls: 0.1197, stage2_pos_acc: 97.5000, stage2_loss_bbox: 0.1934, stage2_loss_iou: 0.3395, stage2_loss_global: 0.0439, stage2_loss_mask: 0.4609, stage3_loss_cls: 0.0856, stage3_pos_acc: 97.5000, stage3_loss_bbox: 0.1915, stage3_loss_iou: 0.3358, stage3_loss_global: 0.0443, stage3_loss_mask: 0.4594, stage4_loss_cls: 0.0762, stage4_pos_acc: 97.7500, stage4_loss_bbox: 0.1852, stage4_loss_iou: 0.3301, stage4_loss_global: 0.0421, stage4_loss_mask: 0.4592, stage5_loss_cls: 0.0765, stage5_pos_acc: 98.0000, stage5_loss_bbox: 0.1838, stage5_loss_iou: 0.3281, stage5_loss_global: 0.0435, stage5_loss_mask: 0.4610, loss: 7.4046, grad_norm: 163.1795
2021-12-29 17:32:39,022 - mmdet - INFO - Saving checkpoint at 32 epochs
2021-12-29 17:33:54,149 - mmdet - INFO - Epoch [33][50/52]	lr: 2.500e-06, eta: 0:03:21, time: 1.334, data_time: 0.220, memory: 8624, stage0_loss_cls: 0.3163, stage0_pos_acc: 96.0000, stage0_loss_bbox: 0.2717, stage0_loss_iou: 0.5011, stage0_loss_global: 0.0818, stage0_loss_mask: 0.4612, stage1_loss_cls: 0.1996, stage1_pos_acc: 96.2500, stage1_loss_bbox: 0.1871, stage1_loss_iou: 0.3360, stage1_loss_global: 0.0876, stage1_loss_mask: 0.4433, stage2_loss_cls: 0.1147, stage2_pos_acc: 96.7500, stage2_loss_bbox: 0.1855, stage2_loss_iou: 0.3333, stage2_loss_global: 0.0868, stage2_loss_mask: 0.4401, stage3_loss_cls: 0.0812, stage3_pos_acc: 96.7500, stage3_loss_bbox: 0.1848, stage3_loss_iou: 0.3314, stage3_loss_global: 0.0862, stage3_loss_mask: 0.4436, stage4_loss_cls: 0.0756, stage4_pos_acc: 96.7500, stage4_loss_bbox: 0.1822, stage4_loss_iou: 0.3275, stage4_loss_global: 0.0896, stage4_loss_mask: 0.4436, stage5_loss_cls: 0.0652, stage5_pos_acc: 97.0000, stage5_loss_bbox: 0.1817, stage5_loss_iou: 0.3267, stage5_loss_global: 0.0928, stage5_loss_mask: 0.4438, loss: 7.4016, grad_norm: 282.2331
2021-12-29 17:33:56,890 - mmdet - INFO - Saving checkpoint at 33 epochs
2021-12-29 17:35:12,167 - mmdet - INFO - Epoch [34][50/52]	lr: 2.500e-07, eta: 0:02:15, time: 1.333, data_time: 0.219, memory: 8624, stage0_loss_cls: 0.3020, stage0_pos_acc: 96.2500, stage0_loss_bbox: 0.2835, stage0_loss_iou: 0.5173, stage0_loss_global: 0.0559, stage0_loss_mask: 0.4687, stage1_loss_cls: 0.1931, stage1_pos_acc: 98.0000, stage1_loss_bbox: 0.1976, stage1_loss_iou: 0.3493, stage1_loss_global: 0.0556, stage1_loss_mask: 0.4487, stage2_loss_cls: 0.1225, stage2_pos_acc: 97.7500, stage2_loss_bbox: 0.1890, stage2_loss_iou: 0.3403, stage2_loss_global: 0.0545, stage2_loss_mask: 0.4483, stage3_loss_cls: 0.0923, stage3_pos_acc: 98.2500, stage3_loss_bbox: 0.1879, stage3_loss_iou: 0.3336, stage3_loss_global: 0.0543, stage3_loss_mask: 0.4495, stage4_loss_cls: 0.0708, stage4_pos_acc: 98.2500, stage4_loss_bbox: 0.1873, stage4_loss_iou: 0.3316, stage4_loss_global: 0.0537, stage4_loss_mask: 0.4447, stage5_loss_cls: 0.0685, stage5_pos_acc: 98.2500, stage5_loss_bbox: 0.1874, stage5_loss_iou: 0.3316, stage5_loss_global: 0.0526, stage5_loss_mask: 0.4446, loss: 7.3165, grad_norm: 197.9536
2021-12-29 17:35:14,756 - mmdet - INFO - Saving checkpoint at 34 epochs
2021-12-29 17:36:29,505 - mmdet - INFO - Epoch [35][50/52]	lr: 2.500e-07, eta: 0:01:08, time: 1.323, data_time: 0.218, memory: 8624, stage0_loss_cls: 0.3138, stage0_pos_acc: 96.0000, stage0_loss_bbox: 0.2733, stage0_loss_iou: 0.4957, stage0_loss_global: 0.0555, stage0_loss_mask: 0.4550, stage1_loss_cls: 0.1681, stage1_pos_acc: 97.0000, stage1_loss_bbox: 0.2079, stage1_loss_iou: 0.3611, stage1_loss_global: 0.0558, stage1_loss_mask: 0.4841, stage2_loss_cls: 0.1029, stage2_pos_acc: 98.0000, stage2_loss_bbox: 0.2007, stage2_loss_iou: 0.3461, stage2_loss_global: 0.0517, stage2_loss_mask: 0.4716, stage3_loss_cls: 0.0782, stage3_pos_acc: 97.5000, stage3_loss_bbox: 0.1942, stage3_loss_iou: 0.3394, stage3_loss_global: 0.0534, stage3_loss_mask: 0.4774, stage4_loss_cls: 0.0673, stage4_pos_acc: 97.5000, stage4_loss_bbox: 0.1921, stage4_loss_iou: 0.3352, stage4_loss_global: 0.0535, stage4_loss_mask: 0.4569, stage5_loss_cls: 0.0649, stage5_pos_acc: 97.2500, stage5_loss_bbox: 0.1918, stage5_loss_iou: 0.3349, stage5_loss_global: 0.0540, stage5_loss_mask: 0.4784, loss: 7.4147, grad_norm: 208.5479
2021-12-29 17:36:32,130 - mmdet - INFO - Saving checkpoint at 35 epochs
2021-12-29 17:37:46,961 - mmdet - INFO - Epoch [36][50/52]	lr: 2.500e-07, eta: 0:00:02, time: 1.325, data_time: 0.222, memory: 8624, stage0_loss_cls: 0.2866, stage0_pos_acc: 96.5000, stage0_loss_bbox: 0.2630, stage0_loss_iou: 0.4865, stage0_loss_global: 0.0587, stage0_loss_mask: 0.4497, stage1_loss_cls: 0.1735, stage1_pos_acc: 97.7500, stage1_loss_bbox: 0.1893, stage1_loss_iou: 0.3408, stage1_loss_global: 0.0543, stage1_loss_mask: 0.4427, stage2_loss_cls: 0.1115, stage2_pos_acc: 97.0000, stage2_loss_bbox: 0.1838, stage2_loss_iou: 0.3313, stage2_loss_global: 0.0544, stage2_loss_mask: 0.4328, stage3_loss_cls: 0.0779, stage3_pos_acc: 97.2500, stage3_loss_bbox: 0.1817, stage3_loss_iou: 0.3243, stage3_loss_global: 0.0525, stage3_loss_mask: 0.4385, stage4_loss_cls: 0.0687, stage4_pos_acc: 96.7500, stage4_loss_bbox: 0.1792, stage4_loss_iou: 0.3202, stage4_loss_global: 0.0511, stage4_loss_mask: 0.4376, stage5_loss_cls: 0.0679, stage5_pos_acc: 97.0000, stage5_loss_bbox: 0.1778, stage5_loss_iou: 0.3194, stage5_loss_global: 0.0493, stage5_loss_mask: 0.4413, loss: 7.0465, grad_norm: 267.5589
2021-12-29 17:37:49,736 - mmdet - INFO - Saving checkpoint at 36 epochs
