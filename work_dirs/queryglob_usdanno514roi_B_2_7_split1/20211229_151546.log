2021-12-29 15:15:47,275 - mmdet - INFO - Environment info:
------------------------------------------------------------
sys.platform: linux
Python: 3.8.10 (default, Jun  4 2021, 15:09:15) [GCC 7.5.0]
CUDA available: True
GPU 0,1,2,3: NVIDIA TITAN Xp
CUDA_HOME: /usr/local/cuda
NVCC: Cuda compilation tools, release 10.2, V10.2.89
GCC: gcc (Ubuntu 5.4.0-6ubuntu1~16.04.12) 5.4.0 20160609
PyTorch: 1.7.0
PyTorch compiling details: PyTorch built with:
  - GCC 7.3
  - C++ Version: 201402
  - Intel(R) Math Kernel Library Version 2020.0.0 Product Build 20191122 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v1.6.0 (Git Hash 5ef631a030a6f73131c77892041042805a06064f)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 10.2
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75
  - CuDNN 7.6.5
  - Magma 2.5.2
  - Build settings: BLAS=MKL, BUILD_TYPE=Release, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DUSE_VULKAN_WRAPPER -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, USE_CUDA=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, 

TorchVision: 0.8.1
OpenCV: 4.5.3
MMCV: 1.3.18
MMCV Compiler: GCC 7.3
MMCV CUDA Compiler: 10.2
MMDetection: 2.12.0+170db93
------------------------------------------------------------

2021-12-29 15:15:50,323 - mmdet - INFO - Distributed training: True
2021-12-29 15:15:53,335 - mmdet - INFO - Config:
dataset_type = 'AnatomyDataset'
data_root = '/mnt/home1/workspace2/QueryInst/data/usd514_jpeg_roi'
split = 'split_1'
img_norm_cfg = dict(
    mean=[123.675, 116.28, 103.53], std=[58.395, 57.12, 57.375], to_rgb=True)
albu_train_transforms = [
    dict(
        type='OneOf',
        transforms=[
            dict(
                type='Affine',
                translate_percent=0.0,
                rotate=90,
                fit_output=True,
                p=0.25),
            dict(
                type='Affine',
                translate_percent=0.0,
                rotate=180,
                fit_output=True,
                p=0.25),
            dict(
                type='Affine',
                translate_percent=0.0,
                rotate=270,
                fit_output=True,
                p=0.25)
        ],
        p=0.75)
]
train_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(type='LoadAnnotations', with_bbox=True, with_mask=True),
    dict(type='LoadAnatomy'),
    dict(type='RandomFlip', flip_ratio=0.5),
    dict(
        type='Albu',
        transforms=[
            dict(
                type='OneOf',
                transforms=[
                    dict(
                        type='Affine',
                        translate_percent=0.0,
                        rotate=90,
                        fit_output=True,
                        p=0.25),
                    dict(
                        type='Affine',
                        translate_percent=0.0,
                        rotate=180,
                        fit_output=True,
                        p=0.25),
                    dict(
                        type='Affine',
                        translate_percent=0.0,
                        rotate=270,
                        fit_output=True,
                        p=0.25)
                ],
                p=0.75)
        ],
        bbox_params=dict(
            type='BboxParams',
            format='pascal_voc',
            label_fields=['gt_labels'],
            min_visibility=0.0,
            filter_lost_elements=True),
        keymap=dict(img='image', gt_masks='masks', gt_bboxes='bboxes'),
        update_pad_shape=False,
        skip_img_without_anno=True),
    dict(
        type='Resize',
        img_scale=[(1333, 480), (1333, 512), (1333, 544), (1333, 576),
                   (1333, 608), (1333, 640), (1333, 672), (1333, 704),
                   (1333, 736), (1333, 768), (1333, 800)],
        multiscale_mode='value',
        keep_ratio=True),
    dict(
        type='Normalize',
        mean=[123.675, 116.28, 103.53],
        std=[58.395, 57.12, 57.375],
        to_rgb=True),
    dict(type='Pad', size_divisor=32),
    dict(type='DefaultFormatBundle'),
    dict(type='FormatAnatomyBundle'),
    dict(
        type='Collect',
        keys=['img', 'anatomy', 'gt_bboxes', 'gt_labels', 'gt_masks'])
]
test_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(type='LoadAnatomy'),
    dict(
        type='MultiScaleFlipAug',
        img_scale=(1333, 800),
        flip=False,
        transforms=[
            dict(type='Resize', keep_ratio=True),
            dict(type='RandomFlip'),
            dict(
                type='Normalize',
                mean=[123.675, 116.28, 103.53],
                std=[58.395, 57.12, 57.375],
                to_rgb=True),
            dict(type='Pad', size_divisor=32),
            dict(type='ImageToTensor', keys=['img']),
            dict(type='FormatAnatomyBundle'),
            dict(type='Collect', keys=['img', 'anatomy'])
        ])
]
data = dict(
    samples_per_gpu=2,
    workers_per_gpu=2,
    train=dict(
        type='AnatomyDataset',
        ann_file=
        '/mnt/home1/workspace2/QueryInst/data/usd514_jpeg_roi/annotations/train_anno_crop_split_1.json',
        img_prefix=
        '/mnt/home1/workspace2/QueryInst/data/usd514_jpeg_roi/images/',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(type='LoadAnnotations', with_bbox=True, with_mask=True),
            dict(type='LoadAnatomy'),
            dict(type='RandomFlip', flip_ratio=0.5),
            dict(
                type='Albu',
                transforms=[
                    dict(
                        type='OneOf',
                        transforms=[
                            dict(
                                type='Affine',
                                translate_percent=0.0,
                                rotate=90,
                                fit_output=True,
                                p=0.25),
                            dict(
                                type='Affine',
                                translate_percent=0.0,
                                rotate=180,
                                fit_output=True,
                                p=0.25),
                            dict(
                                type='Affine',
                                translate_percent=0.0,
                                rotate=270,
                                fit_output=True,
                                p=0.25)
                        ],
                        p=0.75)
                ],
                bbox_params=dict(
                    type='BboxParams',
                    format='pascal_voc',
                    label_fields=['gt_labels'],
                    min_visibility=0.0,
                    filter_lost_elements=True),
                keymap=dict(img='image', gt_masks='masks', gt_bboxes='bboxes'),
                update_pad_shape=False,
                skip_img_without_anno=True),
            dict(
                type='Resize',
                img_scale=[(1333, 480), (1333, 512), (1333, 544), (1333, 576),
                           (1333, 608), (1333, 640), (1333, 672), (1333, 704),
                           (1333, 736), (1333, 768), (1333, 800)],
                multiscale_mode='value',
                keep_ratio=True),
            dict(
                type='Normalize',
                mean=[123.675, 116.28, 103.53],
                std=[58.395, 57.12, 57.375],
                to_rgb=True),
            dict(type='Pad', size_divisor=32),
            dict(type='DefaultFormatBundle'),
            dict(type='FormatAnatomyBundle'),
            dict(
                type='Collect',
                keys=['img', 'anatomy', 'gt_bboxes', 'gt_labels', 'gt_masks'])
        ],
        classes=('lmym', 'GIST')),
    val=dict(
        type='AnatomyDataset',
        ann_file=
        '/mnt/home1/workspace2/QueryInst/data/usd514_jpeg_roi/annotations/val_anno_crop_split_1.json',
        img_prefix=
        '/mnt/home1/workspace2/QueryInst/data/usd514_jpeg_roi/images/',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(type='LoadAnatomy'),
            dict(
                type='MultiScaleFlipAug',
                img_scale=(1333, 800),
                flip=False,
                transforms=[
                    dict(type='Resize', keep_ratio=True),
                    dict(type='RandomFlip'),
                    dict(
                        type='Normalize',
                        mean=[123.675, 116.28, 103.53],
                        std=[58.395, 57.12, 57.375],
                        to_rgb=True),
                    dict(type='Pad', size_divisor=32),
                    dict(type='ImageToTensor', keys=['img']),
                    dict(type='FormatAnatomyBundle'),
                    dict(type='Collect', keys=['img', 'anatomy'])
                ])
        ],
        classes=('lmym', 'GIST')),
    test=dict(
        type='AnatomyDataset',
        ann_file=
        '/mnt/home1/workspace2/QueryInst/data/usd514_jpeg_roi/annotations/val_anno_crop_split_1.json',
        img_prefix=
        '/mnt/home1/workspace2/QueryInst/data/usd514_jpeg_roi/images/',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(type='LoadAnatomy'),
            dict(
                type='MultiScaleFlipAug',
                img_scale=(1333, 800),
                flip=False,
                transforms=[
                    dict(type='Resize', keep_ratio=True),
                    dict(type='RandomFlip'),
                    dict(
                        type='Normalize',
                        mean=[123.675, 116.28, 103.53],
                        std=[58.395, 57.12, 57.375],
                        to_rgb=True),
                    dict(type='Pad', size_divisor=32),
                    dict(type='ImageToTensor', keys=['img']),
                    dict(type='FormatAnatomyBundle'),
                    dict(type='Collect', keys=['img', 'anatomy'])
                ])
        ],
        classes=('lmym', 'GIST')))
evaluation = dict(metric=['bbox', 'segm', 'glob'])
optimizer = dict(type='AdamW', lr=2.5e-05, weight_decay=0.0001)
optimizer_config = dict(grad_clip=dict(max_norm=1, norm_type=2))
lr_config = dict(
    policy='step',
    warmup='linear',
    warmup_iters=1000,
    warmup_ratio=0.001,
    step=[27, 33])
runner = dict(type='EpochBasedRunner', max_epochs=36)
checkpoint_config = dict(interval=1)
log_config = dict(interval=50, hooks=[dict(type='TextLoggerHook')])
custom_hooks = [dict(type='NumClassCheckHook')]
dist_params = dict(backend='nccl')
log_level = 'INFO'
load_from = 'work_dirs/pretrained/queryInst/queryinst_r101_300_queries-860dc5d5.pth'
resume_from = None
workflow = [('train', 1)]
num_stages = 6
num_proposals = 300
model = dict(
    type='QueryGlob',
    pretrained='torchvision://resnet101',
    backbone=dict(
        type='ResNet',
        depth=101,
        num_stages=4,
        out_indices=(0, 1, 2, 3),
        frozen_stages=1,
        norm_cfg=dict(type='BN', requires_grad=True),
        norm_eval=True,
        style='pytorch'),
    neck=dict(
        type='FPN',
        in_channels=[256, 512, 1024, 2048],
        out_channels=256,
        start_level=0,
        add_extra_convs='on_input',
        num_outs=4),
    rpn_head=dict(
        type='GlobalEmbeddingRPNHead',
        num_proposals=300,
        dim_global=7,
        proposal_feature_channel=256),
    roi_head=dict(
        type='QueryGlobRoIHead',
        num_stages=6,
        stage_loss_weights=[1, 1, 1, 1, 1, 1],
        proposal_feature_channel=256,
        bbox_roi_extractor=dict(
            type='SingleRoIExtractor',
            roi_layer=dict(type='RoIAlign', output_size=7, sampling_ratio=2),
            out_channels=256,
            featmap_strides=[4, 8, 16, 32]),
        mask_roi_extractor=dict(
            type='SingleRoIExtractor',
            roi_layer=dict(type='RoIAlign', output_size=14, sampling_ratio=2),
            out_channels=256,
            featmap_strides=[4, 8, 16, 32]),
        bbox_head=[
            dict(
                type='GlobDIIHead',
                num_classes=2,
                num_ffn_fcs=2,
                num_heads=8,
                num_cls_fcs=2,
                num_glb_fcs=2,
                num_reg_fcs=3,
                feedforward_channels=2048,
                in_channels=256,
                dropout=0.0,
                ffn_act_cfg=dict(type='ReLU', inplace=True),
                dynamic_conv_cfg=dict(
                    type='DynamicConv',
                    in_channels=256,
                    feat_channels=64,
                    out_channels=256,
                    input_feat_shape=7,
                    with_proj=True,
                    act_cfg=dict(type='ReLU', inplace=True),
                    norm_cfg=dict(type='LN')),
                loss_bbox=dict(type='L1Loss', loss_weight=5.0),
                loss_iou=dict(type='GIoULoss', loss_weight=2.0),
                loss_cls=dict(
                    type='FocalLoss',
                    use_sigmoid=True,
                    gamma=2.0,
                    alpha=0.25,
                    loss_weight=2.0),
                loss_global=dict(type='CrossEntropyLoss', loss_weight=1.0),
                bbox_coder=dict(
                    type='DeltaXYWHBBoxCoder',
                    clip_border=False,
                    target_means=[0.0, 0.0, 0.0, 0.0],
                    target_stds=[0.5, 0.5, 1.0, 1.0])),
            dict(
                type='GlobDIIHead',
                num_classes=2,
                num_ffn_fcs=2,
                num_heads=8,
                num_cls_fcs=2,
                num_glb_fcs=2,
                num_reg_fcs=3,
                feedforward_channels=2048,
                in_channels=256,
                dropout=0.0,
                ffn_act_cfg=dict(type='ReLU', inplace=True),
                dynamic_conv_cfg=dict(
                    type='DynamicConv',
                    in_channels=256,
                    feat_channels=64,
                    out_channels=256,
                    input_feat_shape=7,
                    with_proj=True,
                    act_cfg=dict(type='ReLU', inplace=True),
                    norm_cfg=dict(type='LN')),
                loss_bbox=dict(type='L1Loss', loss_weight=5.0),
                loss_iou=dict(type='GIoULoss', loss_weight=2.0),
                loss_cls=dict(
                    type='FocalLoss',
                    use_sigmoid=True,
                    gamma=2.0,
                    alpha=0.25,
                    loss_weight=2.0),
                loss_global=dict(type='CrossEntropyLoss', loss_weight=1.0),
                bbox_coder=dict(
                    type='DeltaXYWHBBoxCoder',
                    clip_border=False,
                    target_means=[0.0, 0.0, 0.0, 0.0],
                    target_stds=[0.5, 0.5, 1.0, 1.0])),
            dict(
                type='GlobDIIHead',
                num_classes=2,
                num_ffn_fcs=2,
                num_heads=8,
                num_cls_fcs=2,
                num_glb_fcs=2,
                num_reg_fcs=3,
                feedforward_channels=2048,
                in_channels=256,
                dropout=0.0,
                ffn_act_cfg=dict(type='ReLU', inplace=True),
                dynamic_conv_cfg=dict(
                    type='DynamicConv',
                    in_channels=256,
                    feat_channels=64,
                    out_channels=256,
                    input_feat_shape=7,
                    with_proj=True,
                    act_cfg=dict(type='ReLU', inplace=True),
                    norm_cfg=dict(type='LN')),
                loss_bbox=dict(type='L1Loss', loss_weight=5.0),
                loss_iou=dict(type='GIoULoss', loss_weight=2.0),
                loss_cls=dict(
                    type='FocalLoss',
                    use_sigmoid=True,
                    gamma=2.0,
                    alpha=0.25,
                    loss_weight=2.0),
                loss_global=dict(type='CrossEntropyLoss', loss_weight=1.0),
                bbox_coder=dict(
                    type='DeltaXYWHBBoxCoder',
                    clip_border=False,
                    target_means=[0.0, 0.0, 0.0, 0.0],
                    target_stds=[0.5, 0.5, 1.0, 1.0])),
            dict(
                type='GlobDIIHead',
                num_classes=2,
                num_ffn_fcs=2,
                num_heads=8,
                num_cls_fcs=2,
                num_glb_fcs=2,
                num_reg_fcs=3,
                feedforward_channels=2048,
                in_channels=256,
                dropout=0.0,
                ffn_act_cfg=dict(type='ReLU', inplace=True),
                dynamic_conv_cfg=dict(
                    type='DynamicConv',
                    in_channels=256,
                    feat_channels=64,
                    out_channels=256,
                    input_feat_shape=7,
                    with_proj=True,
                    act_cfg=dict(type='ReLU', inplace=True),
                    norm_cfg=dict(type='LN')),
                loss_bbox=dict(type='L1Loss', loss_weight=5.0),
                loss_iou=dict(type='GIoULoss', loss_weight=2.0),
                loss_cls=dict(
                    type='FocalLoss',
                    use_sigmoid=True,
                    gamma=2.0,
                    alpha=0.25,
                    loss_weight=2.0),
                loss_global=dict(type='CrossEntropyLoss', loss_weight=1.0),
                bbox_coder=dict(
                    type='DeltaXYWHBBoxCoder',
                    clip_border=False,
                    target_means=[0.0, 0.0, 0.0, 0.0],
                    target_stds=[0.5, 0.5, 1.0, 1.0])),
            dict(
                type='GlobDIIHead',
                num_classes=2,
                num_ffn_fcs=2,
                num_heads=8,
                num_cls_fcs=2,
                num_glb_fcs=2,
                num_reg_fcs=3,
                feedforward_channels=2048,
                in_channels=256,
                dropout=0.0,
                ffn_act_cfg=dict(type='ReLU', inplace=True),
                dynamic_conv_cfg=dict(
                    type='DynamicConv',
                    in_channels=256,
                    feat_channels=64,
                    out_channels=256,
                    input_feat_shape=7,
                    with_proj=True,
                    act_cfg=dict(type='ReLU', inplace=True),
                    norm_cfg=dict(type='LN')),
                loss_bbox=dict(type='L1Loss', loss_weight=5.0),
                loss_iou=dict(type='GIoULoss', loss_weight=2.0),
                loss_cls=dict(
                    type='FocalLoss',
                    use_sigmoid=True,
                    gamma=2.0,
                    alpha=0.25,
                    loss_weight=2.0),
                loss_global=dict(type='CrossEntropyLoss', loss_weight=1.0),
                bbox_coder=dict(
                    type='DeltaXYWHBBoxCoder',
                    clip_border=False,
                    target_means=[0.0, 0.0, 0.0, 0.0],
                    target_stds=[0.5, 0.5, 1.0, 1.0])),
            dict(
                type='GlobDIIHead',
                num_classes=2,
                num_ffn_fcs=2,
                num_heads=8,
                num_cls_fcs=2,
                num_glb_fcs=2,
                num_reg_fcs=3,
                feedforward_channels=2048,
                in_channels=256,
                dropout=0.0,
                ffn_act_cfg=dict(type='ReLU', inplace=True),
                dynamic_conv_cfg=dict(
                    type='DynamicConv',
                    in_channels=256,
                    feat_channels=64,
                    out_channels=256,
                    input_feat_shape=7,
                    with_proj=True,
                    act_cfg=dict(type='ReLU', inplace=True),
                    norm_cfg=dict(type='LN')),
                loss_bbox=dict(type='L1Loss', loss_weight=5.0),
                loss_iou=dict(type='GIoULoss', loss_weight=2.0),
                loss_cls=dict(
                    type='FocalLoss',
                    use_sigmoid=True,
                    gamma=2.0,
                    alpha=0.25,
                    loss_weight=2.0),
                loss_global=dict(type='CrossEntropyLoss', loss_weight=1.0),
                bbox_coder=dict(
                    type='DeltaXYWHBBoxCoder',
                    clip_border=False,
                    target_means=[0.0, 0.0, 0.0, 0.0],
                    target_stds=[0.5, 0.5, 1.0, 1.0]))
        ],
        mask_head=[
            dict(
                type='DynamicMaskHead',
                num_classes=2,
                dynamic_conv_cfg=dict(
                    type='DynamicConv',
                    in_channels=256,
                    feat_channels=64,
                    out_channels=256,
                    input_feat_shape=14,
                    with_proj=False,
                    act_cfg=dict(type='ReLU', inplace=True),
                    norm_cfg=dict(type='LN')),
                dropout=0.0,
                num_convs=4,
                roi_feat_size=14,
                in_channels=256,
                conv_kernel_size=3,
                conv_out_channels=256,
                class_agnostic=False,
                norm_cfg=dict(type='BN'),
                upsample_cfg=dict(type='deconv', scale_factor=2),
                loss_dice=dict(type='DiceLoss', loss_weight=8.0)),
            dict(
                type='DynamicMaskHead',
                num_classes=2,
                dynamic_conv_cfg=dict(
                    type='DynamicConv',
                    in_channels=256,
                    feat_channels=64,
                    out_channels=256,
                    input_feat_shape=14,
                    with_proj=False,
                    act_cfg=dict(type='ReLU', inplace=True),
                    norm_cfg=dict(type='LN')),
                dropout=0.0,
                num_convs=4,
                roi_feat_size=14,
                in_channels=256,
                conv_kernel_size=3,
                conv_out_channels=256,
                class_agnostic=False,
                norm_cfg=dict(type='BN'),
                upsample_cfg=dict(type='deconv', scale_factor=2),
                loss_dice=dict(type='DiceLoss', loss_weight=8.0)),
            dict(
                type='DynamicMaskHead',
                num_classes=2,
                dynamic_conv_cfg=dict(
                    type='DynamicConv',
                    in_channels=256,
                    feat_channels=64,
                    out_channels=256,
                    input_feat_shape=14,
                    with_proj=False,
                    act_cfg=dict(type='ReLU', inplace=True),
                    norm_cfg=dict(type='LN')),
                dropout=0.0,
                num_convs=4,
                roi_feat_size=14,
                in_channels=256,
                conv_kernel_size=3,
                conv_out_channels=256,
                class_agnostic=False,
                norm_cfg=dict(type='BN'),
                upsample_cfg=dict(type='deconv', scale_factor=2),
                loss_dice=dict(type='DiceLoss', loss_weight=8.0)),
            dict(
                type='DynamicMaskHead',
                num_classes=2,
                dynamic_conv_cfg=dict(
                    type='DynamicConv',
                    in_channels=256,
                    feat_channels=64,
                    out_channels=256,
                    input_feat_shape=14,
                    with_proj=False,
                    act_cfg=dict(type='ReLU', inplace=True),
                    norm_cfg=dict(type='LN')),
                dropout=0.0,
                num_convs=4,
                roi_feat_size=14,
                in_channels=256,
                conv_kernel_size=3,
                conv_out_channels=256,
                class_agnostic=False,
                norm_cfg=dict(type='BN'),
                upsample_cfg=dict(type='deconv', scale_factor=2),
                loss_dice=dict(type='DiceLoss', loss_weight=8.0)),
            dict(
                type='DynamicMaskHead',
                num_classes=2,
                dynamic_conv_cfg=dict(
                    type='DynamicConv',
                    in_channels=256,
                    feat_channels=64,
                    out_channels=256,
                    input_feat_shape=14,
                    with_proj=False,
                    act_cfg=dict(type='ReLU', inplace=True),
                    norm_cfg=dict(type='LN')),
                dropout=0.0,
                num_convs=4,
                roi_feat_size=14,
                in_channels=256,
                conv_kernel_size=3,
                conv_out_channels=256,
                class_agnostic=False,
                norm_cfg=dict(type='BN'),
                upsample_cfg=dict(type='deconv', scale_factor=2),
                loss_dice=dict(type='DiceLoss', loss_weight=8.0)),
            dict(
                type='DynamicMaskHead',
                num_classes=2,
                dynamic_conv_cfg=dict(
                    type='DynamicConv',
                    in_channels=256,
                    feat_channels=64,
                    out_channels=256,
                    input_feat_shape=14,
                    with_proj=False,
                    act_cfg=dict(type='ReLU', inplace=True),
                    norm_cfg=dict(type='LN')),
                dropout=0.0,
                num_convs=4,
                roi_feat_size=14,
                in_channels=256,
                conv_kernel_size=3,
                conv_out_channels=256,
                class_agnostic=False,
                norm_cfg=dict(type='BN'),
                upsample_cfg=dict(type='deconv', scale_factor=2),
                loss_dice=dict(type='DiceLoss', loss_weight=8.0))
        ]),
    train_cfg=dict(
        rpn=None,
        rcnn=[
            dict(
                assigner=dict(
                    type='HungarianAssigner',
                    cls_cost=dict(type='FocalLossCost', weight=2.0),
                    reg_cost=dict(type='BBoxL1Cost', weight=5.0),
                    iou_cost=dict(type='IoUCost', iou_mode='giou',
                                  weight=2.0)),
                sampler=dict(type='PseudoSampler'),
                pos_weight=1,
                mask_size=28,
                debug=False),
            dict(
                assigner=dict(
                    type='HungarianAssigner',
                    cls_cost=dict(type='FocalLossCost', weight=2.0),
                    reg_cost=dict(type='BBoxL1Cost', weight=5.0),
                    iou_cost=dict(type='IoUCost', iou_mode='giou',
                                  weight=2.0)),
                sampler=dict(type='PseudoSampler'),
                pos_weight=1,
                mask_size=28,
                debug=False),
            dict(
                assigner=dict(
                    type='HungarianAssigner',
                    cls_cost=dict(type='FocalLossCost', weight=2.0),
                    reg_cost=dict(type='BBoxL1Cost', weight=5.0),
                    iou_cost=dict(type='IoUCost', iou_mode='giou',
                                  weight=2.0)),
                sampler=dict(type='PseudoSampler'),
                pos_weight=1,
                mask_size=28,
                debug=False),
            dict(
                assigner=dict(
                    type='HungarianAssigner',
                    cls_cost=dict(type='FocalLossCost', weight=2.0),
                    reg_cost=dict(type='BBoxL1Cost', weight=5.0),
                    iou_cost=dict(type='IoUCost', iou_mode='giou',
                                  weight=2.0)),
                sampler=dict(type='PseudoSampler'),
                pos_weight=1,
                mask_size=28,
                debug=False),
            dict(
                assigner=dict(
                    type='HungarianAssigner',
                    cls_cost=dict(type='FocalLossCost', weight=2.0),
                    reg_cost=dict(type='BBoxL1Cost', weight=5.0),
                    iou_cost=dict(type='IoUCost', iou_mode='giou',
                                  weight=2.0)),
                sampler=dict(type='PseudoSampler'),
                pos_weight=1,
                mask_size=28,
                debug=False),
            dict(
                assigner=dict(
                    type='HungarianAssigner',
                    cls_cost=dict(type='FocalLossCost', weight=2.0),
                    reg_cost=dict(type='BBoxL1Cost', weight=5.0),
                    iou_cost=dict(type='IoUCost', iou_mode='giou',
                                  weight=2.0)),
                sampler=dict(type='PseudoSampler'),
                pos_weight=1,
                mask_size=28,
                debug=False)
        ]),
    test_cfg=dict(
        rpn=None,
        rcnn=dict(
            max_per_img=300,
            mask_thr_binary=0.5,
            nms=dict(type='nms', iou_threshold=0.7))))
total_epochs = 36
min_values = (480, 512, 544, 576, 608, 640, 672, 704, 736, 768, 800)
classes = ('lmym', 'GIST')
gpu_ids = range(0, 4)
work_dir = './work_dirs/queryglob_usdanno514roi_B_2_7_split1'

2021-12-29 15:15:55,289 - mmdet - INFO - initialize ResNet with init_cfg {'type': 'Pretrained', 'checkpoint': 'torchvision://resnet101'}
2021-12-29 15:15:55,791 - mmdet - INFO - initialize FPN with init_cfg {'type': 'Xavier', 'layer': 'Conv2d', 'distribution': 'uniform'}
2021-12-29 15:15:55,819 - mmdet - INFO - initialize GlobDIIHead with init_cfg [{'type': 'Normal', 'std': 0.01, 'override': {'name': 'fc_cls'}}, {'type': 'Normal', 'std': 0.001, 'override': {'name': 'fc_reg'}}]
2021-12-29 15:15:55,954 - mmdet - INFO - initialize GlobDIIHead with init_cfg [{'type': 'Normal', 'std': 0.01, 'override': {'name': 'fc_cls'}}, {'type': 'Normal', 'std': 0.001, 'override': {'name': 'fc_reg'}}]
2021-12-29 15:15:56,089 - mmdet - INFO - initialize GlobDIIHead with init_cfg [{'type': 'Normal', 'std': 0.01, 'override': {'name': 'fc_cls'}}, {'type': 'Normal', 'std': 0.001, 'override': {'name': 'fc_reg'}}]
2021-12-29 15:15:56,225 - mmdet - INFO - initialize GlobDIIHead with init_cfg [{'type': 'Normal', 'std': 0.01, 'override': {'name': 'fc_cls'}}, {'type': 'Normal', 'std': 0.001, 'override': {'name': 'fc_reg'}}]
2021-12-29 15:15:56,358 - mmdet - INFO - initialize GlobDIIHead with init_cfg [{'type': 'Normal', 'std': 0.01, 'override': {'name': 'fc_cls'}}, {'type': 'Normal', 'std': 0.001, 'override': {'name': 'fc_reg'}}]
2021-12-29 15:15:56,490 - mmdet - INFO - initialize GlobDIIHead with init_cfg [{'type': 'Normal', 'std': 0.01, 'override': {'name': 'fc_cls'}}, {'type': 'Normal', 'std': 0.001, 'override': {'name': 'fc_reg'}}]
Name of parameter - Initialization information

backbone.conv1.weight - torch.Size([64, 3, 7, 7]): 
PretrainedInit: load from torchvision://resnet101 

backbone.bn1.weight - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet101 

backbone.bn1.bias - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer1.0.conv1.weight - torch.Size([64, 64, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer1.0.bn1.weight - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer1.0.bn1.bias - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer1.0.conv2.weight - torch.Size([64, 64, 3, 3]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer1.0.bn2.weight - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer1.0.bn2.bias - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer1.0.conv3.weight - torch.Size([256, 64, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer1.0.bn3.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer1.0.bn3.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer1.0.downsample.0.weight - torch.Size([256, 64, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer1.0.downsample.1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer1.0.downsample.1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer1.1.conv1.weight - torch.Size([64, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer1.1.bn1.weight - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer1.1.bn1.bias - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer1.1.conv2.weight - torch.Size([64, 64, 3, 3]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer1.1.bn2.weight - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer1.1.bn2.bias - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer1.1.conv3.weight - torch.Size([256, 64, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer1.1.bn3.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer1.1.bn3.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer1.2.conv1.weight - torch.Size([64, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer1.2.bn1.weight - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer1.2.bn1.bias - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer1.2.conv2.weight - torch.Size([64, 64, 3, 3]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer1.2.bn2.weight - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer1.2.bn2.bias - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer1.2.conv3.weight - torch.Size([256, 64, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer1.2.bn3.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer1.2.bn3.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer2.0.conv1.weight - torch.Size([128, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer2.0.bn1.weight - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer2.0.bn1.bias - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer2.0.conv2.weight - torch.Size([128, 128, 3, 3]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer2.0.bn2.weight - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer2.0.bn2.bias - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer2.0.conv3.weight - torch.Size([512, 128, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer2.0.bn3.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer2.0.bn3.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer2.0.downsample.0.weight - torch.Size([512, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer2.0.downsample.1.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer2.0.downsample.1.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer2.1.conv1.weight - torch.Size([128, 512, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer2.1.bn1.weight - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer2.1.bn1.bias - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer2.1.conv2.weight - torch.Size([128, 128, 3, 3]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer2.1.bn2.weight - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer2.1.bn2.bias - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer2.1.conv3.weight - torch.Size([512, 128, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer2.1.bn3.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer2.1.bn3.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer2.2.conv1.weight - torch.Size([128, 512, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer2.2.bn1.weight - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer2.2.bn1.bias - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer2.2.conv2.weight - torch.Size([128, 128, 3, 3]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer2.2.bn2.weight - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer2.2.bn2.bias - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer2.2.conv3.weight - torch.Size([512, 128, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer2.2.bn3.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer2.2.bn3.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer2.3.conv1.weight - torch.Size([128, 512, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer2.3.bn1.weight - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer2.3.bn1.bias - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer2.3.conv2.weight - torch.Size([128, 128, 3, 3]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer2.3.bn2.weight - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer2.3.bn2.bias - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer2.3.conv3.weight - torch.Size([512, 128, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer2.3.bn3.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer2.3.bn3.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.0.conv1.weight - torch.Size([256, 512, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.0.bn1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.0.bn1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.0.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.0.bn2.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.0.bn2.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.0.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.0.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.0.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.0.downsample.0.weight - torch.Size([1024, 512, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.0.downsample.1.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.0.downsample.1.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.1.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.1.bn1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.1.bn1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.1.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.1.bn2.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.1.bn2.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.1.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.1.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.1.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.2.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.2.bn1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.2.bn1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.2.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.2.bn2.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.2.bn2.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.2.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.2.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.2.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.3.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.3.bn1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.3.bn1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.3.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.3.bn2.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.3.bn2.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.3.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.3.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.3.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.4.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.4.bn1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.4.bn1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.4.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.4.bn2.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.4.bn2.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.4.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.4.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.4.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.5.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.5.bn1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.5.bn1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.5.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.5.bn2.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.5.bn2.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.5.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.5.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.5.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.6.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.6.bn1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.6.bn1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.6.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.6.bn2.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.6.bn2.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.6.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.6.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.6.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.7.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.7.bn1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.7.bn1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.7.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.7.bn2.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.7.bn2.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.7.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.7.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.7.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.8.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.8.bn1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.8.bn1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.8.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.8.bn2.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.8.bn2.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.8.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.8.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.8.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.9.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.9.bn1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.9.bn1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.9.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.9.bn2.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.9.bn2.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.9.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.9.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.9.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.10.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.10.bn1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.10.bn1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.10.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.10.bn2.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.10.bn2.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.10.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.10.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.10.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.11.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.11.bn1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.11.bn1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.11.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.11.bn2.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.11.bn2.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.11.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.11.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.11.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.12.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.12.bn1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.12.bn1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.12.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.12.bn2.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.12.bn2.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.12.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.12.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.12.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.13.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.13.bn1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.13.bn1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.13.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.13.bn2.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.13.bn2.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.13.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.13.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.13.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.14.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.14.bn1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.14.bn1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.14.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.14.bn2.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.14.bn2.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.14.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.14.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.14.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.15.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.15.bn1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.15.bn1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.15.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.15.bn2.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.15.bn2.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.15.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.15.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.15.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.16.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.16.bn1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.16.bn1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.16.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.16.bn2.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.16.bn2.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.16.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.16.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.16.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.17.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.17.bn1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.17.bn1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.17.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.17.bn2.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.17.bn2.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.17.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.17.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.17.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.18.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.18.bn1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.18.bn1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.18.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.18.bn2.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.18.bn2.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.18.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.18.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.18.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.19.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.19.bn1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.19.bn1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.19.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.19.bn2.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.19.bn2.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.19.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.19.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.19.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.20.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.20.bn1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.20.bn1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.20.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.20.bn2.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.20.bn2.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.20.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.20.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.20.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.21.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.21.bn1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.21.bn1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.21.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.21.bn2.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.21.bn2.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.21.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.21.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.21.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.22.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.22.bn1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.22.bn1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.22.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.22.bn2.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.22.bn2.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.22.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.22.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer3.22.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer4.0.conv1.weight - torch.Size([512, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer4.0.bn1.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer4.0.bn1.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer4.0.conv2.weight - torch.Size([512, 512, 3, 3]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer4.0.bn2.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer4.0.bn2.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer4.0.conv3.weight - torch.Size([2048, 512, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer4.0.bn3.weight - torch.Size([2048]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer4.0.bn3.bias - torch.Size([2048]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer4.0.downsample.0.weight - torch.Size([2048, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer4.0.downsample.1.weight - torch.Size([2048]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer4.0.downsample.1.bias - torch.Size([2048]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer4.1.conv1.weight - torch.Size([512, 2048, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer4.1.bn1.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer4.1.bn1.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer4.1.conv2.weight - torch.Size([512, 512, 3, 3]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer4.1.bn2.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer4.1.bn2.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer4.1.conv3.weight - torch.Size([2048, 512, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer4.1.bn3.weight - torch.Size([2048]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer4.1.bn3.bias - torch.Size([2048]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer4.2.conv1.weight - torch.Size([512, 2048, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer4.2.bn1.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer4.2.bn1.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer4.2.conv2.weight - torch.Size([512, 512, 3, 3]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer4.2.bn2.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer4.2.bn2.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer4.2.conv3.weight - torch.Size([2048, 512, 1, 1]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer4.2.bn3.weight - torch.Size([2048]): 
PretrainedInit: load from torchvision://resnet101 

backbone.layer4.2.bn3.bias - torch.Size([2048]): 
PretrainedInit: load from torchvision://resnet101 

neck.lateral_convs.0.conv.weight - torch.Size([256, 256, 1, 1]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.lateral_convs.0.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

neck.lateral_convs.1.conv.weight - torch.Size([256, 512, 1, 1]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.lateral_convs.1.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

neck.lateral_convs.2.conv.weight - torch.Size([256, 1024, 1, 1]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.lateral_convs.2.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

neck.lateral_convs.3.conv.weight - torch.Size([256, 2048, 1, 1]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.lateral_convs.3.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

neck.fpn_convs.0.conv.weight - torch.Size([256, 256, 3, 3]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.fpn_convs.0.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

neck.fpn_convs.1.conv.weight - torch.Size([256, 256, 3, 3]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.fpn_convs.1.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

neck.fpn_convs.2.conv.weight - torch.Size([256, 256, 3, 3]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.fpn_convs.2.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

neck.fpn_convs.3.conv.weight - torch.Size([256, 256, 3, 3]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.fpn_convs.3.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

rpn_head.init_proposal_bboxes.weight - torch.Size([300, 4]): 
Initialized by user-defined `init_weights` in GlobalEmbeddingRPNHead  

rpn_head.init_proposal_features.weight - torch.Size([300, 256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

rpn_head.global_features_embed.weight - torch.Size([7, 256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.0.fc_cls.weight - torch.Size([2, 256]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.0.fc_cls.bias - torch.Size([2]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.0.fc_reg.weight - torch.Size([4, 256]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.0.fc_reg.bias - torch.Size([4]): 
NormalInit: mean=0, std=0.001, bias=0 

roi_head.bbox_head.0.attention.attn.in_proj_weight - torch.Size([768, 256]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.0.attention.attn.in_proj_bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.0.attention.attn.out_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.0.attention.attn.out_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.0.attention_norm.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.0.attention_norm.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.0.global_attention.attn.in_proj_weight - torch.Size([768, 256]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.0.global_attention.attn.in_proj_bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.0.global_attention.attn.out_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.0.global_attention.attn.out_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.0.global_attention_norm.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.0.global_attention_norm.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.0.instance_interactive_conv.dynamic_layer.weight - torch.Size([32768, 256]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.0.instance_interactive_conv.dynamic_layer.bias - torch.Size([32768]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.0.instance_interactive_conv.norm_in.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.0.instance_interactive_conv.norm_in.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.0.instance_interactive_conv.norm_out.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.0.instance_interactive_conv.norm_out.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.0.instance_interactive_conv.fc_layer.weight - torch.Size([256, 12544]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.0.instance_interactive_conv.fc_layer.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.0.instance_interactive_conv.fc_norm.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.0.instance_interactive_conv.fc_norm.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.0.instance_interactive_conv_norm.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.0.instance_interactive_conv_norm.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.0.ffn.layers.0.0.weight - torch.Size([2048, 256]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.0.ffn.layers.0.0.bias - torch.Size([2048]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.0.ffn.layers.1.weight - torch.Size([256, 2048]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.0.ffn.layers.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.0.ffn_norm.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.0.ffn_norm.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.0.global_ffn.layers.0.0.weight - torch.Size([2048, 256]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.0.global_ffn.layers.0.0.bias - torch.Size([2048]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.0.global_ffn.layers.1.weight - torch.Size([256, 2048]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.0.global_ffn.layers.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.0.global_ffn_norm.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.0.global_ffn_norm.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.0.cls_fcs.0.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.0.cls_fcs.1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.0.cls_fcs.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.0.cls_fcs.3.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.0.cls_fcs.4.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.0.cls_fcs.4.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.0.reg_fcs.0.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.0.reg_fcs.1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.0.reg_fcs.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.0.reg_fcs.3.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.0.reg_fcs.4.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.0.reg_fcs.4.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.0.reg_fcs.6.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.0.reg_fcs.7.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.0.reg_fcs.7.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.0.glb_fcs.0.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.0.glb_fcs.1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.0.glb_fcs.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.0.glb_fcs.3.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.0.glb_fcs.4.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.0.glb_fcs.4.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.0.fc_glb.weight - torch.Size([2, 256]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.0.fc_glb.bias - torch.Size([2]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.1.fc_cls.weight - torch.Size([2, 256]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.1.fc_cls.bias - torch.Size([2]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.1.fc_reg.weight - torch.Size([4, 256]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.1.fc_reg.bias - torch.Size([4]): 
NormalInit: mean=0, std=0.001, bias=0 

roi_head.bbox_head.1.attention.attn.in_proj_weight - torch.Size([768, 256]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.1.attention.attn.in_proj_bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.1.attention.attn.out_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.1.attention.attn.out_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.1.attention_norm.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.1.attention_norm.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.1.global_attention.attn.in_proj_weight - torch.Size([768, 256]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.1.global_attention.attn.in_proj_bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.1.global_attention.attn.out_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.1.global_attention.attn.out_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.1.global_attention_norm.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.1.global_attention_norm.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.1.instance_interactive_conv.dynamic_layer.weight - torch.Size([32768, 256]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.1.instance_interactive_conv.dynamic_layer.bias - torch.Size([32768]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.1.instance_interactive_conv.norm_in.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.1.instance_interactive_conv.norm_in.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.1.instance_interactive_conv.norm_out.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.1.instance_interactive_conv.norm_out.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.1.instance_interactive_conv.fc_layer.weight - torch.Size([256, 12544]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.1.instance_interactive_conv.fc_layer.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.1.instance_interactive_conv.fc_norm.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.1.instance_interactive_conv.fc_norm.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.1.instance_interactive_conv_norm.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.1.instance_interactive_conv_norm.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.1.ffn.layers.0.0.weight - torch.Size([2048, 256]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.1.ffn.layers.0.0.bias - torch.Size([2048]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.1.ffn.layers.1.weight - torch.Size([256, 2048]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.1.ffn.layers.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.1.ffn_norm.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.1.ffn_norm.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.1.global_ffn.layers.0.0.weight - torch.Size([2048, 256]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.1.global_ffn.layers.0.0.bias - torch.Size([2048]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.1.global_ffn.layers.1.weight - torch.Size([256, 2048]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.1.global_ffn.layers.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.1.global_ffn_norm.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.1.global_ffn_norm.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.1.cls_fcs.0.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.1.cls_fcs.1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.1.cls_fcs.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.1.cls_fcs.3.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.1.cls_fcs.4.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.1.cls_fcs.4.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.1.reg_fcs.0.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.1.reg_fcs.1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.1.reg_fcs.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.1.reg_fcs.3.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.1.reg_fcs.4.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.1.reg_fcs.4.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.1.reg_fcs.6.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.1.reg_fcs.7.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.1.reg_fcs.7.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.1.glb_fcs.0.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.1.glb_fcs.1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.1.glb_fcs.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.1.glb_fcs.3.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.1.glb_fcs.4.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.1.glb_fcs.4.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.1.fc_glb.weight - torch.Size([2, 256]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.1.fc_glb.bias - torch.Size([2]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.2.fc_cls.weight - torch.Size([2, 256]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.2.fc_cls.bias - torch.Size([2]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.2.fc_reg.weight - torch.Size([4, 256]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.2.fc_reg.bias - torch.Size([4]): 
NormalInit: mean=0, std=0.001, bias=0 

roi_head.bbox_head.2.attention.attn.in_proj_weight - torch.Size([768, 256]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.2.attention.attn.in_proj_bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.2.attention.attn.out_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.2.attention.attn.out_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.2.attention_norm.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.2.attention_norm.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.2.global_attention.attn.in_proj_weight - torch.Size([768, 256]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.2.global_attention.attn.in_proj_bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.2.global_attention.attn.out_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.2.global_attention.attn.out_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.2.global_attention_norm.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.2.global_attention_norm.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.2.instance_interactive_conv.dynamic_layer.weight - torch.Size([32768, 256]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.2.instance_interactive_conv.dynamic_layer.bias - torch.Size([32768]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.2.instance_interactive_conv.norm_in.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.2.instance_interactive_conv.norm_in.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.2.instance_interactive_conv.norm_out.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.2.instance_interactive_conv.norm_out.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.2.instance_interactive_conv.fc_layer.weight - torch.Size([256, 12544]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.2.instance_interactive_conv.fc_layer.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.2.instance_interactive_conv.fc_norm.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.2.instance_interactive_conv.fc_norm.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.2.instance_interactive_conv_norm.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.2.instance_interactive_conv_norm.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.2.ffn.layers.0.0.weight - torch.Size([2048, 256]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.2.ffn.layers.0.0.bias - torch.Size([2048]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.2.ffn.layers.1.weight - torch.Size([256, 2048]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.2.ffn.layers.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.2.ffn_norm.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.2.ffn_norm.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.2.global_ffn.layers.0.0.weight - torch.Size([2048, 256]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.2.global_ffn.layers.0.0.bias - torch.Size([2048]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.2.global_ffn.layers.1.weight - torch.Size([256, 2048]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.2.global_ffn.layers.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.2.global_ffn_norm.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.2.global_ffn_norm.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.2.cls_fcs.0.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.2.cls_fcs.1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.2.cls_fcs.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.2.cls_fcs.3.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.2.cls_fcs.4.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.2.cls_fcs.4.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.2.reg_fcs.0.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.2.reg_fcs.1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.2.reg_fcs.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.2.reg_fcs.3.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.2.reg_fcs.4.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.2.reg_fcs.4.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.2.reg_fcs.6.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.2.reg_fcs.7.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.2.reg_fcs.7.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.2.glb_fcs.0.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.2.glb_fcs.1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.2.glb_fcs.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.2.glb_fcs.3.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.2.glb_fcs.4.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.2.glb_fcs.4.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.2.fc_glb.weight - torch.Size([2, 256]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.2.fc_glb.bias - torch.Size([2]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.3.fc_cls.weight - torch.Size([2, 256]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.3.fc_cls.bias - torch.Size([2]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.3.fc_reg.weight - torch.Size([4, 256]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.3.fc_reg.bias - torch.Size([4]): 
NormalInit: mean=0, std=0.001, bias=0 

roi_head.bbox_head.3.attention.attn.in_proj_weight - torch.Size([768, 256]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.3.attention.attn.in_proj_bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.3.attention.attn.out_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.3.attention.attn.out_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.3.attention_norm.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.3.attention_norm.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.3.global_attention.attn.in_proj_weight - torch.Size([768, 256]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.3.global_attention.attn.in_proj_bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.3.global_attention.attn.out_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.3.global_attention.attn.out_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.3.global_attention_norm.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.3.global_attention_norm.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.3.instance_interactive_conv.dynamic_layer.weight - torch.Size([32768, 256]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.3.instance_interactive_conv.dynamic_layer.bias - torch.Size([32768]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.3.instance_interactive_conv.norm_in.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.3.instance_interactive_conv.norm_in.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.3.instance_interactive_conv.norm_out.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.3.instance_interactive_conv.norm_out.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.3.instance_interactive_conv.fc_layer.weight - torch.Size([256, 12544]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.3.instance_interactive_conv.fc_layer.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.3.instance_interactive_conv.fc_norm.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.3.instance_interactive_conv.fc_norm.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.3.instance_interactive_conv_norm.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.3.instance_interactive_conv_norm.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.3.ffn.layers.0.0.weight - torch.Size([2048, 256]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.3.ffn.layers.0.0.bias - torch.Size([2048]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.3.ffn.layers.1.weight - torch.Size([256, 2048]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.3.ffn.layers.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.3.ffn_norm.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.3.ffn_norm.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.3.global_ffn.layers.0.0.weight - torch.Size([2048, 256]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.3.global_ffn.layers.0.0.bias - torch.Size([2048]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.3.global_ffn.layers.1.weight - torch.Size([256, 2048]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.3.global_ffn.layers.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.3.global_ffn_norm.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.3.global_ffn_norm.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.3.cls_fcs.0.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.3.cls_fcs.1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.3.cls_fcs.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.3.cls_fcs.3.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.3.cls_fcs.4.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.3.cls_fcs.4.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.3.reg_fcs.0.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.3.reg_fcs.1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.3.reg_fcs.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.3.reg_fcs.3.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.3.reg_fcs.4.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.3.reg_fcs.4.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.3.reg_fcs.6.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.3.reg_fcs.7.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.3.reg_fcs.7.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.3.glb_fcs.0.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.3.glb_fcs.1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.3.glb_fcs.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.3.glb_fcs.3.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.3.glb_fcs.4.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.3.glb_fcs.4.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.3.fc_glb.weight - torch.Size([2, 256]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.3.fc_glb.bias - torch.Size([2]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.4.fc_cls.weight - torch.Size([2, 256]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.4.fc_cls.bias - torch.Size([2]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.4.fc_reg.weight - torch.Size([4, 256]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.4.fc_reg.bias - torch.Size([4]): 
NormalInit: mean=0, std=0.001, bias=0 

roi_head.bbox_head.4.attention.attn.in_proj_weight - torch.Size([768, 256]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.4.attention.attn.in_proj_bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.4.attention.attn.out_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.4.attention.attn.out_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.4.attention_norm.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.4.attention_norm.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.4.global_attention.attn.in_proj_weight - torch.Size([768, 256]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.4.global_attention.attn.in_proj_bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.4.global_attention.attn.out_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.4.global_attention.attn.out_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.4.global_attention_norm.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.4.global_attention_norm.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.4.instance_interactive_conv.dynamic_layer.weight - torch.Size([32768, 256]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.4.instance_interactive_conv.dynamic_layer.bias - torch.Size([32768]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.4.instance_interactive_conv.norm_in.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.4.instance_interactive_conv.norm_in.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.4.instance_interactive_conv.norm_out.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.4.instance_interactive_conv.norm_out.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.4.instance_interactive_conv.fc_layer.weight - torch.Size([256, 12544]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.4.instance_interactive_conv.fc_layer.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.4.instance_interactive_conv.fc_norm.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.4.instance_interactive_conv.fc_norm.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.4.instance_interactive_conv_norm.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.4.instance_interactive_conv_norm.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.4.ffn.layers.0.0.weight - torch.Size([2048, 256]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.4.ffn.layers.0.0.bias - torch.Size([2048]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.4.ffn.layers.1.weight - torch.Size([256, 2048]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.4.ffn.layers.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.4.ffn_norm.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.4.ffn_norm.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.4.global_ffn.layers.0.0.weight - torch.Size([2048, 256]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.4.global_ffn.layers.0.0.bias - torch.Size([2048]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.4.global_ffn.layers.1.weight - torch.Size([256, 2048]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.4.global_ffn.layers.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.4.global_ffn_norm.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.4.global_ffn_norm.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.4.cls_fcs.0.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.4.cls_fcs.1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.4.cls_fcs.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.4.cls_fcs.3.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.4.cls_fcs.4.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.4.cls_fcs.4.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.4.reg_fcs.0.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.4.reg_fcs.1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.4.reg_fcs.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.4.reg_fcs.3.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.4.reg_fcs.4.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.4.reg_fcs.4.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.4.reg_fcs.6.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.4.reg_fcs.7.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.4.reg_fcs.7.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.4.glb_fcs.0.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.4.glb_fcs.1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.4.glb_fcs.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.4.glb_fcs.3.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.4.glb_fcs.4.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.4.glb_fcs.4.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.4.fc_glb.weight - torch.Size([2, 256]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.4.fc_glb.bias - torch.Size([2]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.5.fc_cls.weight - torch.Size([2, 256]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.5.fc_cls.bias - torch.Size([2]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.5.fc_reg.weight - torch.Size([4, 256]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.5.fc_reg.bias - torch.Size([4]): 
NormalInit: mean=0, std=0.001, bias=0 

roi_head.bbox_head.5.attention.attn.in_proj_weight - torch.Size([768, 256]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.5.attention.attn.in_proj_bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.5.attention.attn.out_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.5.attention.attn.out_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.5.attention_norm.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.5.attention_norm.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.5.global_attention.attn.in_proj_weight - torch.Size([768, 256]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.5.global_attention.attn.in_proj_bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.5.global_attention.attn.out_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.5.global_attention.attn.out_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.5.global_attention_norm.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.5.global_attention_norm.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.5.instance_interactive_conv.dynamic_layer.weight - torch.Size([32768, 256]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.5.instance_interactive_conv.dynamic_layer.bias - torch.Size([32768]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.5.instance_interactive_conv.norm_in.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.5.instance_interactive_conv.norm_in.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.5.instance_interactive_conv.norm_out.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.5.instance_interactive_conv.norm_out.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.5.instance_interactive_conv.fc_layer.weight - torch.Size([256, 12544]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.5.instance_interactive_conv.fc_layer.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.5.instance_interactive_conv.fc_norm.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.5.instance_interactive_conv.fc_norm.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.5.instance_interactive_conv_norm.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.5.instance_interactive_conv_norm.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.5.ffn.layers.0.0.weight - torch.Size([2048, 256]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.5.ffn.layers.0.0.bias - torch.Size([2048]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.5.ffn.layers.1.weight - torch.Size([256, 2048]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.5.ffn.layers.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.5.ffn_norm.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.5.ffn_norm.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.5.global_ffn.layers.0.0.weight - torch.Size([2048, 256]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.5.global_ffn.layers.0.0.bias - torch.Size([2048]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.5.global_ffn.layers.1.weight - torch.Size([256, 2048]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.5.global_ffn.layers.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.5.global_ffn_norm.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.5.global_ffn_norm.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.5.cls_fcs.0.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.5.cls_fcs.1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.5.cls_fcs.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.5.cls_fcs.3.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.5.cls_fcs.4.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.5.cls_fcs.4.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.5.reg_fcs.0.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.5.reg_fcs.1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.5.reg_fcs.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.5.reg_fcs.3.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.5.reg_fcs.4.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.5.reg_fcs.4.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.5.reg_fcs.6.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.5.reg_fcs.7.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.5.reg_fcs.7.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.5.glb_fcs.0.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.5.glb_fcs.1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.5.glb_fcs.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.5.glb_fcs.3.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.5.glb_fcs.4.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.5.glb_fcs.4.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.bbox_head.5.fc_glb.weight - torch.Size([2, 256]): 
Initialized by user-defined `init_weights` in GlobDIIHead  

roi_head.bbox_head.5.fc_glb.bias - torch.Size([2]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.0.convs.0.conv.weight - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.0.convs.0.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.0.convs.0.bn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.0.convs.0.bn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.0.convs.1.conv.weight - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.0.convs.1.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.0.convs.1.bn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.0.convs.1.bn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.0.convs.2.conv.weight - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.0.convs.2.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.0.convs.2.bn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.0.convs.2.bn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.0.convs.3.conv.weight - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.0.convs.3.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.0.convs.3.bn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.0.convs.3.bn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.0.upsample.weight - torch.Size([256, 256, 2, 2]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.0.upsample.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.0.conv_logits.weight - torch.Size([2, 256, 1, 1]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.0.conv_logits.bias - torch.Size([2]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.0.instance_interactive_conv.dynamic_layer.weight - torch.Size([32768, 256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.0.instance_interactive_conv.dynamic_layer.bias - torch.Size([32768]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.0.instance_interactive_conv.norm_in.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.0.instance_interactive_conv.norm_in.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.0.instance_interactive_conv.norm_out.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.0.instance_interactive_conv.norm_out.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.1.convs.0.conv.weight - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.1.convs.0.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.1.convs.0.bn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.1.convs.0.bn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.1.convs.1.conv.weight - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.1.convs.1.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.1.convs.1.bn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.1.convs.1.bn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.1.convs.2.conv.weight - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.1.convs.2.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.1.convs.2.bn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.1.convs.2.bn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.1.convs.3.conv.weight - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.1.convs.3.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.1.convs.3.bn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.1.convs.3.bn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.1.upsample.weight - torch.Size([256, 256, 2, 2]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.1.upsample.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.1.conv_logits.weight - torch.Size([2, 256, 1, 1]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.1.conv_logits.bias - torch.Size([2]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.1.instance_interactive_conv.dynamic_layer.weight - torch.Size([32768, 256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.1.instance_interactive_conv.dynamic_layer.bias - torch.Size([32768]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.1.instance_interactive_conv.norm_in.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.1.instance_interactive_conv.norm_in.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.1.instance_interactive_conv.norm_out.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.1.instance_interactive_conv.norm_out.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.2.convs.0.conv.weight - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.2.convs.0.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.2.convs.0.bn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.2.convs.0.bn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.2.convs.1.conv.weight - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.2.convs.1.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.2.convs.1.bn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.2.convs.1.bn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.2.convs.2.conv.weight - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.2.convs.2.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.2.convs.2.bn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.2.convs.2.bn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.2.convs.3.conv.weight - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.2.convs.3.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.2.convs.3.bn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.2.convs.3.bn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.2.upsample.weight - torch.Size([256, 256, 2, 2]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.2.upsample.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.2.conv_logits.weight - torch.Size([2, 256, 1, 1]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.2.conv_logits.bias - torch.Size([2]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.2.instance_interactive_conv.dynamic_layer.weight - torch.Size([32768, 256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.2.instance_interactive_conv.dynamic_layer.bias - torch.Size([32768]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.2.instance_interactive_conv.norm_in.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.2.instance_interactive_conv.norm_in.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.2.instance_interactive_conv.norm_out.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.2.instance_interactive_conv.norm_out.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.3.convs.0.conv.weight - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.3.convs.0.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.3.convs.0.bn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.3.convs.0.bn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.3.convs.1.conv.weight - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.3.convs.1.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.3.convs.1.bn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.3.convs.1.bn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.3.convs.2.conv.weight - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.3.convs.2.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.3.convs.2.bn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.3.convs.2.bn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.3.convs.3.conv.weight - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.3.convs.3.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.3.convs.3.bn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.3.convs.3.bn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.3.upsample.weight - torch.Size([256, 256, 2, 2]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.3.upsample.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.3.conv_logits.weight - torch.Size([2, 256, 1, 1]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.3.conv_logits.bias - torch.Size([2]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.3.instance_interactive_conv.dynamic_layer.weight - torch.Size([32768, 256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.3.instance_interactive_conv.dynamic_layer.bias - torch.Size([32768]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.3.instance_interactive_conv.norm_in.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.3.instance_interactive_conv.norm_in.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.3.instance_interactive_conv.norm_out.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.3.instance_interactive_conv.norm_out.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.4.convs.0.conv.weight - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.4.convs.0.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.4.convs.0.bn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.4.convs.0.bn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.4.convs.1.conv.weight - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.4.convs.1.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.4.convs.1.bn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.4.convs.1.bn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.4.convs.2.conv.weight - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.4.convs.2.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.4.convs.2.bn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.4.convs.2.bn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.4.convs.3.conv.weight - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.4.convs.3.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.4.convs.3.bn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.4.convs.3.bn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.4.upsample.weight - torch.Size([256, 256, 2, 2]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.4.upsample.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.4.conv_logits.weight - torch.Size([2, 256, 1, 1]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.4.conv_logits.bias - torch.Size([2]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.4.instance_interactive_conv.dynamic_layer.weight - torch.Size([32768, 256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.4.instance_interactive_conv.dynamic_layer.bias - torch.Size([32768]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.4.instance_interactive_conv.norm_in.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.4.instance_interactive_conv.norm_in.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.4.instance_interactive_conv.norm_out.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.4.instance_interactive_conv.norm_out.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.5.convs.0.conv.weight - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.5.convs.0.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.5.convs.0.bn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.5.convs.0.bn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.5.convs.1.conv.weight - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.5.convs.1.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.5.convs.1.bn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.5.convs.1.bn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.5.convs.2.conv.weight - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.5.convs.2.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.5.convs.2.bn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.5.convs.2.bn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.5.convs.3.conv.weight - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.5.convs.3.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.5.convs.3.bn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.5.convs.3.bn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.5.upsample.weight - torch.Size([256, 256, 2, 2]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.5.upsample.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.5.conv_logits.weight - torch.Size([2, 256, 1, 1]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.5.conv_logits.bias - torch.Size([2]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.5.instance_interactive_conv.dynamic_layer.weight - torch.Size([32768, 256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.5.instance_interactive_conv.dynamic_layer.bias - torch.Size([32768]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.5.instance_interactive_conv.norm_in.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.5.instance_interactive_conv.norm_in.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.5.instance_interactive_conv.norm_out.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  

roi_head.mask_head.5.instance_interactive_conv.norm_out.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of QueryGlob  
2021-12-29 15:15:58,731 - mmdet - INFO - load checkpoint from local path: work_dirs/pretrained/queryInst/queryinst_r101_300_queries-860dc5d5.pth
2021-12-29 15:16:01,514 - mmdet - WARNING - The model and loaded state dict do not match exactly

size mismatch for roi_head.bbox_head.0.fc_cls.weight: copying a param with shape torch.Size([80, 256]) from checkpoint, the shape in current model is torch.Size([2, 256]).
size mismatch for roi_head.bbox_head.0.fc_cls.bias: copying a param with shape torch.Size([80]) from checkpoint, the shape in current model is torch.Size([2]).
size mismatch for roi_head.bbox_head.1.fc_cls.weight: copying a param with shape torch.Size([80, 256]) from checkpoint, the shape in current model is torch.Size([2, 256]).
size mismatch for roi_head.bbox_head.1.fc_cls.bias: copying a param with shape torch.Size([80]) from checkpoint, the shape in current model is torch.Size([2]).
size mismatch for roi_head.bbox_head.2.fc_cls.weight: copying a param with shape torch.Size([80, 256]) from checkpoint, the shape in current model is torch.Size([2, 256]).
size mismatch for roi_head.bbox_head.2.fc_cls.bias: copying a param with shape torch.Size([80]) from checkpoint, the shape in current model is torch.Size([2]).
size mismatch for roi_head.bbox_head.3.fc_cls.weight: copying a param with shape torch.Size([80, 256]) from checkpoint, the shape in current model is torch.Size([2, 256]).
size mismatch for roi_head.bbox_head.3.fc_cls.bias: copying a param with shape torch.Size([80]) from checkpoint, the shape in current model is torch.Size([2]).
size mismatch for roi_head.bbox_head.4.fc_cls.weight: copying a param with shape torch.Size([80, 256]) from checkpoint, the shape in current model is torch.Size([2, 256]).
size mismatch for roi_head.bbox_head.4.fc_cls.bias: copying a param with shape torch.Size([80]) from checkpoint, the shape in current model is torch.Size([2]).
size mismatch for roi_head.bbox_head.5.fc_cls.weight: copying a param with shape torch.Size([80, 256]) from checkpoint, the shape in current model is torch.Size([2, 256]).
size mismatch for roi_head.bbox_head.5.fc_cls.bias: copying a param with shape torch.Size([80]) from checkpoint, the shape in current model is torch.Size([2]).
size mismatch for roi_head.mask_head.0.conv_logits.weight: copying a param with shape torch.Size([80, 256, 1, 1]) from checkpoint, the shape in current model is torch.Size([2, 256, 1, 1]).
size mismatch for roi_head.mask_head.0.conv_logits.bias: copying a param with shape torch.Size([80]) from checkpoint, the shape in current model is torch.Size([2]).
size mismatch for roi_head.mask_head.1.conv_logits.weight: copying a param with shape torch.Size([80, 256, 1, 1]) from checkpoint, the shape in current model is torch.Size([2, 256, 1, 1]).
size mismatch for roi_head.mask_head.1.conv_logits.bias: copying a param with shape torch.Size([80]) from checkpoint, the shape in current model is torch.Size([2]).
size mismatch for roi_head.mask_head.2.conv_logits.weight: copying a param with shape torch.Size([80, 256, 1, 1]) from checkpoint, the shape in current model is torch.Size([2, 256, 1, 1]).
size mismatch for roi_head.mask_head.2.conv_logits.bias: copying a param with shape torch.Size([80]) from checkpoint, the shape in current model is torch.Size([2]).
size mismatch for roi_head.mask_head.3.conv_logits.weight: copying a param with shape torch.Size([80, 256, 1, 1]) from checkpoint, the shape in current model is torch.Size([2, 256, 1, 1]).
size mismatch for roi_head.mask_head.3.conv_logits.bias: copying a param with shape torch.Size([80]) from checkpoint, the shape in current model is torch.Size([2]).
size mismatch for roi_head.mask_head.4.conv_logits.weight: copying a param with shape torch.Size([80, 256, 1, 1]) from checkpoint, the shape in current model is torch.Size([2, 256, 1, 1]).
size mismatch for roi_head.mask_head.4.conv_logits.bias: copying a param with shape torch.Size([80]) from checkpoint, the shape in current model is torch.Size([2]).
size mismatch for roi_head.mask_head.5.conv_logits.weight: copying a param with shape torch.Size([80, 256, 1, 1]) from checkpoint, the shape in current model is torch.Size([2, 256, 1, 1]).
size mismatch for roi_head.mask_head.5.conv_logits.bias: copying a param with shape torch.Size([80]) from checkpoint, the shape in current model is torch.Size([2]).
missing keys in source state_dict: rpn_head.global_features_embed.weight, roi_head.bbox_head.0.global_attention.attn.in_proj_weight, roi_head.bbox_head.0.global_attention.attn.in_proj_bias, roi_head.bbox_head.0.global_attention.attn.out_proj.weight, roi_head.bbox_head.0.global_attention.attn.out_proj.bias, roi_head.bbox_head.0.global_attention_norm.weight, roi_head.bbox_head.0.global_attention_norm.bias, roi_head.bbox_head.0.global_ffn.layers.0.0.weight, roi_head.bbox_head.0.global_ffn.layers.0.0.bias, roi_head.bbox_head.0.global_ffn.layers.1.weight, roi_head.bbox_head.0.global_ffn.layers.1.bias, roi_head.bbox_head.0.global_ffn_norm.weight, roi_head.bbox_head.0.global_ffn_norm.bias, roi_head.bbox_head.0.cls_fcs.3.weight, roi_head.bbox_head.0.cls_fcs.4.weight, roi_head.bbox_head.0.cls_fcs.4.bias, roi_head.bbox_head.0.glb_fcs.0.weight, roi_head.bbox_head.0.glb_fcs.1.weight, roi_head.bbox_head.0.glb_fcs.1.bias, roi_head.bbox_head.0.glb_fcs.3.weight, roi_head.bbox_head.0.glb_fcs.4.weight, roi_head.bbox_head.0.glb_fcs.4.bias, roi_head.bbox_head.0.fc_glb.weight, roi_head.bbox_head.0.fc_glb.bias, roi_head.bbox_head.1.global_attention.attn.in_proj_weight, roi_head.bbox_head.1.global_attention.attn.in_proj_bias, roi_head.bbox_head.1.global_attention.attn.out_proj.weight, roi_head.bbox_head.1.global_attention.attn.out_proj.bias, roi_head.bbox_head.1.global_attention_norm.weight, roi_head.bbox_head.1.global_attention_norm.bias, roi_head.bbox_head.1.global_ffn.layers.0.0.weight, roi_head.bbox_head.1.global_ffn.layers.0.0.bias, roi_head.bbox_head.1.global_ffn.layers.1.weight, roi_head.bbox_head.1.global_ffn.layers.1.bias, roi_head.bbox_head.1.global_ffn_norm.weight, roi_head.bbox_head.1.global_ffn_norm.bias, roi_head.bbox_head.1.cls_fcs.3.weight, roi_head.bbox_head.1.cls_fcs.4.weight, roi_head.bbox_head.1.cls_fcs.4.bias, roi_head.bbox_head.1.glb_fcs.0.weight, roi_head.bbox_head.1.glb_fcs.1.weight, roi_head.bbox_head.1.glb_fcs.1.bias, roi_head.bbox_head.1.glb_fcs.3.weight, roi_head.bbox_head.1.glb_fcs.4.weight, roi_head.bbox_head.1.glb_fcs.4.bias, roi_head.bbox_head.1.fc_glb.weight, roi_head.bbox_head.1.fc_glb.bias, roi_head.bbox_head.2.global_attention.attn.in_proj_weight, roi_head.bbox_head.2.global_attention.attn.in_proj_bias, roi_head.bbox_head.2.global_attention.attn.out_proj.weight, roi_head.bbox_head.2.global_attention.attn.out_proj.bias, roi_head.bbox_head.2.global_attention_norm.weight, roi_head.bbox_head.2.global_attention_norm.bias, roi_head.bbox_head.2.global_ffn.layers.0.0.weight, roi_head.bbox_head.2.global_ffn.layers.0.0.bias, roi_head.bbox_head.2.global_ffn.layers.1.weight, roi_head.bbox_head.2.global_ffn.layers.1.bias, roi_head.bbox_head.2.global_ffn_norm.weight, roi_head.bbox_head.2.global_ffn_norm.bias, roi_head.bbox_head.2.cls_fcs.3.weight, roi_head.bbox_head.2.cls_fcs.4.weight, roi_head.bbox_head.2.cls_fcs.4.bias, roi_head.bbox_head.2.glb_fcs.0.weight, roi_head.bbox_head.2.glb_fcs.1.weight, roi_head.bbox_head.2.glb_fcs.1.bias, roi_head.bbox_head.2.glb_fcs.3.weight, roi_head.bbox_head.2.glb_fcs.4.weight, roi_head.bbox_head.2.glb_fcs.4.bias, roi_head.bbox_head.2.fc_glb.weight, roi_head.bbox_head.2.fc_glb.bias, roi_head.bbox_head.3.global_attention.attn.in_proj_weight, roi_head.bbox_head.3.global_attention.attn.in_proj_bias, roi_head.bbox_head.3.global_attention.attn.out_proj.weight, roi_head.bbox_head.3.global_attention.attn.out_proj.bias, roi_head.bbox_head.3.global_attention_norm.weight, roi_head.bbox_head.3.global_attention_norm.bias, roi_head.bbox_head.3.global_ffn.layers.0.0.weight, roi_head.bbox_head.3.global_ffn.layers.0.0.bias, roi_head.bbox_head.3.global_ffn.layers.1.weight, roi_head.bbox_head.3.global_ffn.layers.1.bias, roi_head.bbox_head.3.global_ffn_norm.weight, roi_head.bbox_head.3.global_ffn_norm.bias, roi_head.bbox_head.3.cls_fcs.3.weight, roi_head.bbox_head.3.cls_fcs.4.weight, roi_head.bbox_head.3.cls_fcs.4.bias, roi_head.bbox_head.3.glb_fcs.0.weight, roi_head.bbox_head.3.glb_fcs.1.weight, roi_head.bbox_head.3.glb_fcs.1.bias, roi_head.bbox_head.3.glb_fcs.3.weight, roi_head.bbox_head.3.glb_fcs.4.weight, roi_head.bbox_head.3.glb_fcs.4.bias, roi_head.bbox_head.3.fc_glb.weight, roi_head.bbox_head.3.fc_glb.bias, roi_head.bbox_head.4.global_attention.attn.in_proj_weight, roi_head.bbox_head.4.global_attention.attn.in_proj_bias, roi_head.bbox_head.4.global_attention.attn.out_proj.weight, roi_head.bbox_head.4.global_attention.attn.out_proj.bias, roi_head.bbox_head.4.global_attention_norm.weight, roi_head.bbox_head.4.global_attention_norm.bias, roi_head.bbox_head.4.global_ffn.layers.0.0.weight, roi_head.bbox_head.4.global_ffn.layers.0.0.bias, roi_head.bbox_head.4.global_ffn.layers.1.weight, roi_head.bbox_head.4.global_ffn.layers.1.bias, roi_head.bbox_head.4.global_ffn_norm.weight, roi_head.bbox_head.4.global_ffn_norm.bias, roi_head.bbox_head.4.cls_fcs.3.weight, roi_head.bbox_head.4.cls_fcs.4.weight, roi_head.bbox_head.4.cls_fcs.4.bias, roi_head.bbox_head.4.glb_fcs.0.weight, roi_head.bbox_head.4.glb_fcs.1.weight, roi_head.bbox_head.4.glb_fcs.1.bias, roi_head.bbox_head.4.glb_fcs.3.weight, roi_head.bbox_head.4.glb_fcs.4.weight, roi_head.bbox_head.4.glb_fcs.4.bias, roi_head.bbox_head.4.fc_glb.weight, roi_head.bbox_head.4.fc_glb.bias, roi_head.bbox_head.5.global_attention.attn.in_proj_weight, roi_head.bbox_head.5.global_attention.attn.in_proj_bias, roi_head.bbox_head.5.global_attention.attn.out_proj.weight, roi_head.bbox_head.5.global_attention.attn.out_proj.bias, roi_head.bbox_head.5.global_attention_norm.weight, roi_head.bbox_head.5.global_attention_norm.bias, roi_head.bbox_head.5.global_ffn.layers.0.0.weight, roi_head.bbox_head.5.global_ffn.layers.0.0.bias, roi_head.bbox_head.5.global_ffn.layers.1.weight, roi_head.bbox_head.5.global_ffn.layers.1.bias, roi_head.bbox_head.5.global_ffn_norm.weight, roi_head.bbox_head.5.global_ffn_norm.bias, roi_head.bbox_head.5.cls_fcs.3.weight, roi_head.bbox_head.5.cls_fcs.4.weight, roi_head.bbox_head.5.cls_fcs.4.bias, roi_head.bbox_head.5.glb_fcs.0.weight, roi_head.bbox_head.5.glb_fcs.1.weight, roi_head.bbox_head.5.glb_fcs.1.bias, roi_head.bbox_head.5.glb_fcs.3.weight, roi_head.bbox_head.5.glb_fcs.4.weight, roi_head.bbox_head.5.glb_fcs.4.bias, roi_head.bbox_head.5.fc_glb.weight, roi_head.bbox_head.5.fc_glb.bias

2021-12-29 15:16:01,549 - mmdet - INFO - Start running, host: user@ubuntu, work_dir: /mnt/home1/workspace2/QueryInst/work_dirs/queryglob_usdanno514roi_B_2_7_split1
2021-12-29 15:16:01,549 - mmdet - INFO - Hooks will be executed in the following order:
before_run:
(VERY_HIGH   ) StepLrUpdaterHook                  
(NORMAL      ) CheckpointHook                     
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_train_epoch:
(VERY_HIGH   ) StepLrUpdaterHook                  
(NORMAL      ) DistSamplerSeedHook                
(NORMAL      ) NumClassCheckHook                  
(LOW         ) IterTimerHook                      
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_train_iter:
(VERY_HIGH   ) StepLrUpdaterHook                  
(LOW         ) IterTimerHook                      
 -------------------- 
after_train_iter:
(ABOVE_NORMAL) OptimizerHook                      
(NORMAL      ) CheckpointHook                     
(LOW         ) IterTimerHook                      
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
after_train_epoch:
(NORMAL      ) CheckpointHook                     
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_val_epoch:
(NORMAL      ) DistSamplerSeedHook                
(NORMAL      ) NumClassCheckHook                  
(LOW         ) IterTimerHook                      
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_val_iter:
(LOW         ) IterTimerHook                      
 -------------------- 
after_val_iter:
(LOW         ) IterTimerHook                      
 -------------------- 
after_val_epoch:
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
after_run:
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
2021-12-29 15:16:01,550 - mmdet - INFO - workflow: [('train', 1)], max: 36 epochs
2021-12-29 15:16:01,550 - mmdet - INFO - Checkpoints will be saved to /mnt/home1/workspace2/QueryInst/work_dirs/queryglob_usdanno514roi_B_2_7_split1 by HardDiskBackend.
2021-12-29 15:17:11,601 - mmdet - INFO - Epoch [1][50/52]	lr: 1.249e-06, eta: 0:42:30, time: 1.400, data_time: 0.221, memory: 8373, stage0_loss_cls: 1.9906, stage0_pos_acc: 47.5000, stage0_loss_bbox: 0.6502, stage0_loss_iou: 1.0282, stage0_loss_global: 0.8469, stage0_loss_mask: 2.2783, stage1_loss_cls: 2.6888, stage1_pos_acc: 53.2500, stage1_loss_bbox: 0.5700, stage1_loss_iou: 0.9349, stage1_loss_global: 0.6079, stage1_loss_mask: 2.3895, stage2_loss_cls: 2.2093, stage2_pos_acc: 54.5000, stage2_loss_bbox: 0.5871, stage2_loss_iou: 0.9293, stage2_loss_global: 0.8434, stage2_loss_mask: 2.7971, stage3_loss_cls: 2.6551, stage3_pos_acc: 52.5000, stage3_loss_bbox: 0.5785, stage3_loss_iou: 0.9370, stage3_loss_global: 0.9714, stage3_loss_mask: 4.3931, stage4_loss_cls: 1.8254, stage4_pos_acc: 52.7500, stage4_loss_bbox: 0.5870, stage4_loss_iou: 0.9319, stage4_loss_global: 0.9755, stage4_loss_mask: 2.6305, stage5_loss_cls: 1.9460, stage5_pos_acc: 48.0000, stage5_loss_bbox: 0.5959, stage5_loss_iou: 0.9412, stage5_loss_global: 0.7013, stage5_loss_mask: 3.1896, loss: 45.2106, grad_norm: 216.8462
2021-12-29 15:17:14,489 - mmdet - INFO - Saving checkpoint at 1 epochs
2021-12-29 15:18:31,405 - mmdet - INFO - Epoch [2][50/52]	lr: 2.547e-06, eta: 0:40:12, time: 1.380, data_time: 0.219, memory: 8373, stage0_loss_cls: 1.7444, stage0_pos_acc: 48.7500, stage0_loss_bbox: 0.5845, stage0_loss_iou: 0.9290, stage0_loss_global: 0.6952, stage0_loss_mask: 2.3906, stage1_loss_cls: 2.3690, stage1_pos_acc: 51.0000, stage1_loss_bbox: 0.4619, stage1_loss_iou: 0.7703, stage1_loss_global: 0.5453, stage1_loss_mask: 2.1801, stage2_loss_cls: 1.7622, stage2_pos_acc: 52.0000, stage2_loss_bbox: 0.4565, stage2_loss_iou: 0.7492, stage2_loss_global: 0.6260, stage2_loss_mask: 2.4821, stage3_loss_cls: 2.3981, stage3_pos_acc: 51.7500, stage3_loss_bbox: 0.4271, stage3_loss_iou: 0.7108, stage3_loss_global: 0.6763, stage3_loss_mask: 4.0822, stage4_loss_cls: 1.7184, stage4_pos_acc: 52.2500, stage4_loss_bbox: 0.4243, stage4_loss_iou: 0.6958, stage4_loss_global: 0.6674, stage4_loss_mask: 2.2236, stage5_loss_cls: 1.7308, stage5_pos_acc: 51.2500, stage5_loss_bbox: 0.4311, stage5_loss_iou: 0.7086, stage5_loss_global: 0.5915, stage5_loss_mask: 2.7564, loss: 38.9887, grad_norm: 188.9214
2021-12-29 15:18:34,297 - mmdet - INFO - Saving checkpoint at 2 epochs
2021-12-29 15:19:51,507 - mmdet - INFO - Epoch [3][50/52]	lr: 3.846e-06, eta: 0:38:46, time: 1.391, data_time: 0.218, memory: 8409, stage0_loss_cls: 1.4675, stage0_pos_acc: 52.5000, stage0_loss_bbox: 0.5164, stage0_loss_iou: 0.8387, stage0_loss_global: 0.5692, stage0_loss_mask: 2.2816, stage1_loss_cls: 1.9404, stage1_pos_acc: 58.0000, stage1_loss_bbox: 0.3771, stage1_loss_iou: 0.6529, stage1_loss_global: 0.5189, stage1_loss_mask: 1.8786, stage2_loss_cls: 1.4047, stage2_pos_acc: 55.7500, stage2_loss_bbox: 0.3647, stage2_loss_iou: 0.6287, stage2_loss_global: 0.5242, stage2_loss_mask: 2.1090, stage3_loss_cls: 1.9728, stage3_pos_acc: 52.0000, stage3_loss_bbox: 0.3463, stage3_loss_iou: 0.6062, stage3_loss_global: 0.5317, stage3_loss_mask: 3.6074, stage4_loss_cls: 1.4552, stage4_pos_acc: 56.7500, stage4_loss_bbox: 0.3325, stage4_loss_iou: 0.5860, stage4_loss_global: 0.5320, stage4_loss_mask: 1.8425, stage5_loss_cls: 1.3754, stage5_pos_acc: 64.0000, stage5_loss_bbox: 0.3357, stage5_loss_iou: 0.5923, stage5_loss_global: 0.5142, stage5_loss_mask: 2.2997, loss: 33.0024, grad_norm: 167.5385
2021-12-29 15:19:54,327 - mmdet - INFO - Saving checkpoint at 3 epochs
2021-12-29 15:21:12,253 - mmdet - INFO - Epoch [4][50/52]	lr: 5.145e-06, eta: 0:37:32, time: 1.399, data_time: 0.220, memory: 8409, stage0_loss_cls: 1.4022, stage0_pos_acc: 52.5000, stage0_loss_bbox: 0.4674, stage0_loss_iou: 0.7903, stage0_loss_global: 0.5149, stage0_loss_mask: 1.9037, stage1_loss_cls: 1.5048, stage1_pos_acc: 61.7500, stage1_loss_bbox: 0.3182, stage1_loss_iou: 0.5647, stage1_loss_global: 0.4999, stage1_loss_mask: 1.4863, stage2_loss_cls: 1.2433, stage2_pos_acc: 58.0000, stage2_loss_bbox: 0.2967, stage2_loss_iou: 0.5270, stage2_loss_global: 0.4855, stage2_loss_mask: 1.6970, stage3_loss_cls: 1.4484, stage3_pos_acc: 55.2500, stage3_loss_bbox: 0.2944, stage3_loss_iou: 0.5274, stage3_loss_global: 0.4951, stage3_loss_mask: 3.0016, stage4_loss_cls: 1.2100, stage4_pos_acc: 62.7500, stage4_loss_bbox: 0.2805, stage4_loss_iou: 0.5050, stage4_loss_global: 0.4917, stage4_loss_mask: 1.5461, stage5_loss_cls: 1.1405, stage5_pos_acc: 67.7500, stage5_loss_bbox: 0.2783, stage5_loss_iou: 0.5024, stage5_loss_global: 0.4938, stage5_loss_mask: 1.9084, loss: 27.8255, grad_norm: 135.6409
2021-12-29 15:21:15,117 - mmdet - INFO - Saving checkpoint at 4 epochs
2021-12-29 15:22:31,749 - mmdet - INFO - Epoch [5][50/52]	lr: 6.444e-06, eta: 0:36:12, time: 1.375, data_time: 0.216, memory: 8409, stage0_loss_cls: 1.3444, stage0_pos_acc: 55.0000, stage0_loss_bbox: 0.4501, stage0_loss_iou: 0.7581, stage0_loss_global: 0.4783, stage0_loss_mask: 1.7664, stage1_loss_cls: 1.2715, stage1_pos_acc: 67.2500, stage1_loss_bbox: 0.2852, stage1_loss_iou: 0.5199, stage1_loss_global: 0.4719, stage1_loss_mask: 1.3047, stage2_loss_cls: 1.0938, stage2_pos_acc: 59.5000, stage2_loss_bbox: 0.2708, stage2_loss_iou: 0.4922, stage2_loss_global: 0.4640, stage2_loss_mask: 1.3777, stage3_loss_cls: 1.0877, stage3_pos_acc: 61.0000, stage3_loss_bbox: 0.2734, stage3_loss_iou: 0.4938, stage3_loss_global: 0.4679, stage3_loss_mask: 2.5354, stage4_loss_cls: 0.9462, stage4_pos_acc: 72.5000, stage4_loss_bbox: 0.2636, stage4_loss_iou: 0.4729, stage4_loss_global: 0.4631, stage4_loss_mask: 1.3136, stage5_loss_cls: 0.8841, stage5_pos_acc: 61.7500, stage5_loss_bbox: 0.2670, stage5_loss_iou: 0.4765, stage5_loss_global: 0.4613, stage5_loss_mask: 1.5418, loss: 24.2971, grad_norm: 128.4042
2021-12-29 15:22:34,603 - mmdet - INFO - Saving checkpoint at 5 epochs
2021-12-29 15:23:52,283 - mmdet - INFO - Epoch [6][50/52]	lr: 7.742e-06, eta: 0:35:00, time: 1.391, data_time: 0.219, memory: 8482, stage0_loss_cls: 1.3001, stage0_pos_acc: 57.0000, stage0_loss_bbox: 0.4000, stage0_loss_iou: 0.6941, stage0_loss_global: 0.4854, stage0_loss_mask: 1.4544, stage1_loss_cls: 1.1124, stage1_pos_acc: 69.7500, stage1_loss_bbox: 0.2440, stage1_loss_iou: 0.4493, stage1_loss_global: 0.4787, stage1_loss_mask: 1.0548, stage2_loss_cls: 0.8425, stage2_pos_acc: 60.0000, stage2_loss_bbox: 0.2473, stage2_loss_iou: 0.4422, stage2_loss_global: 0.4715, stage2_loss_mask: 1.1345, stage3_loss_cls: 0.8166, stage3_pos_acc: 61.0000, stage3_loss_bbox: 0.2470, stage3_loss_iou: 0.4427, stage3_loss_global: 0.4788, stage3_loss_mask: 2.1011, stage4_loss_cls: 0.6691, stage4_pos_acc: 64.7500, stage4_loss_bbox: 0.2580, stage4_loss_iou: 0.4591, stage4_loss_global: 0.4809, stage4_loss_mask: 1.0826, stage5_loss_cls: 0.6380, stage5_pos_acc: 61.2500, stage5_loss_bbox: 0.2606, stage5_loss_iou: 0.4636, stage5_loss_global: 0.4862, stage5_loss_mask: 1.2205, loss: 20.9159, grad_norm: 211.5305
2021-12-29 15:23:55,088 - mmdet - INFO - Saving checkpoint at 6 epochs
2021-12-29 15:25:12,574 - mmdet - INFO - Epoch [7][50/52]	lr: 9.041e-06, eta: 0:33:48, time: 1.391, data_time: 0.225, memory: 8482, stage0_loss_cls: 1.2000, stage0_pos_acc: 61.5000, stage0_loss_bbox: 0.3839, stage0_loss_iou: 0.6652, stage0_loss_global: 0.4771, stage0_loss_mask: 1.2313, stage1_loss_cls: 0.9589, stage1_pos_acc: 72.7500, stage1_loss_bbox: 0.2349, stage1_loss_iou: 0.4231, stage1_loss_global: 0.4657, stage1_loss_mask: 0.8871, stage2_loss_cls: 0.7103, stage2_pos_acc: 61.5000, stage2_loss_bbox: 0.2444, stage2_loss_iou: 0.4420, stage2_loss_global: 0.4564, stage2_loss_mask: 0.9651, stage3_loss_cls: 0.6381, stage3_pos_acc: 59.0000, stage3_loss_bbox: 0.2469, stage3_loss_iou: 0.4401, stage3_loss_global: 0.4555, stage3_loss_mask: 1.7354, stage4_loss_cls: 0.5578, stage4_pos_acc: 65.5000, stage4_loss_bbox: 0.2415, stage4_loss_iou: 0.4316, stage4_loss_global: 0.4588, stage4_loss_mask: 0.9128, stage5_loss_cls: 0.5460, stage5_pos_acc: 64.0000, stage5_loss_bbox: 0.2424, stage5_loss_iou: 0.4297, stage5_loss_global: 0.4510, stage5_loss_mask: 1.0090, loss: 18.5419, grad_norm: 149.3615
2021-12-29 15:25:15,242 - mmdet - INFO - Saving checkpoint at 7 epochs
2021-12-29 15:26:32,346 - mmdet - INFO - Epoch [8][50/52]	lr: 1.034e-05, eta: 0:32:36, time: 1.383, data_time: 0.219, memory: 8601, stage0_loss_cls: 1.0996, stage0_pos_acc: 61.7500, stage0_loss_bbox: 0.3393, stage0_loss_iou: 0.6118, stage0_loss_global: 0.4766, stage0_loss_mask: 1.0929, stage1_loss_cls: 0.8588, stage1_pos_acc: 73.0000, stage1_loss_bbox: 0.2227, stage1_loss_iou: 0.4113, stage1_loss_global: 0.4725, stage1_loss_mask: 0.8041, stage2_loss_cls: 0.6183, stage2_pos_acc: 58.0000, stage2_loss_bbox: 0.2377, stage2_loss_iou: 0.4307, stage2_loss_global: 0.4719, stage2_loss_mask: 0.8755, stage3_loss_cls: 0.5471, stage3_pos_acc: 65.7500, stage3_loss_bbox: 0.2349, stage3_loss_iou: 0.4282, stage3_loss_global: 0.4653, stage3_loss_mask: 1.4118, stage4_loss_cls: 0.4895, stage4_pos_acc: 68.7500, stage4_loss_bbox: 0.2330, stage4_loss_iou: 0.4225, stage4_loss_global: 0.4698, stage4_loss_mask: 0.8224, stage5_loss_cls: 0.4886, stage5_pos_acc: 65.2500, stage5_loss_bbox: 0.2332, stage5_loss_iou: 0.4198, stage5_loss_global: 0.4680, stage5_loss_mask: 0.8815, loss: 17.0392, grad_norm: 141.4207
2021-12-29 15:26:35,206 - mmdet - INFO - Saving checkpoint at 8 epochs
2021-12-29 15:27:52,938 - mmdet - INFO - Epoch [9][50/52]	lr: 1.164e-05, eta: 0:31:26, time: 1.393, data_time: 0.221, memory: 8601, stage0_loss_cls: 0.9773, stage0_pos_acc: 61.5000, stage0_loss_bbox: 0.3175, stage0_loss_iou: 0.5809, stage0_loss_global: 0.4639, stage0_loss_mask: 0.9559, stage1_loss_cls: 0.7815, stage1_pos_acc: 67.5000, stage1_loss_bbox: 0.2256, stage1_loss_iou: 0.4184, stage1_loss_global: 0.4559, stage1_loss_mask: 0.7218, stage2_loss_cls: 0.5866, stage2_pos_acc: 59.0000, stage2_loss_bbox: 0.2275, stage2_loss_iou: 0.4238, stage2_loss_global: 0.4525, stage2_loss_mask: 0.7613, stage3_loss_cls: 0.5166, stage3_pos_acc: 66.2500, stage3_loss_bbox: 0.2253, stage3_loss_iou: 0.4154, stage3_loss_global: 0.4401, stage3_loss_mask: 1.1704, stage4_loss_cls: 0.4723, stage4_pos_acc: 68.5000, stage4_loss_bbox: 0.2287, stage4_loss_iou: 0.4161, stage4_loss_global: 0.4386, stage4_loss_mask: 0.7412, stage5_loss_cls: 0.4512, stage5_pos_acc: 69.0000, stage5_loss_bbox: 0.2297, stage5_loss_iou: 0.4156, stage5_loss_global: 0.4387, stage5_loss_mask: 0.7915, loss: 15.7417, grad_norm: 215.9171
2021-12-29 15:27:55,725 - mmdet - INFO - Saving checkpoint at 9 epochs
2021-12-29 15:29:12,050 - mmdet - INFO - Epoch [10][50/52]	lr: 1.294e-05, eta: 0:30:12, time: 1.362, data_time: 0.221, memory: 8601, stage0_loss_cls: 0.8976, stage0_pos_acc: 69.0000, stage0_loss_bbox: 0.3262, stage0_loss_iou: 0.5924, stage0_loss_global: 0.4603, stage0_loss_mask: 0.8072, stage1_loss_cls: 0.7499, stage1_pos_acc: 74.0000, stage1_loss_bbox: 0.2145, stage1_loss_iou: 0.3962, stage1_loss_global: 0.4531, stage1_loss_mask: 0.6492, stage2_loss_cls: 0.5467, stage2_pos_acc: 61.7500, stage2_loss_bbox: 0.2223, stage2_loss_iou: 0.4047, stage2_loss_global: 0.4413, stage2_loss_mask: 0.6937, stage3_loss_cls: 0.4574, stage3_pos_acc: 75.7500, stage3_loss_bbox: 0.2235, stage3_loss_iou: 0.4023, stage3_loss_global: 0.4167, stage3_loss_mask: 0.9926, stage4_loss_cls: 0.4334, stage4_pos_acc: 77.7500, stage4_loss_bbox: 0.2263, stage4_loss_iou: 0.4006, stage4_loss_global: 0.4177, stage4_loss_mask: 0.6810, stage5_loss_cls: 0.4121, stage5_pos_acc: 78.2500, stage5_loss_bbox: 0.2284, stage5_loss_iou: 0.4052, stage5_loss_global: 0.3951, stage5_loss_mask: 0.7228, loss: 14.6705, grad_norm: 166.7513
2021-12-29 15:29:14,716 - mmdet - INFO - Saving checkpoint at 10 epochs
2021-12-29 15:30:30,362 - mmdet - INFO - Epoch [11][50/52]	lr: 1.424e-05, eta: 0:28:58, time: 1.357, data_time: 0.217, memory: 8601, stage0_loss_cls: 0.8637, stage0_pos_acc: 70.2500, stage0_loss_bbox: 0.3020, stage0_loss_iou: 0.5533, stage0_loss_global: 0.4461, stage0_loss_mask: 0.7594, stage1_loss_cls: 0.6786, stage1_pos_acc: 74.0000, stage1_loss_bbox: 0.2165, stage1_loss_iou: 0.3950, stage1_loss_global: 0.4142, stage1_loss_mask: 0.6208, stage2_loss_cls: 0.4674, stage2_pos_acc: 71.7500, stage2_loss_bbox: 0.2244, stage2_loss_iou: 0.4072, stage2_loss_global: 0.3737, stage2_loss_mask: 0.6479, stage3_loss_cls: 0.3986, stage3_pos_acc: 81.7500, stage3_loss_bbox: 0.2197, stage3_loss_iou: 0.3994, stage3_loss_global: 0.3375, stage3_loss_mask: 0.8587, stage4_loss_cls: 0.3720, stage4_pos_acc: 81.2500, stage4_loss_bbox: 0.2190, stage4_loss_iou: 0.3964, stage4_loss_global: 0.3306, stage4_loss_mask: 0.6312, stage5_loss_cls: 0.3652, stage5_pos_acc: 81.2500, stage5_loss_bbox: 0.2216, stage5_loss_iou: 0.3983, stage5_loss_global: 0.3184, stage5_loss_mask: 0.6589, loss: 13.4958, grad_norm: 196.2070
2021-12-29 15:30:32,996 - mmdet - INFO - Saving checkpoint at 11 epochs
2021-12-29 15:31:49,812 - mmdet - INFO - Epoch [12][50/52]	lr: 1.553e-05, eta: 0:27:48, time: 1.377, data_time: 0.217, memory: 8601, stage0_loss_cls: 0.8199, stage0_pos_acc: 75.5000, stage0_loss_bbox: 0.3102, stage0_loss_iou: 0.5603, stage0_loss_global: 0.3955, stage0_loss_mask: 0.7116, stage1_loss_cls: 0.6237, stage1_pos_acc: 77.2500, stage1_loss_bbox: 0.2116, stage1_loss_iou: 0.3841, stage1_loss_global: 0.3351, stage1_loss_mask: 0.6104, stage2_loss_cls: 0.4175, stage2_pos_acc: 81.0000, stage2_loss_bbox: 0.2132, stage2_loss_iou: 0.3859, stage2_loss_global: 0.2804, stage2_loss_mask: 0.6189, stage3_loss_cls: 0.3586, stage3_pos_acc: 83.2500, stage3_loss_bbox: 0.2156, stage3_loss_iou: 0.3830, stage3_loss_global: 0.2537, stage3_loss_mask: 0.7963, stage4_loss_cls: 0.3347, stage4_pos_acc: 85.2500, stage4_loss_bbox: 0.2103, stage4_loss_iou: 0.3775, stage4_loss_global: 0.2492, stage4_loss_mask: 0.6139, stage5_loss_cls: 0.3203, stage5_pos_acc: 84.7500, stage5_loss_bbox: 0.2130, stage5_loss_iou: 0.3803, stage5_loss_global: 0.2493, stage5_loss_mask: 0.6330, loss: 12.4669, grad_norm: 264.5517
2021-12-29 15:31:52,581 - mmdet - INFO - Saving checkpoint at 12 epochs
2021-12-29 15:33:09,122 - mmdet - INFO - Epoch [13][50/52]	lr: 1.683e-05, eta: 0:26:36, time: 1.369, data_time: 0.218, memory: 8601, stage0_loss_cls: 0.7574, stage0_pos_acc: 80.7500, stage0_loss_bbox: 0.3091, stage0_loss_iou: 0.5596, stage0_loss_global: 0.2962, stage0_loss_mask: 0.7018, stage1_loss_cls: 0.5505, stage1_pos_acc: 86.2500, stage1_loss_bbox: 0.2210, stage1_loss_iou: 0.4029, stage1_loss_global: 0.2462, stage1_loss_mask: 0.5902, stage2_loss_cls: 0.3729, stage2_pos_acc: 87.5000, stage2_loss_bbox: 0.2210, stage2_loss_iou: 0.4040, stage2_loss_global: 0.2227, stage2_loss_mask: 0.6061, stage3_loss_cls: 0.3124, stage3_pos_acc: 87.7500, stage3_loss_bbox: 0.2253, stage3_loss_iou: 0.4062, stage3_loss_global: 0.2239, stage3_loss_mask: 0.7470, stage4_loss_cls: 0.2865, stage4_pos_acc: 88.5000, stage4_loss_bbox: 0.2230, stage4_loss_iou: 0.4000, stage4_loss_global: 0.2215, stage4_loss_mask: 0.6120, stage5_loss_cls: 0.2708, stage5_pos_acc: 89.7500, stage5_loss_bbox: 0.2231, stage5_loss_iou: 0.3997, stage5_loss_global: 0.2183, stage5_loss_mask: 0.6266, loss: 11.8580, grad_norm: 250.3321
2021-12-29 15:33:11,792 - mmdet - INFO - Saving checkpoint at 13 epochs
2021-12-29 15:34:27,561 - mmdet - INFO - Epoch [14][50/52]	lr: 1.813e-05, eta: 0:25:24, time: 1.351, data_time: 0.215, memory: 8601, stage0_loss_cls: 0.7461, stage0_pos_acc: 86.5000, stage0_loss_bbox: 0.3032, stage0_loss_iou: 0.5530, stage0_loss_global: 0.2282, stage0_loss_mask: 0.6336, stage1_loss_cls: 0.5165, stage1_pos_acc: 91.5000, stage1_loss_bbox: 0.2191, stage1_loss_iou: 0.3980, stage1_loss_global: 0.1910, stage1_loss_mask: 0.5560, stage2_loss_cls: 0.3271, stage2_pos_acc: 89.0000, stage2_loss_bbox: 0.2162, stage2_loss_iou: 0.3949, stage2_loss_global: 0.1764, stage2_loss_mask: 0.5694, stage3_loss_cls: 0.2805, stage3_pos_acc: 90.7500, stage3_loss_bbox: 0.2152, stage3_loss_iou: 0.3888, stage3_loss_global: 0.1721, stage3_loss_mask: 0.6774, stage4_loss_cls: 0.2617, stage4_pos_acc: 91.7500, stage4_loss_bbox: 0.2138, stage4_loss_iou: 0.3851, stage4_loss_global: 0.1732, stage4_loss_mask: 0.5618, stage5_loss_cls: 0.2502, stage5_pos_acc: 90.2500, stage5_loss_bbox: 0.2196, stage5_loss_iou: 0.3907, stage5_loss_global: 0.1764, stage5_loss_mask: 0.5805, loss: 10.9756, grad_norm: 184.8335
2021-12-29 15:34:30,273 - mmdet - INFO - Saving checkpoint at 14 epochs
2021-12-29 15:35:46,554 - mmdet - INFO - Epoch [15][50/52]	lr: 1.943e-05, eta: 0:24:14, time: 1.361, data_time: 0.222, memory: 8601, stage0_loss_cls: 0.7266, stage0_pos_acc: 82.5000, stage0_loss_bbox: 0.2974, stage0_loss_iou: 0.5451, stage0_loss_global: 0.2064, stage0_loss_mask: 0.6237, stage1_loss_cls: 0.5004, stage1_pos_acc: 90.0000, stage1_loss_bbox: 0.2116, stage1_loss_iou: 0.3837, stage1_loss_global: 0.1762, stage1_loss_mask: 0.5616, stage2_loss_cls: 0.3298, stage2_pos_acc: 90.0000, stage2_loss_bbox: 0.2147, stage2_loss_iou: 0.3896, stage2_loss_global: 0.1703, stage2_loss_mask: 0.5837, stage3_loss_cls: 0.2742, stage3_pos_acc: 91.0000, stage3_loss_bbox: 0.2202, stage3_loss_iou: 0.3962, stage3_loss_global: 0.1679, stage3_loss_mask: 0.6573, stage4_loss_cls: 0.2513, stage4_pos_acc: 90.2500, stage4_loss_bbox: 0.2209, stage4_loss_iou: 0.3944, stage4_loss_global: 0.1660, stage4_loss_mask: 0.5631, stage5_loss_cls: 0.2429, stage5_pos_acc: 90.7500, stage5_loss_bbox: 0.2229, stage5_loss_iou: 0.3965, stage5_loss_global: 0.1703, stage5_loss_mask: 0.5721, loss: 10.8370, grad_norm: 183.8047
2021-12-29 15:35:49,344 - mmdet - INFO - Saving checkpoint at 15 epochs
2021-12-29 15:37:05,914 - mmdet - INFO - Epoch [16][50/52]	lr: 2.073e-05, eta: 0:23:03, time: 1.358, data_time: 0.211, memory: 8601, stage0_loss_cls: 0.7043, stage0_pos_acc: 85.2500, stage0_loss_bbox: 0.3105, stage0_loss_iou: 0.5489, stage0_loss_global: 0.2022, stage0_loss_mask: 0.6375, stage1_loss_cls: 0.4843, stage1_pos_acc: 88.0000, stage1_loss_bbox: 0.2177, stage1_loss_iou: 0.3956, stage1_loss_global: 0.1894, stage1_loss_mask: 0.5715, stage2_loss_cls: 0.3423, stage2_pos_acc: 86.2500, stage2_loss_bbox: 0.2163, stage2_loss_iou: 0.3911, stage2_loss_global: 0.1914, stage2_loss_mask: 0.5767, stage3_loss_cls: 0.2791, stage3_pos_acc: 88.2500, stage3_loss_bbox: 0.2180, stage3_loss_iou: 0.3891, stage3_loss_global: 0.2006, stage3_loss_mask: 0.6401, stage4_loss_cls: 0.2679, stage4_pos_acc: 88.2500, stage4_loss_bbox: 0.2157, stage4_loss_iou: 0.3863, stage4_loss_global: 0.2131, stage4_loss_mask: 0.5733, stage5_loss_cls: 0.2471, stage5_pos_acc: 89.0000, stage5_loss_bbox: 0.2166, stage5_loss_iou: 0.3889, stage5_loss_global: 0.2154, stage5_loss_mask: 0.5841, loss: 11.0150, grad_norm: 242.3616
2021-12-29 15:37:08,669 - mmdet - INFO - Saving checkpoint at 16 epochs
2021-12-29 15:38:25,105 - mmdet - INFO - Epoch [17][50/52]	lr: 2.203e-05, eta: 0:21:53, time: 1.365, data_time: 0.219, memory: 8601, stage0_loss_cls: 0.6417, stage0_pos_acc: 90.5000, stage0_loss_bbox: 0.3230, stage0_loss_iou: 0.5788, stage0_loss_global: 0.1500, stage0_loss_mask: 0.6382, stage1_loss_cls: 0.4292, stage1_pos_acc: 93.2500, stage1_loss_bbox: 0.2222, stage1_loss_iou: 0.3957, stage1_loss_global: 0.1348, stage1_loss_mask: 0.5764, stage2_loss_cls: 0.2770, stage2_pos_acc: 91.7500, stage2_loss_bbox: 0.2135, stage2_loss_iou: 0.3853, stage2_loss_global: 0.1278, stage2_loss_mask: 0.5871, stage3_loss_cls: 0.2174, stage3_pos_acc: 92.2500, stage3_loss_bbox: 0.2099, stage3_loss_iou: 0.3794, stage3_loss_global: 0.1310, stage3_loss_mask: 0.6207, stage4_loss_cls: 0.2040, stage4_pos_acc: 92.2500, stage4_loss_bbox: 0.2140, stage4_loss_iou: 0.3806, stage4_loss_global: 0.1278, stage4_loss_mask: 0.5623, stage5_loss_cls: 0.1988, stage5_pos_acc: 92.5000, stage5_loss_bbox: 0.2145, stage5_loss_iou: 0.3819, stage5_loss_global: 0.1262, stage5_loss_mask: 0.5671, loss: 10.2162, grad_norm: 299.2433
2021-12-29 15:38:27,735 - mmdet - INFO - Saving checkpoint at 17 epochs
2021-12-29 15:39:43,986 - mmdet - INFO - Epoch [18][50/52]	lr: 2.333e-05, eta: 0:20:43, time: 1.360, data_time: 0.216, memory: 8601, stage0_loss_cls: 0.6308, stage0_pos_acc: 89.0000, stage0_loss_bbox: 0.3035, stage0_loss_iou: 0.5397, stage0_loss_global: 0.2046, stage0_loss_mask: 0.5878, stage1_loss_cls: 0.4065, stage1_pos_acc: 91.7500, stage1_loss_bbox: 0.2245, stage1_loss_iou: 0.3985, stage1_loss_global: 0.2115, stage1_loss_mask: 0.5471, stage2_loss_cls: 0.2916, stage2_pos_acc: 91.0000, stage2_loss_bbox: 0.2146, stage2_loss_iou: 0.3835, stage2_loss_global: 0.2144, stage2_loss_mask: 0.5352, stage3_loss_cls: 0.2441, stage3_pos_acc: 91.5000, stage3_loss_bbox: 0.2145, stage3_loss_iou: 0.3775, stage3_loss_global: 0.2218, stage3_loss_mask: 0.5687, stage4_loss_cls: 0.2329, stage4_pos_acc: 90.2500, stage4_loss_bbox: 0.2132, stage4_loss_iou: 0.3743, stage4_loss_global: 0.2118, stage4_loss_mask: 0.5275, stage5_loss_cls: 0.2377, stage5_pos_acc: 91.0000, stage5_loss_bbox: 0.2088, stage5_loss_iou: 0.3707, stage5_loss_global: 0.2155, stage5_loss_mask: 0.5326, loss: 10.4454, grad_norm: 268.2080
2021-12-29 15:39:46,735 - mmdet - INFO - Saving checkpoint at 18 epochs
2021-12-29 15:41:02,900 - mmdet - INFO - Epoch [19][50/52]	lr: 2.463e-05, eta: 0:19:33, time: 1.362, data_time: 0.221, memory: 8601, stage0_loss_cls: 0.5944, stage0_pos_acc: 90.5000, stage0_loss_bbox: 0.3132, stage0_loss_iou: 0.5573, stage0_loss_global: 0.1825, stage0_loss_mask: 0.6114, stage1_loss_cls: 0.3731, stage1_pos_acc: 93.2500, stage1_loss_bbox: 0.2241, stage1_loss_iou: 0.4059, stage1_loss_global: 0.1765, stage1_loss_mask: 0.5372, stage2_loss_cls: 0.2496, stage2_pos_acc: 92.5000, stage2_loss_bbox: 0.2061, stage2_loss_iou: 0.3821, stage2_loss_global: 0.1743, stage2_loss_mask: 0.5427, stage3_loss_cls: 0.2101, stage3_pos_acc: 93.5000, stage3_loss_bbox: 0.2039, stage3_loss_iou: 0.3778, stage3_loss_global: 0.1734, stage3_loss_mask: 0.5706, stage4_loss_cls: 0.1905, stage4_pos_acc: 93.2500, stage4_loss_bbox: 0.2045, stage4_loss_iou: 0.3779, stage4_loss_global: 0.1658, stage4_loss_mask: 0.5148, stage5_loss_cls: 0.1769, stage5_pos_acc: 92.2500, stage5_loss_bbox: 0.2091, stage5_loss_iou: 0.3836, stage5_loss_global: 0.1659, stage5_loss_mask: 0.5284, loss: 9.9836, grad_norm: 288.1844
2021-12-29 15:41:05,617 - mmdet - INFO - Saving checkpoint at 19 epochs
2021-12-29 15:42:23,009 - mmdet - INFO - Epoch [20][50/52]	lr: 2.500e-05, eta: 0:18:24, time: 1.378, data_time: 0.223, memory: 8601, stage0_loss_cls: 0.6092, stage0_pos_acc: 88.5000, stage0_loss_bbox: 0.3183, stage0_loss_iou: 0.5707, stage0_loss_global: 0.2251, stage0_loss_mask: 0.5672, stage1_loss_cls: 0.4121, stage1_pos_acc: 89.7500, stage1_loss_bbox: 0.2200, stage1_loss_iou: 0.3897, stage1_loss_global: 0.2246, stage1_loss_mask: 0.5161, stage2_loss_cls: 0.2744, stage2_pos_acc: 89.5000, stage2_loss_bbox: 0.2108, stage2_loss_iou: 0.3770, stage2_loss_global: 0.2262, stage2_loss_mask: 0.5289, stage3_loss_cls: 0.2404, stage3_pos_acc: 91.2500, stage3_loss_bbox: 0.2095, stage3_loss_iou: 0.3714, stage3_loss_global: 0.2348, stage3_loss_mask: 0.5571, stage4_loss_cls: 0.2149, stage4_pos_acc: 91.5000, stage4_loss_bbox: 0.2126, stage4_loss_iou: 0.3737, stage4_loss_global: 0.2366, stage4_loss_mask: 0.5275, stage5_loss_cls: 0.2052, stage5_pos_acc: 92.2500, stage5_loss_bbox: 0.2136, stage5_loss_iou: 0.3743, stage5_loss_global: 0.2408, stage5_loss_mask: 0.5326, loss: 10.4152, grad_norm: 431.0437
2021-12-29 15:42:25,695 - mmdet - INFO - Saving checkpoint at 20 epochs
2021-12-29 15:43:42,830 - mmdet - INFO - Epoch [21][50/52]	lr: 2.500e-05, eta: 0:17:15, time: 1.374, data_time: 0.212, memory: 8601, stage0_loss_cls: 0.6195, stage0_pos_acc: 90.2500, stage0_loss_bbox: 0.3182, stage0_loss_iou: 0.5640, stage0_loss_global: 0.1710, stage0_loss_mask: 0.5834, stage1_loss_cls: 0.3892, stage1_pos_acc: 93.0000, stage1_loss_bbox: 0.2248, stage1_loss_iou: 0.3988, stage1_loss_global: 0.1707, stage1_loss_mask: 0.5476, stage2_loss_cls: 0.2793, stage2_pos_acc: 92.5000, stage2_loss_bbox: 0.2093, stage2_loss_iou: 0.3800, stage2_loss_global: 0.1689, stage2_loss_mask: 0.5415, stage3_loss_cls: 0.2238, stage3_pos_acc: 93.0000, stage3_loss_bbox: 0.2141, stage3_loss_iou: 0.3828, stage3_loss_global: 0.1715, stage3_loss_mask: 0.5625, stage4_loss_cls: 0.1987, stage4_pos_acc: 92.7500, stage4_loss_bbox: 0.2158, stage4_loss_iou: 0.3834, stage4_loss_global: 0.1704, stage4_loss_mask: 0.5319, stage5_loss_cls: 0.1965, stage5_pos_acc: 92.5000, stage5_loss_bbox: 0.2110, stage5_loss_iou: 0.3824, stage5_loss_global: 0.1753, stage5_loss_mask: 0.5417, loss: 10.1281, grad_norm: 228.8884
2021-12-29 15:43:45,518 - mmdet - INFO - Saving checkpoint at 21 epochs
2021-12-29 15:45:01,905 - mmdet - INFO - Epoch [22][50/52]	lr: 2.500e-05, eta: 0:16:06, time: 1.357, data_time: 0.221, memory: 8601, stage0_loss_cls: 0.6038, stage0_pos_acc: 88.5000, stage0_loss_bbox: 0.3117, stage0_loss_iou: 0.5630, stage0_loss_global: 0.1668, stage0_loss_mask: 0.5562, stage1_loss_cls: 0.3654, stage1_pos_acc: 91.2500, stage1_loss_bbox: 0.2074, stage1_loss_iou: 0.3752, stage1_loss_global: 0.1662, stage1_loss_mask: 0.5057, stage2_loss_cls: 0.2620, stage2_pos_acc: 92.2500, stage2_loss_bbox: 0.1975, stage2_loss_iou: 0.3592, stage2_loss_global: 0.1613, stage2_loss_mask: 0.5218, stage3_loss_cls: 0.2127, stage3_pos_acc: 91.7500, stage3_loss_bbox: 0.1963, stage3_loss_iou: 0.3567, stage3_loss_global: 0.1640, stage3_loss_mask: 0.5401, stage4_loss_cls: 0.1781, stage4_pos_acc: 92.0000, stage4_loss_bbox: 0.1984, stage4_loss_iou: 0.3577, stage4_loss_global: 0.1644, stage4_loss_mask: 0.5150, stage5_loss_cls: 0.1726, stage5_pos_acc: 93.2500, stage5_loss_bbox: 0.1979, stage5_loss_iou: 0.3584, stage5_loss_global: 0.1638, stage5_loss_mask: 0.5184, loss: 9.6177, grad_norm: 277.6818
2021-12-29 15:45:04,635 - mmdet - INFO - Saving checkpoint at 22 epochs
2021-12-29 15:46:20,540 - mmdet - INFO - Epoch [23][50/52]	lr: 2.500e-05, eta: 0:14:56, time: 1.356, data_time: 0.219, memory: 8601, stage0_loss_cls: 0.5975, stage0_pos_acc: 90.5000, stage0_loss_bbox: 0.3083, stage0_loss_iou: 0.5601, stage0_loss_global: 0.1330, stage0_loss_mask: 0.5456, stage1_loss_cls: 0.3403, stage1_pos_acc: 94.0000, stage1_loss_bbox: 0.2139, stage1_loss_iou: 0.3884, stage1_loss_global: 0.1350, stage1_loss_mask: 0.5052, stage2_loss_cls: 0.2340, stage2_pos_acc: 94.7500, stage2_loss_bbox: 0.2058, stage2_loss_iou: 0.3756, stage2_loss_global: 0.1327, stage2_loss_mask: 0.5154, stage3_loss_cls: 0.1718, stage3_pos_acc: 94.7500, stage3_loss_bbox: 0.2049, stage3_loss_iou: 0.3738, stage3_loss_global: 0.1249, stage3_loss_mask: 0.5246, stage4_loss_cls: 0.1470, stage4_pos_acc: 95.0000, stage4_loss_bbox: 0.2059, stage4_loss_iou: 0.3720, stage4_loss_global: 0.1302, stage4_loss_mask: 0.5022, stage5_loss_cls: 0.1432, stage5_pos_acc: 94.7500, stage5_loss_bbox: 0.2063, stage5_loss_iou: 0.3714, stage5_loss_global: 0.1263, stage5_loss_mask: 0.5082, loss: 9.3037, grad_norm: 404.0470
2021-12-29 15:46:23,322 - mmdet - INFO - Saving checkpoint at 23 epochs
2021-12-29 15:47:39,266 - mmdet - INFO - Epoch [24][50/52]	lr: 2.500e-05, eta: 0:13:47, time: 1.357, data_time: 0.216, memory: 8601, stage0_loss_cls: 0.6131, stage0_pos_acc: 87.2500, stage0_loss_bbox: 0.3003, stage0_loss_iou: 0.5425, stage0_loss_global: 0.2398, stage0_loss_mask: 0.5171, stage1_loss_cls: 0.3985, stage1_pos_acc: 88.0000, stage1_loss_bbox: 0.2096, stage1_loss_iou: 0.3770, stage1_loss_global: 0.2345, stage1_loss_mask: 0.4939, stage2_loss_cls: 0.2958, stage2_pos_acc: 86.5000, stage2_loss_bbox: 0.2047, stage2_loss_iou: 0.3674, stage2_loss_global: 0.2447, stage2_loss_mask: 0.5066, stage3_loss_cls: 0.2656, stage3_pos_acc: 87.7500, stage3_loss_bbox: 0.2045, stage3_loss_iou: 0.3631, stage3_loss_global: 0.2544, stage3_loss_mask: 0.5221, stage4_loss_cls: 0.2441, stage4_pos_acc: 86.7500, stage4_loss_bbox: 0.2084, stage4_loss_iou: 0.3710, stage4_loss_global: 0.2558, stage4_loss_mask: 0.5105, stage5_loss_cls: 0.2366, stage5_pos_acc: 87.0000, stage5_loss_bbox: 0.2082, stage5_loss_iou: 0.3699, stage5_loss_global: 0.2645, stage5_loss_mask: 0.5222, loss: 10.3465, grad_norm: 303.5166
2021-12-29 15:47:42,067 - mmdet - INFO - Saving checkpoint at 24 epochs
2021-12-29 15:48:57,879 - mmdet - INFO - Epoch [25][50/52]	lr: 2.500e-05, eta: 0:12:38, time: 1.355, data_time: 0.220, memory: 8601, stage0_loss_cls: 0.5222, stage0_pos_acc: 91.7500, stage0_loss_bbox: 0.3085, stage0_loss_iou: 0.5569, stage0_loss_global: 0.1244, stage0_loss_mask: 0.5332, stage1_loss_cls: 0.3324, stage1_pos_acc: 94.7500, stage1_loss_bbox: 0.2055, stage1_loss_iou: 0.3718, stage1_loss_global: 0.1202, stage1_loss_mask: 0.5137, stage2_loss_cls: 0.2157, stage2_pos_acc: 95.0000, stage2_loss_bbox: 0.2003, stage2_loss_iou: 0.3658, stage2_loss_global: 0.1173, stage2_loss_mask: 0.5162, stage3_loss_cls: 0.1658, stage3_pos_acc: 95.5000, stage3_loss_bbox: 0.1990, stage3_loss_iou: 0.3614, stage3_loss_global: 0.1186, stage3_loss_mask: 0.5229, stage4_loss_cls: 0.1487, stage4_pos_acc: 95.7500, stage4_loss_bbox: 0.1998, stage4_loss_iou: 0.3613, stage4_loss_global: 0.1164, stage4_loss_mask: 0.4986, stage5_loss_cls: 0.1473, stage5_pos_acc: 96.0000, stage5_loss_bbox: 0.1993, stage5_loss_iou: 0.3622, stage5_loss_global: 0.1153, stage5_loss_mask: 0.4984, loss: 9.0190, grad_norm: 211.2482
2021-12-29 15:49:00,521 - mmdet - INFO - Saving checkpoint at 25 epochs
2021-12-29 15:50:16,465 - mmdet - INFO - Epoch [26][50/52]	lr: 2.500e-05, eta: 0:11:29, time: 1.357, data_time: 0.218, memory: 8601, stage0_loss_cls: 0.5034, stage0_pos_acc: 94.2500, stage0_loss_bbox: 0.3291, stage0_loss_iou: 0.5930, stage0_loss_global: 0.1655, stage0_loss_mask: 0.5244, stage1_loss_cls: 0.3239, stage1_pos_acc: 92.7500, stage1_loss_bbox: 0.2127, stage1_loss_iou: 0.3850, stage1_loss_global: 0.1635, stage1_loss_mask: 0.4926, stage2_loss_cls: 0.2051, stage2_pos_acc: 92.7500, stage2_loss_bbox: 0.2043, stage2_loss_iou: 0.3678, stage2_loss_global: 0.1597, stage2_loss_mask: 0.4965, stage3_loss_cls: 0.1713, stage3_pos_acc: 92.7500, stage3_loss_bbox: 0.2053, stage3_loss_iou: 0.3663, stage3_loss_global: 0.1590, stage3_loss_mask: 0.5052, stage4_loss_cls: 0.1612, stage4_pos_acc: 93.0000, stage4_loss_bbox: 0.2044, stage4_loss_iou: 0.3655, stage4_loss_global: 0.1544, stage4_loss_mask: 0.4874, stage5_loss_cls: 0.1591, stage5_pos_acc: 94.0000, stage5_loss_bbox: 0.2024, stage5_loss_iou: 0.3636, stage5_loss_global: 0.1559, stage5_loss_mask: 0.4879, loss: 9.2756, grad_norm: 283.4755
2021-12-29 15:50:19,285 - mmdet - INFO - Saving checkpoint at 26 epochs
2021-12-29 15:51:35,264 - mmdet - INFO - Epoch [27][50/52]	lr: 2.500e-05, eta: 0:10:20, time: 1.355, data_time: 0.221, memory: 8601, stage0_loss_cls: 0.4936, stage0_pos_acc: 94.2500, stage0_loss_bbox: 0.3181, stage0_loss_iou: 0.5582, stage0_loss_global: 0.1143, stage0_loss_mask: 0.5533, stage1_loss_cls: 0.3100, stage1_pos_acc: 95.5000, stage1_loss_bbox: 0.2161, stage1_loss_iou: 0.3858, stage1_loss_global: 0.1120, stage1_loss_mask: 0.5171, stage2_loss_cls: 0.2161, stage2_pos_acc: 94.2500, stage2_loss_bbox: 0.2039, stage2_loss_iou: 0.3697, stage2_loss_global: 0.1127, stage2_loss_mask: 0.5265, stage3_loss_cls: 0.1788, stage3_pos_acc: 96.2500, stage3_loss_bbox: 0.1975, stage3_loss_iou: 0.3628, stage3_loss_global: 0.1181, stage3_loss_mask: 0.5189, stage4_loss_cls: 0.1530, stage4_pos_acc: 95.7500, stage4_loss_bbox: 0.1981, stage4_loss_iou: 0.3631, stage4_loss_global: 0.1148, stage4_loss_mask: 0.4980, stage5_loss_cls: 0.1463, stage5_pos_acc: 96.5000, stage5_loss_bbox: 0.2019, stage5_loss_iou: 0.3644, stage5_loss_global: 0.1165, stage5_loss_mask: 0.5044, loss: 9.0441, grad_norm: 236.9531
2021-12-29 15:51:37,929 - mmdet - INFO - Saving checkpoint at 27 epochs
2021-12-29 15:52:53,685 - mmdet - INFO - Epoch [28][50/52]	lr: 2.500e-06, eta: 0:09:11, time: 1.355, data_time: 0.214, memory: 8601, stage0_loss_cls: 0.4693, stage0_pos_acc: 95.0000, stage0_loss_bbox: 0.2875, stage0_loss_iou: 0.5154, stage0_loss_global: 0.1157, stage0_loss_mask: 0.5267, stage1_loss_cls: 0.2942, stage1_pos_acc: 95.0000, stage1_loss_bbox: 0.2013, stage1_loss_iou: 0.3629, stage1_loss_global: 0.1127, stage1_loss_mask: 0.4978, stage2_loss_cls: 0.2096, stage2_pos_acc: 93.7500, stage2_loss_bbox: 0.1961, stage2_loss_iou: 0.3581, stage2_loss_global: 0.1086, stage2_loss_mask: 0.4919, stage3_loss_cls: 0.1390, stage3_pos_acc: 94.7500, stage3_loss_bbox: 0.1969, stage3_loss_iou: 0.3585, stage3_loss_global: 0.1029, stage3_loss_mask: 0.5101, stage4_loss_cls: 0.1358, stage4_pos_acc: 94.5000, stage4_loss_bbox: 0.1987, stage4_loss_iou: 0.3579, stage4_loss_global: 0.1023, stage4_loss_mask: 0.4943, stage5_loss_cls: 0.1202, stage5_pos_acc: 94.5000, stage5_loss_bbox: 0.1989, stage5_loss_iou: 0.3551, stage5_loss_global: 0.1052, stage5_loss_mask: 0.4969, loss: 8.6206, grad_norm: 170.2066
2021-12-29 15:52:56,321 - mmdet - INFO - Saving checkpoint at 28 epochs
2021-12-29 15:54:12,365 - mmdet - INFO - Epoch [29][50/52]	lr: 2.500e-06, eta: 0:08:02, time: 1.359, data_time: 0.218, memory: 8601, stage0_loss_cls: 0.4534, stage0_pos_acc: 95.5000, stage0_loss_bbox: 0.2692, stage0_loss_iou: 0.4952, stage0_loss_global: 0.0946, stage0_loss_mask: 0.4886, stage1_loss_cls: 0.2588, stage1_pos_acc: 96.2500, stage1_loss_bbox: 0.1953, stage1_loss_iou: 0.3619, stage1_loss_global: 0.0886, stage1_loss_mask: 0.4882, stage2_loss_cls: 0.1574, stage2_pos_acc: 97.5000, stage2_loss_bbox: 0.1852, stage2_loss_iou: 0.3436, stage2_loss_global: 0.0783, stage2_loss_mask: 0.4858, stage3_loss_cls: 0.1141, stage3_pos_acc: 97.0000, stage3_loss_bbox: 0.1845, stage3_loss_iou: 0.3401, stage3_loss_global: 0.0732, stage3_loss_mask: 0.4921, stage4_loss_cls: 0.0920, stage4_pos_acc: 97.2500, stage4_loss_bbox: 0.1881, stage4_loss_iou: 0.3426, stage4_loss_global: 0.0713, stage4_loss_mask: 0.4697, stage5_loss_cls: 0.0812, stage5_pos_acc: 97.5000, stage5_loss_bbox: 0.1879, stage5_loss_iou: 0.3429, stage5_loss_global: 0.0683, stage5_loss_mask: 0.4753, loss: 7.9672, grad_norm: 481.9856
2021-12-29 15:54:15,085 - mmdet - INFO - Saving checkpoint at 29 epochs
2021-12-29 15:55:31,849 - mmdet - INFO - Epoch [30][50/52]	lr: 2.500e-06, eta: 0:06:54, time: 1.370, data_time: 0.222, memory: 8601, stage0_loss_cls: 0.4308, stage0_pos_acc: 95.2500, stage0_loss_bbox: 0.2628, stage0_loss_iou: 0.4839, stage0_loss_global: 0.0906, stage0_loss_mask: 0.4884, stage1_loss_cls: 0.2443, stage1_pos_acc: 96.2500, stage1_loss_bbox: 0.1984, stage1_loss_iou: 0.3541, stage1_loss_global: 0.0872, stage1_loss_mask: 0.4783, stage2_loss_cls: 0.1330, stage2_pos_acc: 97.2500, stage2_loss_bbox: 0.1893, stage2_loss_iou: 0.3437, stage2_loss_global: 0.0732, stage2_loss_mask: 0.4832, stage3_loss_cls: 0.0965, stage3_pos_acc: 98.0000, stage3_loss_bbox: 0.1877, stage3_loss_iou: 0.3393, stage3_loss_global: 0.0707, stage3_loss_mask: 0.4856, stage4_loss_cls: 0.0820, stage4_pos_acc: 97.7500, stage4_loss_bbox: 0.1875, stage4_loss_iou: 0.3371, stage4_loss_global: 0.0701, stage4_loss_mask: 0.4704, stage5_loss_cls: 0.0791, stage5_pos_acc: 97.5000, stage5_loss_bbox: 0.1864, stage5_loss_iou: 0.3349, stage5_loss_global: 0.0688, stage5_loss_mask: 0.4710, loss: 7.8083, grad_norm: 317.3055
2021-12-29 15:55:34,602 - mmdet - INFO - Saving checkpoint at 30 epochs
2021-12-29 15:56:51,561 - mmdet - INFO - Epoch [31][50/52]	lr: 2.500e-06, eta: 0:05:45, time: 1.375, data_time: 0.217, memory: 8608, stage0_loss_cls: 0.4267, stage0_pos_acc: 94.7500, stage0_loss_bbox: 0.2663, stage0_loss_iou: 0.4867, stage0_loss_global: 0.1054, stage0_loss_mask: 0.5000, stage1_loss_cls: 0.2364, stage1_pos_acc: 96.2500, stage1_loss_bbox: 0.1908, stage1_loss_iou: 0.3541, stage1_loss_global: 0.1022, stage1_loss_mask: 0.4775, stage2_loss_cls: 0.1401, stage2_pos_acc: 96.0000, stage2_loss_bbox: 0.1817, stage2_loss_iou: 0.3359, stage2_loss_global: 0.1025, stage2_loss_mask: 0.4722, stage3_loss_cls: 0.1090, stage3_pos_acc: 96.2500, stage3_loss_bbox: 0.1801, stage3_loss_iou: 0.3329, stage3_loss_global: 0.1068, stage3_loss_mask: 0.4806, stage4_loss_cls: 0.0969, stage4_pos_acc: 96.5000, stage4_loss_bbox: 0.1814, stage4_loss_iou: 0.3344, stage4_loss_global: 0.1081, stage4_loss_mask: 0.4635, stage5_loss_cls: 0.0961, stage5_pos_acc: 96.5000, stage5_loss_bbox: 0.1803, stage5_loss_iou: 0.3320, stage5_loss_global: 0.1071, stage5_loss_mask: 0.4680, loss: 7.9555, grad_norm: 205.0388
2021-12-29 15:56:54,297 - mmdet - INFO - Saving checkpoint at 31 epochs
2021-12-29 15:58:10,243 - mmdet - INFO - Epoch [32][50/52]	lr: 2.500e-06, eta: 0:04:36, time: 1.358, data_time: 0.218, memory: 8608, stage0_loss_cls: 0.3992, stage0_pos_acc: 95.5000, stage0_loss_bbox: 0.2610, stage0_loss_iou: 0.4775, stage0_loss_global: 0.1031, stage0_loss_mask: 0.4919, stage1_loss_cls: 0.2373, stage1_pos_acc: 96.7500, stage1_loss_bbox: 0.1952, stage1_loss_iou: 0.3553, stage1_loss_global: 0.0967, stage1_loss_mask: 0.4794, stage2_loss_cls: 0.1399, stage2_pos_acc: 95.5000, stage2_loss_bbox: 0.1860, stage2_loss_iou: 0.3438, stage2_loss_global: 0.0854, stage2_loss_mask: 0.4854, stage3_loss_cls: 0.1045, stage3_pos_acc: 96.2500, stage3_loss_bbox: 0.1829, stage3_loss_iou: 0.3384, stage3_loss_global: 0.0823, stage3_loss_mask: 0.4970, stage4_loss_cls: 0.0796, stage4_pos_acc: 96.7500, stage4_loss_bbox: 0.1823, stage4_loss_iou: 0.3363, stage4_loss_global: 0.0844, stage4_loss_mask: 0.4768, stage5_loss_cls: 0.0726, stage5_pos_acc: 97.0000, stage5_loss_bbox: 0.1811, stage5_loss_iou: 0.3333, stage5_loss_global: 0.0790, stage5_loss_mask: 0.4786, loss: 7.8461, grad_norm: 375.3253
2021-12-29 15:58:12,925 - mmdet - INFO - Saving checkpoint at 32 epochs
2021-12-29 15:59:29,908 - mmdet - INFO - Epoch [33][50/52]	lr: 2.500e-06, eta: 0:03:28, time: 1.378, data_time: 0.223, memory: 8608, stage0_loss_cls: 0.3865, stage0_pos_acc: 96.0000, stage0_loss_bbox: 0.2547, stage0_loss_iou: 0.4648, stage0_loss_global: 0.0882, stage0_loss_mask: 0.4909, stage1_loss_cls: 0.2251, stage1_pos_acc: 96.2500, stage1_loss_bbox: 0.1986, stage1_loss_iou: 0.3574, stage1_loss_global: 0.0827, stage1_loss_mask: 0.4814, stage2_loss_cls: 0.1338, stage2_pos_acc: 96.5000, stage2_loss_bbox: 0.1909, stage2_loss_iou: 0.3474, stage2_loss_global: 0.0740, stage2_loss_mask: 0.4809, stage3_loss_cls: 0.0848, stage3_pos_acc: 97.2500, stage3_loss_bbox: 0.1900, stage3_loss_iou: 0.3437, stage3_loss_global: 0.0716, stage3_loss_mask: 0.4968, stage4_loss_cls: 0.0747, stage4_pos_acc: 97.5000, stage4_loss_bbox: 0.1895, stage4_loss_iou: 0.3431, stage4_loss_global: 0.0682, stage4_loss_mask: 0.4773, stage5_loss_cls: 0.0664, stage5_pos_acc: 96.7500, stage5_loss_bbox: 0.1900, stage5_loss_iou: 0.3419, stage5_loss_global: 0.0667, stage5_loss_mask: 0.4823, loss: 7.7445, grad_norm: 199.1056
2021-12-29 15:59:32,601 - mmdet - INFO - Saving checkpoint at 33 epochs
2021-12-29 16:00:48,561 - mmdet - INFO - Epoch [34][50/52]	lr: 2.500e-07, eta: 0:02:19, time: 1.359, data_time: 0.216, memory: 8608, stage0_loss_cls: 0.3889, stage0_pos_acc: 96.0000, stage0_loss_bbox: 0.2610, stage0_loss_iou: 0.4758, stage0_loss_global: 0.0773, stage0_loss_mask: 0.5084, stage1_loss_cls: 0.2230, stage1_pos_acc: 96.5000, stage1_loss_bbox: 0.1988, stage1_loss_iou: 0.3581, stage1_loss_global: 0.0733, stage1_loss_mask: 0.4894, stage2_loss_cls: 0.1313, stage2_pos_acc: 97.0000, stage2_loss_bbox: 0.1918, stage2_loss_iou: 0.3445, stage2_loss_global: 0.0645, stage2_loss_mask: 0.4703, stage3_loss_cls: 0.0883, stage3_pos_acc: 96.7500, stage3_loss_bbox: 0.1892, stage3_loss_iou: 0.3406, stage3_loss_global: 0.0614, stage3_loss_mask: 0.4843, stage4_loss_cls: 0.0734, stage4_pos_acc: 97.5000, stage4_loss_bbox: 0.1902, stage4_loss_iou: 0.3407, stage4_loss_global: 0.0608, stage4_loss_mask: 0.4579, stage5_loss_cls: 0.0697, stage5_pos_acc: 97.2500, stage5_loss_bbox: 0.1901, stage5_loss_iou: 0.3423, stage5_loss_global: 0.0594, stage5_loss_mask: 0.4654, loss: 7.6702, grad_norm: 161.9105
2021-12-29 16:00:51,207 - mmdet - INFO - Saving checkpoint at 34 epochs
2021-12-29 16:02:08,012 - mmdet - INFO - Epoch [35][50/52]	lr: 2.500e-07, eta: 0:01:11, time: 1.370, data_time: 0.221, memory: 8608, stage0_loss_cls: 0.3799, stage0_pos_acc: 96.7500, stage0_loss_bbox: 0.2475, stage0_loss_iou: 0.4641, stage0_loss_global: 0.0533, stage0_loss_mask: 0.4821, stage1_loss_cls: 0.1917, stage1_pos_acc: 98.2500, stage1_loss_bbox: 0.1866, stage1_loss_iou: 0.3503, stage1_loss_global: 0.0484, stage1_loss_mask: 0.4853, stage2_loss_cls: 0.1100, stage2_pos_acc: 98.7500, stage2_loss_bbox: 0.1802, stage2_loss_iou: 0.3358, stage2_loss_global: 0.0443, stage2_loss_mask: 0.4765, stage3_loss_cls: 0.0647, stage3_pos_acc: 98.7500, stage3_loss_bbox: 0.1786, stage3_loss_iou: 0.3333, stage3_loss_global: 0.0438, stage3_loss_mask: 0.4912, stage4_loss_cls: 0.0498, stage4_pos_acc: 99.5000, stage4_loss_bbox: 0.1791, stage4_loss_iou: 0.3338, stage4_loss_global: 0.0418, stage4_loss_mask: 0.4693, stage5_loss_cls: 0.0474, stage5_pos_acc: 98.7500, stage5_loss_bbox: 0.1768, stage5_loss_iou: 0.3297, stage5_loss_global: 0.0399, stage5_loss_mask: 0.4730, loss: 7.2882, grad_norm: 112.2267
2021-12-29 16:02:10,755 - mmdet - INFO - Saving checkpoint at 35 epochs
2021-12-29 16:03:26,495 - mmdet - INFO - Epoch [36][50/52]	lr: 2.500e-07, eta: 0:00:02, time: 1.355, data_time: 0.216, memory: 8608, stage0_loss_cls: 0.3749, stage0_pos_acc: 96.7500, stage0_loss_bbox: 0.2556, stage0_loss_iou: 0.4702, stage0_loss_global: 0.0664, stage0_loss_mask: 0.4850, stage1_loss_cls: 0.2079, stage1_pos_acc: 97.5000, stage1_loss_bbox: 0.1923, stage1_loss_iou: 0.3557, stage1_loss_global: 0.0611, stage1_loss_mask: 0.4817, stage2_loss_cls: 0.1115, stage2_pos_acc: 98.0000, stage2_loss_bbox: 0.1881, stage2_loss_iou: 0.3476, stage2_loss_global: 0.0509, stage2_loss_mask: 0.4802, stage3_loss_cls: 0.0814, stage3_pos_acc: 98.0000, stage3_loss_bbox: 0.1879, stage3_loss_iou: 0.3461, stage3_loss_global: 0.0488, stage3_loss_mask: 0.4865, stage4_loss_cls: 0.0655, stage4_pos_acc: 98.7500, stage4_loss_bbox: 0.1911, stage4_loss_iou: 0.3472, stage4_loss_global: 0.0449, stage4_loss_mask: 0.4795, stage5_loss_cls: 0.0554, stage5_pos_acc: 98.5000, stage5_loss_bbox: 0.1940, stage5_loss_iou: 0.3506, stage5_loss_global: 0.0420, stage5_loss_mask: 0.4830, loss: 7.5327, grad_norm: 327.7662
2021-12-29 16:03:29,170 - mmdet - INFO - Saving checkpoint at 36 epochs
